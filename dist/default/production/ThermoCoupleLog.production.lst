

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Nov 27 16:31:36 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1512
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	swtext1,local,class=CONST,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  0008                     	;# 
    36  0009                     	;# 
    37  000A                     	;# 
    38  000B                     	;# 
    39  000C                     	;# 
    40  000D                     	;# 
    41  000E                     	;# 
    42  0010                     	;# 
    43  0011                     	;# 
    44  0012                     	;# 
    45  0015                     	;# 
    46  0016                     	;# 
    47  0016                     	;# 
    48  0017                     	;# 
    49  0018                     	;# 
    50  0019                     	;# 
    51  001A                     	;# 
    52  001B                     	;# 
    53  001C                     	;# 
    54  008C                     	;# 
    55  008D                     	;# 
    56  008E                     	;# 
    57  0090                     	;# 
    58  0091                     	;# 
    59  0092                     	;# 
    60  0095                     	;# 
    61  0096                     	;# 
    62  0097                     	;# 
    63  0099                     	;# 
    64  009A                     	;# 
    65  009B                     	;# 
    66  009B                     	;# 
    67  009B                     	;# 
    68  009B                     	;# 
    69  009C                     	;# 
    70  009C                     	;# 
    71  009D                     	;# 
    72  009E                     	;# 
    73  010C                     	;# 
    74  010D                     	;# 
    75  010E                     	;# 
    76  0116                     	;# 
    77  0117                     	;# 
    78  011D                     	;# 
    79  018C                     	;# 
    80  018D                     	;# 
    81  018E                     	;# 
    82  0191                     	;# 
    83  0191                     	;# 
    84  0192                     	;# 
    85  0193                     	;# 
    86  0193                     	;# 
    87  0194                     	;# 
    88  0195                     	;# 
    89  0196                     	;# 
    90  0197                     	;# 
    91  0199                     	;# 
    92  019A                     	;# 
    93  019B                     	;# 
    94  019B                     	;# 
    95  019B                     	;# 
    96  019B                     	;# 
    97  019C                     	;# 
    98  019C                     	;# 
    99  019D                     	;# 
   100  019E                     	;# 
   101  019F                     	;# 
   102  020D                     	;# 
   103  0210                     	;# 
   104  0211                     	;# 
   105  0211                     	;# 
   106  0212                     	;# 
   107  0212                     	;# 
   108  0213                     	;# 
   109  0213                     	;# 
   110  0214                     	;# 
   111  0214                     	;# 
   112  0215                     	;# 
   113  0215                     	;# 
   114  0215                     	;# 
   115  0216                     	;# 
   116  0216                     	;# 
   117  0217                     	;# 
   118  0217                     	;# 
   119  0291                     	;# 
   120  0291                     	;# 
   121  0292                     	;# 
   122  0293                     	;# 
   123  0298                     	;# 
   124  0298                     	;# 
   125  0299                     	;# 
   126  029A                     	;# 
   127  0394                     	;# 
   128  0395                     	;# 
   129  0396                     	;# 
   130  0FE4                     	;# 
   131  0FE5                     	;# 
   132  0FE6                     	;# 
   133  0FE7                     	;# 
   134  0FE8                     	;# 
   135  0FE9                     	;# 
   136  0FEA                     	;# 
   137  0FEB                     	;# 
   138  0FED                     	;# 
   139  0FEE                     	;# 
   140  0FEF                     	;# 
   141  0711                     	;# 
   142  0712                     	;# 
   143  0713                     	;# 
   144  0714                     	;# 
   145  0715                     	;# 
   146  0716                     	;# 
   147  0717                     	;# 
   148  0718                     	;# 
   149  0719                     	;# 
   150  071A                     	;# 
   151  071A                     	;# 
   152  071A                     	;# 
   153  071B                     	;# 
   154  071C                     	;# 
   155  071C                     	;# 
   156  071C                     	;# 
   157  071D                     	;# 
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  0010                     	;# 
   174  0011                     	;# 
   175  0012                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  0090                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009B                     	;# 
   200  009C                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  0116                     	;# 
   208  0117                     	;# 
   209  011D                     	;# 
   210  018C                     	;# 
   211  018D                     	;# 
   212  018E                     	;# 
   213  0191                     	;# 
   214  0191                     	;# 
   215  0192                     	;# 
   216  0193                     	;# 
   217  0193                     	;# 
   218  0194                     	;# 
   219  0195                     	;# 
   220  0196                     	;# 
   221  0197                     	;# 
   222  0199                     	;# 
   223  019A                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019C                     	;# 
   229  019C                     	;# 
   230  019D                     	;# 
   231  019E                     	;# 
   232  019F                     	;# 
   233  020D                     	;# 
   234  0210                     	;# 
   235  0211                     	;# 
   236  0211                     	;# 
   237  0212                     	;# 
   238  0212                     	;# 
   239  0213                     	;# 
   240  0213                     	;# 
   241  0214                     	;# 
   242  0214                     	;# 
   243  0215                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0216                     	;# 
   247  0216                     	;# 
   248  0217                     	;# 
   249  0217                     	;# 
   250  0291                     	;# 
   251  0291                     	;# 
   252  0292                     	;# 
   253  0293                     	;# 
   254  0298                     	;# 
   255  0298                     	;# 
   256  0299                     	;# 
   257  029A                     	;# 
   258  0394                     	;# 
   259  0395                     	;# 
   260  0396                     	;# 
   261  0FE4                     	;# 
   262  0FE5                     	;# 
   263  0FE6                     	;# 
   264  0FE7                     	;# 
   265  0FE8                     	;# 
   266  0FE9                     	;# 
   267  0FEA                     	;# 
   268  0FEB                     	;# 
   269  0FED                     	;# 
   270  0FEE                     	;# 
   271  0FEF                     	;# 
   272  0711                     	;# 
   273  0712                     	;# 
   274  0713                     	;# 
   275  0714                     	;# 
   276  0715                     	;# 
   277  0716                     	;# 
   278  0717                     	;# 
   279  0718                     	;# 
   280  0719                     	;# 
   281  071A                     	;# 
   282  071A                     	;# 
   283  071A                     	;# 
   284  071B                     	;# 
   285  071C                     	;# 
   286  071C                     	;# 
   287  071C                     	;# 
   288  071D                     	;# 
   289  0000                     	;# 
   290  0001                     	;# 
   291  0002                     	;# 
   292  0003                     	;# 
   293  0004                     	;# 
   294  0005                     	;# 
   295  0006                     	;# 
   296  0007                     	;# 
   297  0008                     	;# 
   298  0009                     	;# 
   299  000A                     	;# 
   300  000B                     	;# 
   301  000C                     	;# 
   302  000D                     	;# 
   303  000E                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  008C                     	;# 
   317  008D                     	;# 
   318  008E                     	;# 
   319  0090                     	;# 
   320  0091                     	;# 
   321  0092                     	;# 
   322  0095                     	;# 
   323  0096                     	;# 
   324  0097                     	;# 
   325  0099                     	;# 
   326  009A                     	;# 
   327  009B                     	;# 
   328  009B                     	;# 
   329  009B                     	;# 
   330  009B                     	;# 
   331  009C                     	;# 
   332  009C                     	;# 
   333  009D                     	;# 
   334  009E                     	;# 
   335  010C                     	;# 
   336  010D                     	;# 
   337  010E                     	;# 
   338  0116                     	;# 
   339  0117                     	;# 
   340  011D                     	;# 
   341  018C                     	;# 
   342  018D                     	;# 
   343  018E                     	;# 
   344  0191                     	;# 
   345  0191                     	;# 
   346  0192                     	;# 
   347  0193                     	;# 
   348  0193                     	;# 
   349  0194                     	;# 
   350  0195                     	;# 
   351  0196                     	;# 
   352  0197                     	;# 
   353  0199                     	;# 
   354  019A                     	;# 
   355  019B                     	;# 
   356  019B                     	;# 
   357  019B                     	;# 
   358  019B                     	;# 
   359  019C                     	;# 
   360  019C                     	;# 
   361  019D                     	;# 
   362  019E                     	;# 
   363  019F                     	;# 
   364  020D                     	;# 
   365  0210                     	;# 
   366  0211                     	;# 
   367  0211                     	;# 
   368  0212                     	;# 
   369  0212                     	;# 
   370  0213                     	;# 
   371  0213                     	;# 
   372  0214                     	;# 
   373  0214                     	;# 
   374  0215                     	;# 
   375  0215                     	;# 
   376  0215                     	;# 
   377  0216                     	;# 
   378  0216                     	;# 
   379  0217                     	;# 
   380  0217                     	;# 
   381  0291                     	;# 
   382  0291                     	;# 
   383  0292                     	;# 
   384  0293                     	;# 
   385  0298                     	;# 
   386  0298                     	;# 
   387  0299                     	;# 
   388  029A                     	;# 
   389  0394                     	;# 
   390  0395                     	;# 
   391  0396                     	;# 
   392  0FE4                     	;# 
   393  0FE5                     	;# 
   394  0FE6                     	;# 
   395  0FE7                     	;# 
   396  0FE8                     	;# 
   397  0FE9                     	;# 
   398  0FEA                     	;# 
   399  0FEB                     	;# 
   400  0FED                     	;# 
   401  0FEE                     	;# 
   402  0FEF                     	;# 
   403  0711                     	;# 
   404  0712                     	;# 
   405  0713                     	;# 
   406  0714                     	;# 
   407  0715                     	;# 
   408  0716                     	;# 
   409  0717                     	;# 
   410  0718                     	;# 
   411  0719                     	;# 
   412  071A                     	;# 
   413  071A                     	;# 
   414  071A                     	;# 
   415  071B                     	;# 
   416  071C                     	;# 
   417  071C                     	;# 
   418  071C                     	;# 
   419  071D                     	;# 
   420  0000                     	;# 
   421  0001                     	;# 
   422  0002                     	;# 
   423  0003                     	;# 
   424  0004                     	;# 
   425  0005                     	;# 
   426  0006                     	;# 
   427  0007                     	;# 
   428  0008                     	;# 
   429  0009                     	;# 
   430  000A                     	;# 
   431  000B                     	;# 
   432  000C                     	;# 
   433  000D                     	;# 
   434  000E                     	;# 
   435  0010                     	;# 
   436  0011                     	;# 
   437  0012                     	;# 
   438  0015                     	;# 
   439  0016                     	;# 
   440  0016                     	;# 
   441  0017                     	;# 
   442  0018                     	;# 
   443  0019                     	;# 
   444  001A                     	;# 
   445  001B                     	;# 
   446  001C                     	;# 
   447  008C                     	;# 
   448  008D                     	;# 
   449  008E                     	;# 
   450  0090                     	;# 
   451  0091                     	;# 
   452  0092                     	;# 
   453  0095                     	;# 
   454  0096                     	;# 
   455  0097                     	;# 
   456  0099                     	;# 
   457  009A                     	;# 
   458  009B                     	;# 
   459  009B                     	;# 
   460  009B                     	;# 
   461  009B                     	;# 
   462  009C                     	;# 
   463  009C                     	;# 
   464  009D                     	;# 
   465  009E                     	;# 
   466  010C                     	;# 
   467  010D                     	;# 
   468  010E                     	;# 
   469  0116                     	;# 
   470  0117                     	;# 
   471  011D                     	;# 
   472  018C                     	;# 
   473  018D                     	;# 
   474  018E                     	;# 
   475  0191                     	;# 
   476  0191                     	;# 
   477  0192                     	;# 
   478  0193                     	;# 
   479  0193                     	;# 
   480  0194                     	;# 
   481  0195                     	;# 
   482  0196                     	;# 
   483  0197                     	;# 
   484  0199                     	;# 
   485  019A                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019B                     	;# 
   489  019B                     	;# 
   490  019C                     	;# 
   491  019C                     	;# 
   492  019D                     	;# 
   493  019E                     	;# 
   494  019F                     	;# 
   495  020D                     	;# 
   496  0210                     	;# 
   497  0211                     	;# 
   498  0211                     	;# 
   499  0212                     	;# 
   500  0212                     	;# 
   501  0213                     	;# 
   502  0213                     	;# 
   503  0214                     	;# 
   504  0214                     	;# 
   505  0215                     	;# 
   506  0215                     	;# 
   507  0215                     	;# 
   508  0216                     	;# 
   509  0216                     	;# 
   510  0217                     	;# 
   511  0217                     	;# 
   512  0291                     	;# 
   513  0291                     	;# 
   514  0292                     	;# 
   515  0293                     	;# 
   516  0298                     	;# 
   517  0298                     	;# 
   518  0299                     	;# 
   519  029A                     	;# 
   520  0394                     	;# 
   521  0395                     	;# 
   522  0396                     	;# 
   523  0FE4                     	;# 
   524  0FE5                     	;# 
   525  0FE6                     	;# 
   526  0FE7                     	;# 
   527  0FE8                     	;# 
   528  0FE9                     	;# 
   529  0FEA                     	;# 
   530  0FEB                     	;# 
   531  0FED                     	;# 
   532  0FEE                     	;# 
   533  0FEF                     	;# 
   534  0711                     	;# 
   535  0712                     	;# 
   536  0713                     	;# 
   537  0714                     	;# 
   538  0715                     	;# 
   539  0716                     	;# 
   540  0717                     	;# 
   541  0718                     	;# 
   542  0719                     	;# 
   543  071A                     	;# 
   544  071A                     	;# 
   545  071A                     	;# 
   546  071B                     	;# 
   547  071C                     	;# 
   548  071C                     	;# 
   549  071C                     	;# 
   550  071D                     	;# 
   551  0000                     	;# 
   552  0001                     	;# 
   553  0002                     	;# 
   554  0003                     	;# 
   555  0004                     	;# 
   556  0005                     	;# 
   557  0006                     	;# 
   558  0007                     	;# 
   559  0008                     	;# 
   560  0009                     	;# 
   561  000A                     	;# 
   562  000B                     	;# 
   563  000C                     	;# 
   564  000D                     	;# 
   565  000E                     	;# 
   566  0010                     	;# 
   567  0011                     	;# 
   568  0012                     	;# 
   569  0015                     	;# 
   570  0016                     	;# 
   571  0016                     	;# 
   572  0017                     	;# 
   573  0018                     	;# 
   574  0019                     	;# 
   575  001A                     	;# 
   576  001B                     	;# 
   577  001C                     	;# 
   578  008C                     	;# 
   579  008D                     	;# 
   580  008E                     	;# 
   581  0090                     	;# 
   582  0091                     	;# 
   583  0092                     	;# 
   584  0095                     	;# 
   585  0096                     	;# 
   586  0097                     	;# 
   587  0099                     	;# 
   588  009A                     	;# 
   589  009B                     	;# 
   590  009B                     	;# 
   591  009B                     	;# 
   592  009B                     	;# 
   593  009C                     	;# 
   594  009C                     	;# 
   595  009D                     	;# 
   596  009E                     	;# 
   597  010C                     	;# 
   598  010D                     	;# 
   599  010E                     	;# 
   600  0116                     	;# 
   601  0117                     	;# 
   602  011D                     	;# 
   603  018C                     	;# 
   604  018D                     	;# 
   605  018E                     	;# 
   606  0191                     	;# 
   607  0191                     	;# 
   608  0192                     	;# 
   609  0193                     	;# 
   610  0193                     	;# 
   611  0194                     	;# 
   612  0195                     	;# 
   613  0196                     	;# 
   614  0197                     	;# 
   615  0199                     	;# 
   616  019A                     	;# 
   617  019B                     	;# 
   618  019B                     	;# 
   619  019B                     	;# 
   620  019B                     	;# 
   621  019C                     	;# 
   622  019C                     	;# 
   623  019D                     	;# 
   624  019E                     	;# 
   625  019F                     	;# 
   626  020D                     	;# 
   627  0210                     	;# 
   628  0211                     	;# 
   629  0211                     	;# 
   630  0212                     	;# 
   631  0212                     	;# 
   632  0213                     	;# 
   633  0213                     	;# 
   634  0214                     	;# 
   635  0214                     	;# 
   636  0215                     	;# 
   637  0215                     	;# 
   638  0215                     	;# 
   639  0216                     	;# 
   640  0216                     	;# 
   641  0217                     	;# 
   642  0217                     	;# 
   643  0291                     	;# 
   644  0291                     	;# 
   645  0292                     	;# 
   646  0293                     	;# 
   647  0298                     	;# 
   648  0298                     	;# 
   649  0299                     	;# 
   650  029A                     	;# 
   651  0394                     	;# 
   652  0395                     	;# 
   653  0396                     	;# 
   654  0FE4                     	;# 
   655  0FE5                     	;# 
   656  0FE6                     	;# 
   657  0FE7                     	;# 
   658  0FE8                     	;# 
   659  0FE9                     	;# 
   660  0FEA                     	;# 
   661  0FEB                     	;# 
   662  0FED                     	;# 
   663  0FEE                     	;# 
   664  0FEF                     	;# 
   665  0711                     	;# 
   666  0712                     	;# 
   667  0713                     	;# 
   668  0714                     	;# 
   669  0715                     	;# 
   670  0716                     	;# 
   671  0717                     	;# 
   672  0718                     	;# 
   673  0719                     	;# 
   674  071A                     	;# 
   675  071A                     	;# 
   676  071A                     	;# 
   677  071B                     	;# 
   678  071C                     	;# 
   679  071C                     	;# 
   680  071C                     	;# 
   681  071D                     	;# 
   682                           
   683                           	psect	idataBANK0
   684  0462                     __pidataBANK0:	
   685                           
   686                           ;initializer for _CH_1_RAW
   687  0462  344E               	retlw	78
   688  0463  344F               	retlw	79
   689  0464  344E               	retlw	78
   690  0465  3445               	retlw	69
   691                           
   692                           ;initializer for _CH_2_RAW
   693  0466  344E               	retlw	78
   694  0467  344F               	retlw	79
   695  0468  344E               	retlw	78
   696  0469  3445               	retlw	69
   697                           
   698                           ;initializer for _CH_3_RAW
   699  046A  344E               	retlw	78
   700  046B  344F               	retlw	79
   701  046C  344E               	retlw	78
   702  046D  3445               	retlw	69
   703                           
   704                           ;initializer for _CH_4_RAW
   705  046E  344E               	retlw	78
   706  046F  344F               	retlw	79
   707  0470  344E               	retlw	78
   708  0471  3445               	retlw	69
   709                           
   710                           ;initializer for _CH_5_RAW
   711  0472  344E               	retlw	78
   712  0473  344F               	retlw	79
   713  0474  344E               	retlw	78
   714  0475  3445               	retlw	69
   715                           
   716                           ;initializer for _CH_6_RAW
   717  0476  344E               	retlw	78
   718  0477  344F               	retlw	79
   719  0478  344E               	retlw	78
   720  0479  3445               	retlw	69
   721                           
   722                           ;initializer for _CH_7_RAW
   723  047A  344E               	retlw	78
   724  047B  344F               	retlw	79
   725  047C  344E               	retlw	78
   726  047D  3445               	retlw	69
   727                           
   728                           ;initializer for _CH_8_RAW
   729  047E  344E               	retlw	78
   730  047F  344F               	retlw	79
   731  0480  344E               	retlw	78
   732  0481  3445               	retlw	69
   733  0011                     _PIR1bits	set	17
   734  0095                     _OPTION_REGbits	set	149
   735  0099                     _OSCCON	set	153
   736  008C                     _TRISA	set	140
   737  008D                     _TRISB	set	141
   738  008E                     _TRISC	set	142
   739  0097                     _WDTCON	set	151
   740  011D                     _APFCON	set	285
   741  010C                     _LATA	set	268
   742  010C                     _LATAbits	set	268
   743  010D                     _LATB	set	269
   744  010D                     _LATBbits	set	269
   745  010E                     _LATC	set	270
   746  018C                     _ANSELA	set	396
   747  018D                     _ANSELB	set	397
   748  018E                     _ANSELC	set	398
   749  019F                     _BAUDCON	set	415
   750  0199                     _RCREG	set	409
   751  019D                     _RCSTA	set	413
   752  019D                     _RCSTAbits	set	413
   753  019C                     _SPBRGH	set	412
   754  019B                     _SPBRGL	set	411
   755  019A                     _TXREG	set	410
   756  019E                     _TXSTA	set	414
   757  0212                     _SSP1ADD	set	530
   758  0215                     _SSP1CON1	set	533
   759  0215                     _SSP1CON1bits	set	533
   760  0214                     _SSP1STAT	set	532
   761  0214                     _SSP1STATbits	set	532
   762  0211                     _SSPBUF	set	529
   763  020D                     _WPUB	set	525
   764  0210                     _WPUE	set	528
   765                           
   766                           ; #config settings
   767  0000                     
   768                           	psect	cinit
   769  07F2                     start_initialization:	
   770  07F2                     __initialization:	
   771                           
   772                           ; Initialize objects allocated to BANK0
   773  07F2  3062               	movlw	low __pidataBANK0
   774  07F3  0084               	movwf	4
   775  07F4  3084               	movlw	(high __pidataBANK0)| (0+128)
   776  07F5  0085               	movwf	5
   777  07F6  3020               	movlw	low __pdataBANK0
   778  07F7  0086               	movwf	6
   779  07F8  3000               	movlw	high __pdataBANK0
   780  07F9  0087               	movwf	7
   781  07FA  3020               	movlw	32
   782  07FB  241B               	fcall	init_ram
   783                           
   784                           ; Clear objects allocated to COMMON
   785  07FC  01F9               	clrf	__pbssCOMMON& (0+127)
   786  07FD  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   787  07FE                     end_of_initialization:	
   788                           ;End of C runtime variable initialization code
   789                           
   790  07FE                     __end_of__initialization:	
   791  07FE  0020               	movlb	0
   792  07FF  2D1D               	ljmp	_main	;jump to C main() function
   793                           
   794                           	psect	bssCOMMON
   795  0079                     __pbssCOMMON:	
   796  0079                     _ReceiveCount:	
   797  0079                     	ds	1
   798  007A                     _ReceivedByte:	
   799  007A                     	ds	1
   800                           
   801                           	psect	dataBANK0
   802  0020                     __pdataBANK0:	
   803  0020                     _CH_1_RAW:	
   804  0020                     	ds	4
   805  0024                     _CH_2_RAW:	
   806  0024                     	ds	4
   807  0028                     _CH_3_RAW:	
   808  0028                     	ds	4
   809  002C                     _CH_4_RAW:	
   810  002C                     	ds	4
   811  0030                     _CH_5_RAW:	
   812  0030                     	ds	4
   813  0034                     _CH_6_RAW:	
   814  0034                     	ds	4
   815  0038                     _CH_7_RAW:	
   816  0038                     	ds	4
   817  003C                     _CH_8_RAW:	
   818  003C                     	ds	4
   819                           
   820                           	psect	inittext
   821  041B                     init_ram:	
   822  041B  00FE               	movwf	126
   823  041C                     initloop:	
   824  041C  0012               	moviw fsr0++
   825  041D  001E               	movwi fsr1++
   826  041E  0BFE               	decfsz	126,f
   827  041F  2C1C               	goto	initloop
   828  0420  3400               	retlw	0
   829                           
   830                           	psect	cstackCOMMON
   831  0070                     __pcstackCOMMON:	
   832  0070                     ?_PIN_MANAGER_Initialize:	
   833  0070                     ??_PIN_MANAGER_Initialize:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0070                     ?_OSCILLATOR_Initialize:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0070                     ??_OSCILLATOR_Initialize:	
   840                           ; 1 bytes @ 0x0
   841                           
   842  0070                     ?_WDT_Initialize:	
   843                           ; 1 bytes @ 0x0
   844                           
   845  0070                     ??_WDT_Initialize:	
   846                           ; 1 bytes @ 0x0
   847                           
   848  0070                     ?_EUSART_Initialize:	
   849                           ; 1 bytes @ 0x0
   850                           
   851  0070                     ??_EUSART_Initialize:	
   852                           ; 1 bytes @ 0x0
   853                           
   854  0070                     ?_SPI_Initialize:	
   855                           ; 1 bytes @ 0x0
   856                           
   857  0070                     ??_SPI_Initialize:	
   858                           ; 1 bytes @ 0x0
   859                           
   860  0070                     ?_SPI_Exchange8bit:	
   861                           ; 1 bytes @ 0x0
   862                           
   863  0070                     ??_SPI_Exchange8bit:	
   864                           ; 1 bytes @ 0x0
   865                           
   866  0070                     ?_SYSTEM_Initialize:	
   867                           ; 1 bytes @ 0x0
   868                           
   869  0070                     ??_SYSTEM_Initialize:	
   870                           ; 1 bytes @ 0x0
   871                           
   872  0070                     ?_EUSART_Read:	
   873                           ; 1 bytes @ 0x0
   874                           
   875  0070                     ??_EUSART_Read:	
   876                           ; 1 bytes @ 0x0
   877                           
   878  0070                     ?_EUSART_Write:	
   879                           ; 1 bytes @ 0x0
   880                           
   881  0070                     ??_EUSART_Write:	
   882                           ; 1 bytes @ 0x0
   883                           
   884  0070                     ?_SendDataFrame:	
   885                           ; 1 bytes @ 0x0
   886                           
   887  0070                     ?_SetChannel:	
   888                           ; 1 bytes @ 0x0
   889                           
   890  0070                     ?_GetData:	
   891                           ; 1 bytes @ 0x0
   892                           
   893  0070                     ?_main:	
   894                           ; 1 bytes @ 0x0
   895                           
   896  0070                     ?___lwmod:	
   897                           ; 1 bytes @ 0x0
   898                           
   899  0070                     SPI_Exchange8bit@data:	
   900                           ; 2 bytes @ 0x0
   901                           
   902  0070                     EUSART_Write@txData:	
   903                           ; 1 bytes @ 0x0
   904                           
   905  0070                     SetChannel@ChannelNumber:	
   906                           ; 1 bytes @ 0x0
   907                           
   908  0070                     ___lwmod@divisor:	
   909                           ; 2 bytes @ 0x0
   910                           
   911                           
   912                           ; 2 bytes @ 0x0
   913  0070                     	ds	2
   914  0072                     ??_SetChannel:	
   915  0072                     ??_GetData:	
   916                           ; 1 bytes @ 0x2
   917                           
   918  0072                     ___lwmod@dividend:	
   919                           ; 1 bytes @ 0x2
   920                           
   921                           
   922                           ; 2 bytes @ 0x2
   923  0072                     	ds	2
   924  0074                     ??___lwmod:	
   925  0074                     GetData@ArrayPointer:	
   926                           ; 1 bytes @ 0x4
   927                           
   928                           
   929                           ; 1 bytes @ 0x4
   930  0074                     	ds	1
   931  0075                     GetData@ChannelNumber:	
   932  0075                     ___lwmod@counter:	
   933                           ; 1 bytes @ 0x5
   934                           
   935                           
   936                           ; 1 bytes @ 0x5
   937  0075                     	ds	1
   938  0076                     ??_SendDataFrame:	
   939                           
   940                           ; 1 bytes @ 0x6
   941  0076                     	ds	1
   942  0077                     ??_main:	
   943                           
   944                           ; 1 bytes @ 0x7
   945  0077                     	ds	1
   946  0078                     main@ChannelCount:	
   947                           
   948                           ; 1 bytes @ 0x8
   949  0078                     	ds	1
   950                           
   951                           	psect	cstackBANK0
   952  0040                     __pcstackBANK0:	
   953  0040                     SendDataFrame@Checksum:	
   954                           
   955                           ; 1 bytes @ 0x0
   956  0040                     	ds	1
   957  0041                     SendDataFrame@i:	
   958                           
   959                           ; 2 bytes @ 0x1
   960  0041                     	ds	2
   961  0043                     SendDataFrame@i_316:	
   962                           
   963                           ; 2 bytes @ 0x3
   964  0043                     	ds	2
   965  0045                     SendDataFrame@i_317:	
   966                           
   967                           ; 2 bytes @ 0x5
   968  0045                     	ds	2
   969  0047                     SendDataFrame@i_318:	
   970                           
   971                           ; 2 bytes @ 0x7
   972  0047                     	ds	2
   973  0049                     SendDataFrame@i_319:	
   974                           
   975                           ; 2 bytes @ 0x9
   976  0049                     	ds	2
   977  004B                     SendDataFrame@i_320:	
   978                           
   979                           ; 2 bytes @ 0xB
   980  004B                     	ds	2
   981  004D                     SendDataFrame@i_321:	
   982                           
   983                           ; 2 bytes @ 0xD
   984  004D                     	ds	2
   985  004F                     SendDataFrame@i_322:	
   986                           
   987                           ; 2 bytes @ 0xF
   988  004F                     	ds	2
   989  0051                     SendDataFrame@FrameSum:	
   990                           
   991                           ; 2 bytes @ 0x11
   992  0051                     	ds	2
   993                           
   994                           	psect	maintext
   995  051D                     __pmaintext:	
   996 ;;
   997 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   998 ;;
   999 ;; *************** function _main *****************
  1000 ;; Defined at:
  1001 ;;		line 272 in file "main.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;		None
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;  ChannelCount    1    8[COMMON] unsigned char 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : B1F/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMMON   BANK0   BANK1
  1015 ;;      Params:         0       0       0
  1016 ;;      Locals:         1       0       0
  1017 ;;      Temps:          1       0       0
  1018 ;;      Totals:         2       0       0
  1019 ;;Total ram usage:        2 bytes
  1020 ;; Hardware stack levels required when called:    2
  1021 ;; This function calls:
  1022 ;;		_EUSART_Read
  1023 ;;		_GetData
  1024 ;;		_SYSTEM_Initialize
  1025 ;;		_SendDataFrame
  1026 ;;		_SetChannel
  1027 ;; This function is called by:
  1028 ;;		Startup code after reset
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           
  1033                           ;psect for function _main
  1034  051D                     _main:	
  1035                           
  1036                           ;main.c: 275: SYSTEM_Initialize();
  1037                           
  1038                           ;incstack = 0
  1039                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1040  051D  2415               	fcall	_SYSTEM_Initialize
  1041                           
  1042                           ;main.c: 276: SetChannel(0);
  1043  051E  3000               	movlw	0
  1044  051F  00F0               	movwf	SetChannel@ChannelNumber
  1045  0520  00F1               	movwf	SetChannel@ChannelNumber+1
  1046  0521  2590               	fcall	_SetChannel
  1047                           
  1048                           ;main.c: 278: do { LATBbits.LATB4 = 1; } while(0);
  1049  0522  0022               	movlb	2	; select bank2
  1050  0523  160D               	bsf	13,4	;volatile
  1051  0524                     l384:	
  1052                           ;main.c: 302: {
  1053                           
  1054                           ;main.c: 296: {
  1055                           ;main.c: 301: while(!PIR1bits.RCIF)
  1056                           
  1057                           ;main.c: 295: while (1)
  1058                           
  1059  0524  0020               	movlb	0	; select bank0
  1060  0525  1E91               	btfss	17,5	;volatile
  1061  0526  2D24               	goto	l384
  1062                           
  1063                           ;main.c: 303: }
  1064                           ;main.c: 306: ReceivedByte = EUSART_Read();
  1065  0527  2432               	fcall	_EUSART_Read
  1066  0528  00F7               	movwf	??_main
  1067  0529  0877               	movf	??_main,w
  1068  052A  00FA               	movwf	_ReceivedByte
  1069                           
  1070                           ;main.c: 308: if((ReceivedByte == '#') && ReceiveCount == 0) ReceiveCount++;
  1071  052B  3023               	movlw	35
  1072  052C  067A               	xorwf	_ReceivedByte,w
  1073  052D  1903               	btfsc	3,2
  1074  052E  0879               	movf	_ReceiveCount,w
  1075  052F  1903               	btfsc	3,2
  1076  0530  2D6F               	goto	l1620
  1077                           
  1078                           ;main.c: 309: else if((ReceivedByte == 'g') && ReceiveCount == 1) ReceiveCount++;
  1079  0531  3067               	movlw	103
  1080  0532  067A               	xorwf	_ReceivedByte,w
  1081  0533  1903               	btfsc	3,2
  1082  0534  0379               	decf	_ReceiveCount,w
  1083  0535  1903               	btfsc	3,2
  1084  0536  2D6F               	goto	l1620
  1085                           
  1086                           ;main.c: 310: else if((ReceivedByte == 'e') && ReceiveCount == 2) ReceiveCount++;
  1087  0537  3065               	movlw	101
  1088  0538  067A               	xorwf	_ReceivedByte,w
  1089  0539  1D03               	btfss	3,2
  1090  053A  2D3F               	goto	l1586
  1091  053B  3002               	movlw	2
  1092  053C  0679               	xorwf	_ReceiveCount,w
  1093  053D  1903               	btfsc	3,2
  1094  053E  2D6F               	goto	l1620
  1095  053F                     l1586:	
  1096                           
  1097                           ;main.c: 311: else if((ReceivedByte == 't') && ReceiveCount == 3) ReceiveCount++;
  1098  053F  3074               	movlw	116
  1099  0540  067A               	xorwf	_ReceivedByte,w
  1100  0541  1D03               	btfss	3,2
  1101  0542  2D47               	goto	l1592
  1102  0543  3003               	movlw	3
  1103  0544  0679               	xorwf	_ReceiveCount,w
  1104  0545  1903               	btfsc	3,2
  1105  0546  2D6F               	goto	l1620
  1106  0547                     l1592:	
  1107                           
  1108                           ;main.c: 312: else if((ReceivedByte == '_') && ReceiveCount == 4) ReceiveCount++;
  1109  0547  305F               	movlw	95
  1110  0548  067A               	xorwf	_ReceivedByte,w
  1111  0549  1D03               	btfss	3,2
  1112  054A  2D4F               	goto	l1598
  1113  054B  3004               	movlw	4
  1114  054C  0679               	xorwf	_ReceiveCount,w
  1115  054D  1903               	btfsc	3,2
  1116  054E  2D6F               	goto	l1620
  1117  054F                     l1598:	
  1118                           
  1119                           ;main.c: 313: else if((ReceivedByte == 'd') && ReceiveCount == 5) ReceiveCount++;
  1120  054F  3064               	movlw	100
  1121  0550  067A               	xorwf	_ReceivedByte,w
  1122  0551  1D03               	btfss	3,2
  1123  0552  2D57               	goto	l1604
  1124  0553  3005               	movlw	5
  1125  0554  0679               	xorwf	_ReceiveCount,w
  1126  0555  1903               	btfsc	3,2
  1127  0556  2D6F               	goto	l1620
  1128  0557                     l1604:	
  1129                           
  1130                           ;main.c: 314: else if((ReceivedByte == 'a') && ReceiveCount == 6) ReceiveCount++;
  1131  0557  3061               	movlw	97
  1132  0558  067A               	xorwf	_ReceivedByte,w
  1133  0559  1D03               	btfss	3,2
  1134  055A  2D5F               	goto	l1610
  1135  055B  3006               	movlw	6
  1136  055C  0679               	xorwf	_ReceiveCount,w
  1137  055D  1903               	btfsc	3,2
  1138  055E  2D6F               	goto	l1620
  1139  055F                     l1610:	
  1140                           
  1141                           ;main.c: 315: else if((ReceivedByte == 't') && ReceiveCount == 7) ReceiveCount++;
  1142  055F  3074               	movlw	116
  1143  0560  067A               	xorwf	_ReceivedByte,w
  1144  0561  1D03               	btfss	3,2
  1145  0562  2D67               	goto	l1616
  1146  0563  3007               	movlw	7
  1147  0564  0679               	xorwf	_ReceiveCount,w
  1148  0565  1903               	btfsc	3,2
  1149  0566  2D6F               	goto	l1620
  1150  0567                     l1616:	
  1151                           
  1152                           ;main.c: 316: else if((ReceivedByte == 'a') && ReceiveCount == 8) ReceiveCount++;
  1153  0567  3061               	movlw	97
  1154  0568  067A               	xorwf	_ReceivedByte,w
  1155  0569  1D03               	btfss	3,2
  1156  056A  2D74               	goto	l1622
  1157  056B  3008               	movlw	8
  1158  056C  0679               	xorwf	_ReceiveCount,w
  1159  056D  1D03               	btfss	3,2
  1160  056E  2D74               	goto	l1622
  1161  056F                     l1620:	
  1162  056F  3001               	movlw	1
  1163  0570  00F7               	movwf	??_main
  1164  0571  0877               	movf	??_main,w
  1165  0572  07F9               	addwf	_ReceiveCount,f
  1166  0573  2D75               	goto	l1624
  1167  0574                     l1622:	
  1168                           
  1169                           ;main.c: 317: else ReceiveCount = 0;
  1170  0574  01F9               	clrf	_ReceiveCount
  1171  0575                     l1624:	
  1172                           
  1173                           ;main.c: 320: if(ReceiveCount >= 9)
  1174  0575  3009               	movlw	9
  1175  0576  0279               	subwf	_ReceiveCount,w
  1176  0577  1C03               	skipc
  1177  0578  2D24               	goto	l384
  1178                           
  1179                           ;main.c: 321: {
  1180                           ;main.c: 322: do { LATBbits.LATB3 = 1; } while(0);
  1181  0579  0022               	movlb	2	; select bank2
  1182  057A  158D               	bsf	13,3	;volatile
  1183                           
  1184                           ;main.c: 323: for(uint8_t ChannelCount = 1; ChannelCount <=8; ChannelCount++)
  1185  057B  01F8               	clrf	main@ChannelCount
  1186  057C  0AF8               	incf	main@ChannelCount,f
  1187  057D  3009               	movlw	9
  1188  057E  0278               	subwf	main@ChannelCount,w
  1189  057F  1803               	btfsc	3,0
  1190  0580  2D8B               	goto	l1636
  1191  0581                     l1630:	
  1192                           
  1193                           ;main.c: 324: {
  1194                           ;main.c: 325: GetData(ChannelCount);
  1195  0581  0878               	movf	main@ChannelCount,w
  1196  0582  24AE               	fcall	_GetData
  1197  0583  3001               	movlw	1
  1198  0584  00F7               	movwf	??_main
  1199  0585  0877               	movf	??_main,w
  1200  0586  07F8               	addwf	main@ChannelCount,f
  1201  0587  3009               	movlw	9
  1202  0588  0278               	subwf	main@ChannelCount,w
  1203  0589  1C03               	skipc
  1204  058A  2D81               	goto	l1630
  1205  058B                     l1636:	
  1206                           
  1207                           ;main.c: 326: }
  1208                           ;main.c: 328: SendDataFrame();
  1209  058B  2605               	fcall	_SendDataFrame
  1210                           
  1211                           ;main.c: 329: ReceiveCount = 0;
  1212  058C  01F9               	clrf	_ReceiveCount
  1213                           
  1214                           ;main.c: 330: do { LATBbits.LATB3 = 0; } while(0);
  1215  058D  0022               	movlb	2	; select bank2
  1216  058E  118D               	bcf	13,3	;volatile
  1217  058F  2D24               	goto	l384
  1218  0590                     __end_of_main:	
  1219                           
  1220                           	psect	text1
  1221  0605                     __ptext1:	
  1222 ;; *************** function _SendDataFrame *****************
  1223 ;; Defined at:
  1224 ;;		line 74 in file "main.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;		None
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;  i               2   15[BANK0 ] int 
  1229 ;;  i               2   13[BANK0 ] int 
  1230 ;;  i               2   11[BANK0 ] int 
  1231 ;;  i               2    9[BANK0 ] int 
  1232 ;;  i               2    7[BANK0 ] int 
  1233 ;;  i               2    5[BANK0 ] int 
  1234 ;;  i               2    3[BANK0 ] int 
  1235 ;;  i               2    1[BANK0 ] int 
  1236 ;;  FrameSum        2   17[BANK0 ] unsigned int 
  1237 ;;  Checksum        1    0[BANK0 ] unsigned char 
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  1    wreg      void 
  1240 ;; Registers used:
  1241 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMMON   BANK0   BANK1
  1247 ;;      Params:         0       0       0
  1248 ;;      Locals:         0      19       0
  1249 ;;      Temps:          1       0       0
  1250 ;;      Totals:         1      19       0
  1251 ;;Total ram usage:       20 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:    1
  1254 ;; This function calls:
  1255 ;;		_EUSART_Write
  1256 ;;		___lwmod
  1257 ;; This function is called by:
  1258 ;;		_main
  1259 ;; This function uses a non-reentrant model
  1260 ;;
  1261                           
  1262                           
  1263                           ;psect for function _SendDataFrame
  1264  0605                     _SendDataFrame:	
  1265                           
  1266                           ;main.c: 76: uint16_t FrameSum = 0;
  1267                           
  1268                           ;incstack = 0
  1269                           ; Regs used in _SendDataFrame: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1270  0605  0020               	movlb	0	; select bank0
  1271  0606  01D1               	clrf	SendDataFrame@FrameSum
  1272  0607  01D2               	clrf	SendDataFrame@FrameSum+1
  1273                           
  1274                           ;main.c: 77: uint8_t Checksum = 0;
  1275  0608  01C0               	clrf	SendDataFrame@Checksum
  1276                           
  1277                           ;main.c: 80: EUSART_Write('#'); FrameSum = FrameSum + '#';
  1278  0609  3023               	movlw	35
  1279  060A  2421               	fcall	_EUSART_Write
  1280  060B  0020               	movlb	0	; select bank0
  1281  060C  0851               	movf	SendDataFrame@FrameSum,w
  1282  060D  3E23               	addlw	35
  1283  060E  00D1               	movwf	SendDataFrame@FrameSum
  1284  060F  3000               	movlw	0
  1285  0610  3D52               	addwfc	SendDataFrame@FrameSum+1,w
  1286  0611  00D2               	movwf	SendDataFrame@FrameSum+1
  1287                           
  1288                           ;main.c: 81: EUSART_Write('|'); FrameSum = FrameSum + '|';
  1289  0612  307C               	movlw	124
  1290  0613  2421               	fcall	_EUSART_Write
  1291  0614  0020               	movlb	0	; select bank0
  1292  0615  0851               	movf	SendDataFrame@FrameSum,w
  1293  0616  3E7C               	addlw	124
  1294  0617  00D1               	movwf	SendDataFrame@FrameSum
  1295  0618  3000               	movlw	0
  1296  0619  3D52               	addwfc	SendDataFrame@FrameSum+1,w
  1297  061A  00D2               	movwf	SendDataFrame@FrameSum+1
  1298                           
  1299                           ;main.c: 82: for(int i=0; i<4; i++)
  1300  061B  01C1               	clrf	SendDataFrame@i
  1301  061C  01C2               	clrf	SendDataFrame@i+1
  1302  061D  0842               	movf	SendDataFrame@i+1,w
  1303  061E  3A80               	xorlw	128
  1304  061F  00F6               	movwf	??_SendDataFrame
  1305  0620  3080               	movlw	128
  1306  0621  0276               	subwf	??_SendDataFrame,w
  1307  0622  1D03               	skipz
  1308  0623  2E26               	goto	u735
  1309  0624  3004               	movlw	4
  1310  0625  0241               	subwf	SendDataFrame@i,w
  1311  0626                     u735:	
  1312  0626  1803               	btfsc	3,0
  1313  0627  2E4A               	goto	l1334
  1314  0628                     l1326:	
  1315                           
  1316                           ;main.c: 83: {
  1317                           ;main.c: 84: EUSART_Write(CH_1_RAW[i]); FrameSum = FrameSum + CH_1_RAW[i];
  1318  0628  0020               	movlb	0	; select bank0
  1319  0629  0841               	movf	SendDataFrame@i,w
  1320  062A  3E20               	addlw	(low (_CH_1_RAW| 0))& (0+255)
  1321  062B  0086               	movwf	6
  1322  062C  0187               	clrf	7
  1323  062D  0801               	movf	1,w
  1324  062E  2421               	fcall	_EUSART_Write
  1325  062F  0020               	movlb	0	; select bank0
  1326  0630  0841               	movf	SendDataFrame@i,w
  1327  0631  3E20               	addlw	(low (_CH_1_RAW| 0))& (0+255)
  1328  0632  0086               	movwf	6
  1329  0633  0187               	clrf	7
  1330  0634  0801               	movf	1,w
  1331  0635  0751               	addwf	SendDataFrame@FrameSum,w
  1332  0636  00D1               	movwf	SendDataFrame@FrameSum
  1333  0637  0852               	movf	SendDataFrame@FrameSum+1,w
  1334  0638  1803               	skipnc
  1335  0639  0A52               	incf	SendDataFrame@FrameSum+1,w
  1336  063A  00D2               	movwf	SendDataFrame@FrameSum+1
  1337  063B  3001               	movlw	1
  1338  063C  07C1               	addwf	SendDataFrame@i,f
  1339  063D  3000               	movlw	0
  1340  063E  3DC2               	addwfc	SendDataFrame@i+1,f
  1341  063F  0842               	movf	SendDataFrame@i+1,w
  1342  0640  3A80               	xorlw	128
  1343  0641  00F6               	movwf	??_SendDataFrame
  1344  0642  3080               	movlw	128
  1345  0643  0276               	subwf	??_SendDataFrame,w
  1346  0644  1D03               	skipz
  1347  0645  2E48               	goto	u745
  1348  0646  3004               	movlw	4
  1349  0647  0241               	subwf	SendDataFrame@i,w
  1350  0648                     u745:	
  1351  0648  1C03               	skipc
  1352  0649  2E28               	goto	l1326
  1353  064A                     l1334:	
  1354                           
  1355                           ;main.c: 85: }
  1356                           ;main.c: 86: EUSART_Write('|'); FrameSum = FrameSum + '|';
  1357  064A  307C               	movlw	124
  1358  064B  2421               	fcall	_EUSART_Write
  1359  064C  0020               	movlb	0	; select bank0
  1360  064D  0851               	movf	SendDataFrame@FrameSum,w
  1361  064E  3E7C               	addlw	124
  1362  064F  00D1               	movwf	SendDataFrame@FrameSum
  1363  0650  3000               	movlw	0
  1364  0651  3D52               	addwfc	SendDataFrame@FrameSum+1,w
  1365  0652  00D2               	movwf	SendDataFrame@FrameSum+1
  1366                           
  1367                           ;main.c: 88: for(int i=0; i<4; i++)
  1368  0653  01C3               	clrf	SendDataFrame@i_316
  1369  0654  01C4               	clrf	SendDataFrame@i_316+1
  1370  0655  0844               	movf	SendDataFrame@i_316+1,w
  1371  0656  3A80               	xorlw	128
  1372  0657  00F6               	movwf	??_SendDataFrame
  1373  0658  3080               	movlw	128
  1374  0659  0276               	subwf	??_SendDataFrame,w
  1375  065A  1D03               	skipz
  1376  065B  2E5E               	goto	u755
  1377  065C  3004               	movlw	4
  1378  065D  0243               	subwf	SendDataFrame@i_316,w
  1379  065E                     u755:	
  1380  065E  1803               	btfsc	3,0
  1381  065F  2E82               	goto	l1352
  1382  0660                     l1344:	
  1383                           
  1384                           ;main.c: 89: {
  1385                           ;main.c: 90: EUSART_Write(CH_2_RAW[i]); FrameSum = FrameSum + CH_2_RAW[i];
  1386  0660  0020               	movlb	0	; select bank0
  1387  0661  0843               	movf	SendDataFrame@i_316,w
  1388  0662  3E24               	addlw	(low (_CH_2_RAW| 0))& (0+255)
  1389  0663  0086               	movwf	6
  1390  0664  0187               	clrf	7
  1391  0665  0801               	movf	1,w
  1392  0666  2421               	fcall	_EUSART_Write
  1393  0667  0020               	movlb	0	; select bank0
  1394  0668  0843               	movf	SendDataFrame@i_316,w
  1395  0669  3E24               	addlw	(low (_CH_2_RAW| 0))& (0+255)
  1396  066A  0086               	movwf	6
  1397  066B  0187               	clrf	7
  1398  066C  0801               	movf	1,w
  1399  066D  0751               	addwf	SendDataFrame@FrameSum,w
  1400  066E  00D1               	movwf	SendDataFrame@FrameSum
  1401  066F  0852               	movf	SendDataFrame@FrameSum+1,w
  1402  0670  1803               	skipnc
  1403  0671  0A52               	incf	SendDataFrame@FrameSum+1,w
  1404  0672  00D2               	movwf	SendDataFrame@FrameSum+1
  1405  0673  3001               	movlw	1
  1406  0674  07C3               	addwf	SendDataFrame@i_316,f
  1407  0675  3000               	movlw	0
  1408  0676  3DC4               	addwfc	SendDataFrame@i_316+1,f
  1409  0677  0844               	movf	SendDataFrame@i_316+1,w
  1410  0678  3A80               	xorlw	128
  1411  0679  00F6               	movwf	??_SendDataFrame
  1412  067A  3080               	movlw	128
  1413  067B  0276               	subwf	??_SendDataFrame,w
  1414  067C  1D03               	skipz
  1415  067D  2E80               	goto	u765
  1416  067E  3004               	movlw	4
  1417  067F  0243               	subwf	SendDataFrame@i_316,w
  1418  0680                     u765:	
  1419  0680  1C03               	skipc
  1420  0681  2E60               	goto	l1344
  1421  0682                     l1352:	
  1422                           
  1423                           ;main.c: 91: }
  1424                           ;main.c: 92: EUSART_Write('|'); FrameSum = FrameSum + '|';
  1425  0682  307C               	movlw	124
  1426  0683  2421               	fcall	_EUSART_Write
  1427  0684  0020               	movlb	0	; select bank0
  1428  0685  0851               	movf	SendDataFrame@FrameSum,w
  1429  0686  3E7C               	addlw	124
  1430  0687  00D1               	movwf	SendDataFrame@FrameSum
  1431  0688  3000               	movlw	0
  1432  0689  3D52               	addwfc	SendDataFrame@FrameSum+1,w
  1433  068A  00D2               	movwf	SendDataFrame@FrameSum+1
  1434                           
  1435                           ;main.c: 93: for(int i=0; i<4; i++)
  1436  068B  01C5               	clrf	SendDataFrame@i_317
  1437  068C  01C6               	clrf	SendDataFrame@i_317+1
  1438  068D  0846               	movf	SendDataFrame@i_317+1,w
  1439  068E  3A80               	xorlw	128
  1440  068F  00F6               	movwf	??_SendDataFrame
  1441  0690  3080               	movlw	128
  1442  0691  0276               	subwf	??_SendDataFrame,w
  1443  0692  1D03               	skipz
  1444  0693  2E96               	goto	u775
  1445  0694  3004               	movlw	4
  1446  0695  0245               	subwf	SendDataFrame@i_317,w
  1447  0696                     u775:	
  1448  0696  1803               	btfsc	3,0
  1449  0697  2EBA               	goto	l1370
  1450  0698                     l1362:	
  1451                           
  1452                           ;main.c: 94: {
  1453                           ;main.c: 95: EUSART_Write(CH_3_RAW[i]); FrameSum = FrameSum + CH_3_RAW[i];
  1454  0698  0020               	movlb	0	; select bank0
  1455  0699  0845               	movf	SendDataFrame@i_317,w
  1456  069A  3E28               	addlw	(low (_CH_3_RAW| 0))& (0+255)
  1457  069B  0086               	movwf	6
  1458  069C  0187               	clrf	7
  1459  069D  0801               	movf	1,w
  1460  069E  2421               	fcall	_EUSART_Write
  1461  069F  0020               	movlb	0	; select bank0
  1462  06A0  0845               	movf	SendDataFrame@i_317,w
  1463  06A1  3E28               	addlw	(low (_CH_3_RAW| 0))& (0+255)
  1464  06A2  0086               	movwf	6
  1465  06A3  0187               	clrf	7
  1466  06A4  0801               	movf	1,w
  1467  06A5  0751               	addwf	SendDataFrame@FrameSum,w
  1468  06A6  00D1               	movwf	SendDataFrame@FrameSum
  1469  06A7  0852               	movf	SendDataFrame@FrameSum+1,w
  1470  06A8  1803               	skipnc
  1471  06A9  0A52               	incf	SendDataFrame@FrameSum+1,w
  1472  06AA  00D2               	movwf	SendDataFrame@FrameSum+1
  1473  06AB  3001               	movlw	1
  1474  06AC  07C5               	addwf	SendDataFrame@i_317,f
  1475  06AD  3000               	movlw	0
  1476  06AE  3DC6               	addwfc	SendDataFrame@i_317+1,f
  1477  06AF  0846               	movf	SendDataFrame@i_317+1,w
  1478  06B0  3A80               	xorlw	128
  1479  06B1  00F6               	movwf	??_SendDataFrame
  1480  06B2  3080               	movlw	128
  1481  06B3  0276               	subwf	??_SendDataFrame,w
  1482  06B4  1D03               	skipz
  1483  06B5  2EB8               	goto	u785
  1484  06B6  3004               	movlw	4
  1485  06B7  0245               	subwf	SendDataFrame@i_317,w
  1486  06B8                     u785:	
  1487  06B8  1C03               	skipc
  1488  06B9  2E98               	goto	l1362
  1489  06BA                     l1370:	
  1490                           
  1491                           ;main.c: 96: }
  1492                           ;main.c: 97: EUSART_Write('|'); FrameSum = FrameSum + '|';
  1493  06BA  307C               	movlw	124
  1494  06BB  2421               	fcall	_EUSART_Write
  1495  06BC  0020               	movlb	0	; select bank0
  1496  06BD  0851               	movf	SendDataFrame@FrameSum,w
  1497  06BE  3E7C               	addlw	124
  1498  06BF  00D1               	movwf	SendDataFrame@FrameSum
  1499  06C0  3000               	movlw	0
  1500  06C1  3D52               	addwfc	SendDataFrame@FrameSum+1,w
  1501  06C2  00D2               	movwf	SendDataFrame@FrameSum+1
  1502                           
  1503                           ;main.c: 99: for(int i=0; i<4; i++)
  1504  06C3  01C7               	clrf	SendDataFrame@i_318
  1505  06C4  01C8               	clrf	SendDataFrame@i_318+1
  1506  06C5  0848               	movf	SendDataFrame@i_318+1,w
  1507  06C6  3A80               	xorlw	128
  1508  06C7  00F6               	movwf	??_SendDataFrame
  1509  06C8  3080               	movlw	128
  1510  06C9  0276               	subwf	??_SendDataFrame,w
  1511  06CA  1D03               	skipz
  1512  06CB  2ECE               	goto	u795
  1513  06CC  3004               	movlw	4
  1514  06CD  0247               	subwf	SendDataFrame@i_318,w
  1515  06CE                     u795:	
  1516  06CE  1803               	btfsc	3,0
  1517  06CF  2EF2               	goto	l1388
  1518  06D0                     l1380:	
  1519                           
  1520                           ;main.c: 100: {
  1521                           ;main.c: 101: EUSART_Write(CH_4_RAW[i]); FrameSum = FrameSum + CH_4_RAW[i];
  1522  06D0  0020               	movlb	0	; select bank0
  1523  06D1  0847               	movf	SendDataFrame@i_318,w
  1524  06D2  3E2C               	addlw	(low (_CH_4_RAW| 0))& (0+255)
  1525  06D3  0086               	movwf	6
  1526  06D4  0187               	clrf	7
  1527  06D5  0801               	movf	1,w
  1528  06D6  2421               	fcall	_EUSART_Write
  1529  06D7  0020               	movlb	0	; select bank0
  1530  06D8  0847               	movf	SendDataFrame@i_318,w
  1531  06D9  3E2C               	addlw	(low (_CH_4_RAW| 0))& (0+255)
  1532  06DA  0086               	movwf	6
  1533  06DB  0187               	clrf	7
  1534  06DC  0801               	movf	1,w
  1535  06DD  0751               	addwf	SendDataFrame@FrameSum,w
  1536  06DE  00D1               	movwf	SendDataFrame@FrameSum
  1537  06DF  0852               	movf	SendDataFrame@FrameSum+1,w
  1538  06E0  1803               	skipnc
  1539  06E1  0A52               	incf	SendDataFrame@FrameSum+1,w
  1540  06E2  00D2               	movwf	SendDataFrame@FrameSum+1
  1541  06E3  3001               	movlw	1
  1542  06E4  07C7               	addwf	SendDataFrame@i_318,f
  1543  06E5  3000               	movlw	0
  1544  06E6  3DC8               	addwfc	SendDataFrame@i_318+1,f
  1545  06E7  0848               	movf	SendDataFrame@i_318+1,w
  1546  06E8  3A80               	xorlw	128
  1547  06E9  00F6               	movwf	??_SendDataFrame
  1548  06EA  3080               	movlw	128
  1549  06EB  0276               	subwf	??_SendDataFrame,w
  1550  06EC  1D03               	skipz
  1551  06ED  2EF0               	goto	u805
  1552  06EE  3004               	movlw	4
  1553  06EF  0247               	subwf	SendDataFrame@i_318,w
  1554  06F0                     u805:	
  1555  06F0  1C03               	skipc
  1556  06F1  2ED0               	goto	l1380
  1557  06F2                     l1388:	
  1558                           
  1559                           ;main.c: 102: }
  1560                           ;main.c: 103: EUSART_Write('|'); FrameSum = FrameSum + '|';
  1561  06F2  307C               	movlw	124
  1562  06F3  2421               	fcall	_EUSART_Write
  1563  06F4  0020               	movlb	0	; select bank0
  1564  06F5  0851               	movf	SendDataFrame@FrameSum,w
  1565  06F6  3E7C               	addlw	124
  1566  06F7  00D1               	movwf	SendDataFrame@FrameSum
  1567  06F8  3000               	movlw	0
  1568  06F9  3D52               	addwfc	SendDataFrame@FrameSum+1,w
  1569  06FA  00D2               	movwf	SendDataFrame@FrameSum+1
  1570                           
  1571                           ;main.c: 104: for(int i=0; i<4; i++)
  1572  06FB  01C9               	clrf	SendDataFrame@i_319
  1573  06FC  01CA               	clrf	SendDataFrame@i_319+1
  1574  06FD  084A               	movf	SendDataFrame@i_319+1,w
  1575  06FE  3A80               	xorlw	128
  1576  06FF  00F6               	movwf	??_SendDataFrame
  1577  0700  3080               	movlw	128
  1578  0701  0276               	subwf	??_SendDataFrame,w
  1579  0702  1D03               	skipz
  1580  0703  2F06               	goto	u815
  1581  0704  3004               	movlw	4
  1582  0705  0249               	subwf	SendDataFrame@i_319,w
  1583  0706                     u815:	
  1584  0706  1803               	btfsc	3,0
  1585  0707  2F2A               	goto	l1406
  1586  0708                     l1398:	
  1587                           
  1588                           ;main.c: 105: {
  1589                           ;main.c: 106: EUSART_Write(CH_5_RAW[i]); FrameSum = FrameSum + CH_5_RAW[i];
  1590  0708  0020               	movlb	0	; select bank0
  1591  0709  0849               	movf	SendDataFrame@i_319,w
  1592  070A  3E30               	addlw	(low (_CH_5_RAW| 0))& (0+255)
  1593  070B  0086               	movwf	6
  1594  070C  0187               	clrf	7
  1595  070D  0801               	movf	1,w
  1596  070E  2421               	fcall	_EUSART_Write
  1597  070F  0020               	movlb	0	; select bank0
  1598  0710  0849               	movf	SendDataFrame@i_319,w
  1599  0711  3E30               	addlw	(low (_CH_5_RAW| 0))& (0+255)
  1600  0712  0086               	movwf	6
  1601  0713  0187               	clrf	7
  1602  0714  0801               	movf	1,w
  1603  0715  0751               	addwf	SendDataFrame@FrameSum,w
  1604  0716  00D1               	movwf	SendDataFrame@FrameSum
  1605  0717  0852               	movf	SendDataFrame@FrameSum+1,w
  1606  0718  1803               	skipnc
  1607  0719  0A52               	incf	SendDataFrame@FrameSum+1,w
  1608  071A  00D2               	movwf	SendDataFrame@FrameSum+1
  1609  071B  3001               	movlw	1
  1610  071C  07C9               	addwf	SendDataFrame@i_319,f
  1611  071D  3000               	movlw	0
  1612  071E  3DCA               	addwfc	SendDataFrame@i_319+1,f
  1613  071F  084A               	movf	SendDataFrame@i_319+1,w
  1614  0720  3A80               	xorlw	128
  1615  0721  00F6               	movwf	??_SendDataFrame
  1616  0722  3080               	movlw	128
  1617  0723  0276               	subwf	??_SendDataFrame,w
  1618  0724  1D03               	skipz
  1619  0725  2F28               	goto	u825
  1620  0726  3004               	movlw	4
  1621  0727  0249               	subwf	SendDataFrame@i_319,w
  1622  0728                     u825:	
  1623  0728  1C03               	skipc
  1624  0729  2F08               	goto	l1398
  1625  072A                     l1406:	
  1626                           
  1627                           ;main.c: 107: }
  1628                           ;main.c: 108: EUSART_Write('|'); FrameSum = FrameSum + '|';
  1629  072A  307C               	movlw	124
  1630  072B  2421               	fcall	_EUSART_Write
  1631  072C  0020               	movlb	0	; select bank0
  1632  072D  0851               	movf	SendDataFrame@FrameSum,w
  1633  072E  3E7C               	addlw	124
  1634  072F  00D1               	movwf	SendDataFrame@FrameSum
  1635  0730  3000               	movlw	0
  1636  0731  3D52               	addwfc	SendDataFrame@FrameSum+1,w
  1637  0732  00D2               	movwf	SendDataFrame@FrameSum+1
  1638                           
  1639                           ;main.c: 110: for(int i=0; i<4; i++)
  1640  0733  01CB               	clrf	SendDataFrame@i_320
  1641  0734  01CC               	clrf	SendDataFrame@i_320+1
  1642  0735  084C               	movf	SendDataFrame@i_320+1,w
  1643  0736  3A80               	xorlw	128
  1644  0737  00F6               	movwf	??_SendDataFrame
  1645  0738  3080               	movlw	128
  1646  0739  0276               	subwf	??_SendDataFrame,w
  1647  073A  1D03               	skipz
  1648  073B  2F3E               	goto	u835
  1649  073C  3004               	movlw	4
  1650  073D  024B               	subwf	SendDataFrame@i_320,w
  1651  073E                     u835:	
  1652  073E  1803               	btfsc	3,0
  1653  073F  2F62               	goto	l1424
  1654  0740                     l1416:	
  1655                           
  1656                           ;main.c: 111: {
  1657                           ;main.c: 112: EUSART_Write(CH_6_RAW[i]); FrameSum = FrameSum + CH_6_RAW[i];
  1658  0740  0020               	movlb	0	; select bank0
  1659  0741  084B               	movf	SendDataFrame@i_320,w
  1660  0742  3E34               	addlw	(low (_CH_6_RAW| 0))& (0+255)
  1661  0743  0086               	movwf	6
  1662  0744  0187               	clrf	7
  1663  0745  0801               	movf	1,w
  1664  0746  2421               	fcall	_EUSART_Write
  1665  0747  0020               	movlb	0	; select bank0
  1666  0748  084B               	movf	SendDataFrame@i_320,w
  1667  0749  3E34               	addlw	(low (_CH_6_RAW| 0))& (0+255)
  1668  074A  0086               	movwf	6
  1669  074B  0187               	clrf	7
  1670  074C  0801               	movf	1,w
  1671  074D  0751               	addwf	SendDataFrame@FrameSum,w
  1672  074E  00D1               	movwf	SendDataFrame@FrameSum
  1673  074F  0852               	movf	SendDataFrame@FrameSum+1,w
  1674  0750  1803               	skipnc
  1675  0751  0A52               	incf	SendDataFrame@FrameSum+1,w
  1676  0752  00D2               	movwf	SendDataFrame@FrameSum+1
  1677  0753  3001               	movlw	1
  1678  0754  07CB               	addwf	SendDataFrame@i_320,f
  1679  0755  3000               	movlw	0
  1680  0756  3DCC               	addwfc	SendDataFrame@i_320+1,f
  1681  0757  084C               	movf	SendDataFrame@i_320+1,w
  1682  0758  3A80               	xorlw	128
  1683  0759  00F6               	movwf	??_SendDataFrame
  1684  075A  3080               	movlw	128
  1685  075B  0276               	subwf	??_SendDataFrame,w
  1686  075C  1D03               	skipz
  1687  075D  2F60               	goto	u845
  1688  075E  3004               	movlw	4
  1689  075F  024B               	subwf	SendDataFrame@i_320,w
  1690  0760                     u845:	
  1691  0760  1C03               	skipc
  1692  0761  2F40               	goto	l1416
  1693  0762                     l1424:	
  1694                           
  1695                           ;main.c: 113: }
  1696                           ;main.c: 114: EUSART_Write('|'); FrameSum = FrameSum + '|';
  1697  0762  307C               	movlw	124
  1698  0763  2421               	fcall	_EUSART_Write
  1699  0764  0020               	movlb	0	; select bank0
  1700  0765  0851               	movf	SendDataFrame@FrameSum,w
  1701  0766  3E7C               	addlw	124
  1702  0767  00D1               	movwf	SendDataFrame@FrameSum
  1703  0768  3000               	movlw	0
  1704  0769  3D52               	addwfc	SendDataFrame@FrameSum+1,w
  1705  076A  00D2               	movwf	SendDataFrame@FrameSum+1
  1706                           
  1707                           ;main.c: 115: for(int i=0; i<4; i++)
  1708  076B  01CD               	clrf	SendDataFrame@i_321
  1709  076C  01CE               	clrf	SendDataFrame@i_321+1
  1710  076D  084E               	movf	SendDataFrame@i_321+1,w
  1711  076E  3A80               	xorlw	128
  1712  076F  00F6               	movwf	??_SendDataFrame
  1713  0770  3080               	movlw	128
  1714  0771  0276               	subwf	??_SendDataFrame,w
  1715  0772  1D03               	skipz
  1716  0773  2F76               	goto	u855
  1717  0774  3004               	movlw	4
  1718  0775  024D               	subwf	SendDataFrame@i_321,w
  1719  0776                     u855:	
  1720  0776  1803               	btfsc	3,0
  1721  0777  2F9A               	goto	l1442
  1722  0778                     l1434:	
  1723                           
  1724                           ;main.c: 116: {
  1725                           ;main.c: 117: EUSART_Write(CH_7_RAW[i]); FrameSum = FrameSum + CH_7_RAW[i];
  1726  0778  0020               	movlb	0	; select bank0
  1727  0779  084D               	movf	SendDataFrame@i_321,w
  1728  077A  3E38               	addlw	(low (_CH_7_RAW| 0))& (0+255)
  1729  077B  0086               	movwf	6
  1730  077C  0187               	clrf	7
  1731  077D  0801               	movf	1,w
  1732  077E  2421               	fcall	_EUSART_Write
  1733  077F  0020               	movlb	0	; select bank0
  1734  0780  084D               	movf	SendDataFrame@i_321,w
  1735  0781  3E38               	addlw	(low (_CH_7_RAW| 0))& (0+255)
  1736  0782  0086               	movwf	6
  1737  0783  0187               	clrf	7
  1738  0784  0801               	movf	1,w
  1739  0785  0751               	addwf	SendDataFrame@FrameSum,w
  1740  0786  00D1               	movwf	SendDataFrame@FrameSum
  1741  0787  0852               	movf	SendDataFrame@FrameSum+1,w
  1742  0788  1803               	skipnc
  1743  0789  0A52               	incf	SendDataFrame@FrameSum+1,w
  1744  078A  00D2               	movwf	SendDataFrame@FrameSum+1
  1745  078B  3001               	movlw	1
  1746  078C  07CD               	addwf	SendDataFrame@i_321,f
  1747  078D  3000               	movlw	0
  1748  078E  3DCE               	addwfc	SendDataFrame@i_321+1,f
  1749  078F  084E               	movf	SendDataFrame@i_321+1,w
  1750  0790  3A80               	xorlw	128
  1751  0791  00F6               	movwf	??_SendDataFrame
  1752  0792  3080               	movlw	128
  1753  0793  0276               	subwf	??_SendDataFrame,w
  1754  0794  1D03               	skipz
  1755  0795  2F98               	goto	u865
  1756  0796  3004               	movlw	4
  1757  0797  024D               	subwf	SendDataFrame@i_321,w
  1758  0798                     u865:	
  1759  0798  1C03               	skipc
  1760  0799  2F78               	goto	l1434
  1761  079A                     l1442:	
  1762                           
  1763                           ;main.c: 118: }
  1764                           ;main.c: 119: EUSART_Write('|'); FrameSum = FrameSum + '|';
  1765  079A  307C               	movlw	124
  1766  079B  2421               	fcall	_EUSART_Write
  1767  079C  0020               	movlb	0	; select bank0
  1768  079D  0851               	movf	SendDataFrame@FrameSum,w
  1769  079E  3E7C               	addlw	124
  1770  079F  00D1               	movwf	SendDataFrame@FrameSum
  1771  07A0  3000               	movlw	0
  1772  07A1  3D52               	addwfc	SendDataFrame@FrameSum+1,w
  1773  07A2  00D2               	movwf	SendDataFrame@FrameSum+1
  1774                           
  1775                           ;main.c: 121: for(int i=0; i<4; i++)
  1776  07A3  01CF               	clrf	SendDataFrame@i_322
  1777  07A4  01D0               	clrf	SendDataFrame@i_322+1
  1778  07A5  0850               	movf	SendDataFrame@i_322+1,w
  1779  07A6  3A80               	xorlw	128
  1780  07A7  00F6               	movwf	??_SendDataFrame
  1781  07A8  3080               	movlw	128
  1782  07A9  0276               	subwf	??_SendDataFrame,w
  1783  07AA  1D03               	skipz
  1784  07AB  2FAE               	goto	u875
  1785  07AC  3004               	movlw	4
  1786  07AD  024F               	subwf	SendDataFrame@i_322,w
  1787  07AE                     u875:	
  1788  07AE  1803               	btfsc	3,0
  1789  07AF  2FD2               	goto	l1460
  1790  07B0                     l1452:	
  1791                           
  1792                           ;main.c: 122: {
  1793                           ;main.c: 123: EUSART_Write(CH_8_RAW[i]); FrameSum = FrameSum + CH_8_RAW[i];
  1794  07B0  0020               	movlb	0	; select bank0
  1795  07B1  084F               	movf	SendDataFrame@i_322,w
  1796  07B2  3E3C               	addlw	(low (_CH_8_RAW| 0))& (0+255)
  1797  07B3  0086               	movwf	6
  1798  07B4  0187               	clrf	7
  1799  07B5  0801               	movf	1,w
  1800  07B6  2421               	fcall	_EUSART_Write
  1801  07B7  0020               	movlb	0	; select bank0
  1802  07B8  084F               	movf	SendDataFrame@i_322,w
  1803  07B9  3E3C               	addlw	(low (_CH_8_RAW| 0))& (0+255)
  1804  07BA  0086               	movwf	6
  1805  07BB  0187               	clrf	7
  1806  07BC  0801               	movf	1,w
  1807  07BD  0751               	addwf	SendDataFrame@FrameSum,w
  1808  07BE  00D1               	movwf	SendDataFrame@FrameSum
  1809  07BF  0852               	movf	SendDataFrame@FrameSum+1,w
  1810  07C0  1803               	skipnc
  1811  07C1  0A52               	incf	SendDataFrame@FrameSum+1,w
  1812  07C2  00D2               	movwf	SendDataFrame@FrameSum+1
  1813  07C3  3001               	movlw	1
  1814  07C4  07CF               	addwf	SendDataFrame@i_322,f
  1815  07C5  3000               	movlw	0
  1816  07C6  3DD0               	addwfc	SendDataFrame@i_322+1,f
  1817  07C7  0850               	movf	SendDataFrame@i_322+1,w
  1818  07C8  3A80               	xorlw	128
  1819  07C9  00F6               	movwf	??_SendDataFrame
  1820  07CA  3080               	movlw	128
  1821  07CB  0276               	subwf	??_SendDataFrame,w
  1822  07CC  1D03               	skipz
  1823  07CD  2FD0               	goto	u885
  1824  07CE  3004               	movlw	4
  1825  07CF  024F               	subwf	SendDataFrame@i_322,w
  1826  07D0                     u885:	
  1827  07D0  1C03               	skipc
  1828  07D1  2FB0               	goto	l1452
  1829  07D2                     l1460:	
  1830                           
  1831                           ;main.c: 124: }
  1832                           ;main.c: 125: EUSART_Write('|'); FrameSum = FrameSum + '|';
  1833  07D2  307C               	movlw	124
  1834  07D3  2421               	fcall	_EUSART_Write
  1835  07D4  0020               	movlb	0	; select bank0
  1836  07D5  0851               	movf	SendDataFrame@FrameSum,w
  1837  07D6  3E7C               	addlw	124
  1838  07D7  00D1               	movwf	SendDataFrame@FrameSum
  1839  07D8  3000               	movlw	0
  1840  07D9  3D52               	addwfc	SendDataFrame@FrameSum+1,w
  1841  07DA  00D2               	movwf	SendDataFrame@FrameSum+1
  1842                           
  1843                           ;main.c: 127: Checksum = FrameSum%255;
  1844  07DB  30FF               	movlw	255
  1845  07DC  00F0               	movwf	___lwmod@divisor
  1846  07DD  3000               	movlw	0
  1847  07DE  00F1               	movwf	___lwmod@divisor+1
  1848  07DF  0852               	movf	SendDataFrame@FrameSum+1,w
  1849  07E0  00F3               	movwf	___lwmod@dividend+1
  1850  07E1  0851               	movf	SendDataFrame@FrameSum,w
  1851  07E2  00F2               	movwf	___lwmod@dividend
  1852  07E3  2482               	fcall	___lwmod
  1853  07E4  0870               	movf	?___lwmod,w
  1854  07E5  00F6               	movwf	??_SendDataFrame
  1855  07E6  0876               	movf	??_SendDataFrame,w
  1856  07E7  0020               	movlb	0	; select bank0
  1857  07E8  00C0               	movwf	SendDataFrame@Checksum
  1858                           
  1859                           ;main.c: 128: EUSART_Write(Checksum);
  1860  07E9  0840               	movf	SendDataFrame@Checksum,w
  1861  07EA  2421               	fcall	_EUSART_Write
  1862                           
  1863                           ;main.c: 129: EUSART_Write('|');
  1864  07EB  307C               	movlw	124
  1865  07EC  2421               	fcall	_EUSART_Write
  1866                           
  1867                           ;main.c: 131: EUSART_Write(0x0D);
  1868  07ED  300D               	movlw	13
  1869  07EE  2421               	fcall	_EUSART_Write
  1870                           
  1871                           ;main.c: 132: EUSART_Write(0x0A);
  1872  07EF  300A               	movlw	10
  1873  07F0  2421               	fcall	_EUSART_Write
  1874  07F1  0008               	return
  1875  07F2                     __end_of_SendDataFrame:	
  1876                           
  1877                           	psect	text2
  1878  0482                     __ptext2:	
  1879 ;; *************** function ___lwmod *****************
  1880 ;; Defined at:
  1881 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;  divisor         2    0[COMMON] unsigned int 
  1884 ;;  dividend        2    2[COMMON] unsigned int 
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;  counter         1    5[COMMON] unsigned char 
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  2    0[COMMON] unsigned int 
  1889 ;; Registers used:
  1890 ;;		wreg, status,2, status,0
  1891 ;; Tracked objects:
  1892 ;;		On entry : 0/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMMON   BANK0   BANK1
  1896 ;;      Params:         4       0       0
  1897 ;;      Locals:         1       0       0
  1898 ;;      Temps:          1       0       0
  1899 ;;      Totals:         6       0       0
  1900 ;;Total ram usage:        6 bytes
  1901 ;; Hardware stack levels used:    1
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		_SendDataFrame
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           
  1910                           ;psect for function ___lwmod
  1911  0482                     ___lwmod:	
  1912                           
  1913                           ;incstack = 0
  1914                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1915  0482  0870               	movf	___lwmod@divisor,w
  1916  0483  0471               	iorwf	___lwmod@divisor+1,w
  1917  0484  1903               	btfsc	3,2
  1918  0485  2CA9               	goto	l1308
  1919  0486  01F5               	clrf	___lwmod@counter
  1920  0487  0AF5               	incf	___lwmod@counter,f
  1921  0488                     l1298:	
  1922  0488  1BF1               	btfsc	___lwmod@divisor+1,7
  1923  0489  2C94               	goto	l1300
  1924  048A  3001               	movlw	1
  1925  048B                     u685:	
  1926  048B  35F0               	lslf	___lwmod@divisor,f
  1927  048C  0DF1               	rlf	___lwmod@divisor+1,f
  1928  048D  0B89               	decfsz	9,f
  1929  048E  2C8B               	goto	u685
  1930  048F  3001               	movlw	1
  1931  0490  00F4               	movwf	??___lwmod
  1932  0491  0874               	movf	??___lwmod,w
  1933  0492  07F5               	addwf	___lwmod@counter,f
  1934  0493  2C88               	goto	l1298
  1935  0494                     l1300:	
  1936  0494  0871               	movf	___lwmod@divisor+1,w
  1937  0495  0273               	subwf	___lwmod@dividend+1,w
  1938  0496  1D03               	skipz
  1939  0497  2C9A               	goto	u705
  1940  0498  0870               	movf	___lwmod@divisor,w
  1941  0499  0272               	subwf	___lwmod@dividend,w
  1942  049A                     u705:	
  1943  049A  1C03               	skipc
  1944  049B  2CA0               	goto	l1304
  1945  049C  0870               	movf	___lwmod@divisor,w
  1946  049D  02F2               	subwf	___lwmod@dividend,f
  1947  049E  0871               	movf	___lwmod@divisor+1,w
  1948  049F  3BF3               	subwfb	___lwmod@dividend+1,f
  1949  04A0                     l1304:	
  1950  04A0  3001               	movlw	1
  1951  04A1                     u715:	
  1952  04A1  36F1               	lsrf	___lwmod@divisor+1,f
  1953  04A2  0CF0               	rrf	___lwmod@divisor,f
  1954  04A3  0B89               	decfsz	9,f
  1955  04A4  2CA1               	goto	u715
  1956  04A5  3001               	movlw	1
  1957  04A6  02F5               	subwf	___lwmod@counter,f
  1958  04A7  1D03               	btfss	3,2
  1959  04A8  2C94               	goto	l1300
  1960  04A9                     l1308:	
  1961  04A9  0873               	movf	___lwmod@dividend+1,w
  1962  04AA  00F1               	movwf	?___lwmod+1
  1963  04AB  0872               	movf	___lwmod@dividend,w
  1964  04AC  00F0               	movwf	?___lwmod
  1965  04AD  0008               	return
  1966  04AE                     __end_of___lwmod:	
  1967                           
  1968                           	psect	text3
  1969  0421                     __ptext3:	
  1970 ;; *************** function _EUSART_Write *****************
  1971 ;; Defined at:
  1972 ;;		line 96 in file "mcc_generated_files/eusart.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;  txData          1    wreg     unsigned char 
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;  txData          1    0[COMMON] unsigned char 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  1    wreg      void 
  1979 ;; Registers used:
  1980 ;;		wreg
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMMON   BANK0   BANK1
  1986 ;;      Params:         0       0       0
  1987 ;;      Locals:         1       0       0
  1988 ;;      Temps:          0       0       0
  1989 ;;      Totals:         1       0       0
  1990 ;;Total ram usage:        1 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_SendDataFrame
  1996 ;;		_SendData
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           
  2001                           ;psect for function _EUSART_Write
  2002  0421                     _EUSART_Write:	
  2003                           
  2004                           ;incstack = 0
  2005                           ; Regs used in _EUSART_Write: [wreg]
  2006                           ;EUSART_Write@txData stored from wreg
  2007  0421  00F0               	movwf	EUSART_Write@txData
  2008  0422                     l99:	
  2009                           ;eusart.c: 99: {
  2010                           
  2011                           ;eusart.c: 98: while(0 == PIR1bits.TXIF)
  2012                           
  2013  0422  0020               	movlb	0	; select bank0
  2014  0423  1E11               	btfss	17,4	;volatile
  2015  0424  2C22               	goto	l99
  2016                           
  2017                           ;eusart.c: 100: }
  2018                           ;eusart.c: 102: TXREG = txData;
  2019  0425  0870               	movf	EUSART_Write@txData,w
  2020  0426  0023               	movlb	3	; select bank3
  2021  0427  009A               	movwf	26	;volatile
  2022  0428  0008               	return
  2023  0429                     __end_of_EUSART_Write:	
  2024                           
  2025                           	psect	text4
  2026  0415                     __ptext4:	
  2027 ;; *************** function _SYSTEM_Initialize *****************
  2028 ;; Defined at:
  2029 ;;		line 69 in file "mcc_generated_files/mcc.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;		None
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;		None
  2034 ;; Return value:  Size  Location     Type
  2035 ;;                  1    wreg      void 
  2036 ;; Registers used:
  2037 ;;		wreg, status,2, status,0, pclath, cstack
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMMON   BANK0   BANK1
  2043 ;;      Params:         0       0       0
  2044 ;;      Locals:         0       0       0
  2045 ;;      Temps:          0       0       0
  2046 ;;      Totals:         0       0       0
  2047 ;;Total ram usage:        0 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:    1
  2050 ;; This function calls:
  2051 ;;		_EUSART_Initialize
  2052 ;;		_OSCILLATOR_Initialize
  2053 ;;		_PIN_MANAGER_Initialize
  2054 ;;		_SPI_Initialize
  2055 ;;		_WDT_Initialize
  2056 ;; This function is called by:
  2057 ;;		_main
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           
  2062                           ;psect for function _SYSTEM_Initialize
  2063  0415                     _SYSTEM_Initialize:	
  2064                           
  2065                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  2066                           
  2067                           ;incstack = 0
  2068                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2069  0415  2447               	fcall	_PIN_MANAGER_Initialize
  2070                           
  2071                           ;mcc.c: 73: OSCILLATOR_Initialize();
  2072  0416  2407               	fcall	_OSCILLATOR_Initialize
  2073                           
  2074                           ;mcc.c: 74: WDT_Initialize();
  2075  0417  240B               	fcall	_WDT_Initialize
  2076                           
  2077                           ;mcc.c: 75: SPI_Initialize();
  2078  0418  240F               	fcall	_SPI_Initialize
  2079                           
  2080                           ;mcc.c: 76: EUSART_Initialize();
  2081  0419  243C               	fcall	_EUSART_Initialize
  2082  041A  0008               	return
  2083  041B                     __end_of_SYSTEM_Initialize:	
  2084                           
  2085                           	psect	text5
  2086  040B                     __ptext5:	
  2087 ;; *************** function _WDT_Initialize *****************
  2088 ;; Defined at:
  2089 ;;		line 87 in file "mcc_generated_files/mcc.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;		None
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;		None
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  1    wreg      void 
  2096 ;; Registers used:
  2097 ;;		wreg
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMMON   BANK0   BANK1
  2103 ;;      Params:         0       0       0
  2104 ;;      Locals:         0       0       0
  2105 ;;      Temps:          0       0       0
  2106 ;;      Totals:         0       0       0
  2107 ;;Total ram usage:        0 bytes
  2108 ;; Hardware stack levels used:    1
  2109 ;; This function calls:
  2110 ;;		Nothing
  2111 ;; This function is called by:
  2112 ;;		_SYSTEM_Initialize
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           
  2117                           ;psect for function _WDT_Initialize
  2118  040B                     _WDT_Initialize:	
  2119                           
  2120                           ;mcc.c: 90: WDTCON = 0x16;
  2121                           
  2122                           ;incstack = 0
  2123                           ; Regs used in _WDT_Initialize: [wreg]
  2124  040B  3016               	movlw	22
  2125  040C  0021               	movlb	1	; select bank1
  2126  040D  0097               	movwf	23	;volatile
  2127  040E  0008               	return
  2128  040F                     __end_of_WDT_Initialize:	
  2129                           
  2130                           	psect	text6
  2131  040F                     __ptext6:	
  2132 ;; *************** function _SPI_Initialize *****************
  2133 ;; Defined at:
  2134 ;;		line 63 in file "mcc_generated_files/spi.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;		None
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;		None
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  1    wreg      void 
  2141 ;; Registers used:
  2142 ;;		wreg, status,2
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMMON   BANK0   BANK1
  2148 ;;      Params:         0       0       0
  2149 ;;      Locals:         0       0       0
  2150 ;;      Temps:          0       0       0
  2151 ;;      Totals:         0       0       0
  2152 ;;Total ram usage:        0 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; This function calls:
  2155 ;;		Nothing
  2156 ;; This function is called by:
  2157 ;;		_SYSTEM_Initialize
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           
  2162                           ;psect for function _SPI_Initialize
  2163  040F                     _SPI_Initialize:	
  2164                           
  2165                           ;spi.c: 68: SSP1STAT = 0x00;
  2166                           
  2167                           ;incstack = 0
  2168                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  2169  040F  0024               	movlb	4	; select bank4
  2170  0410  0194               	clrf	20	;volatile
  2171                           
  2172                           ;spi.c: 71: SSP1CON1 = 0x21;
  2173  0411  3021               	movlw	33
  2174  0412  0095               	movwf	21	;volatile
  2175                           
  2176                           ;spi.c: 74: SSP1ADD = 0x00;
  2177  0413  0192               	clrf	18	;volatile
  2178  0414  0008               	return
  2179  0415                     __end_of_SPI_Initialize:	
  2180                           
  2181                           	psect	text7
  2182  0447                     __ptext7:	
  2183 ;; *************** function _PIN_MANAGER_Initialize *****************
  2184 ;; Defined at:
  2185 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  1    wreg      void 
  2192 ;; Registers used:
  2193 ;;		wreg, status,2
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMMON   BANK0   BANK1
  2199 ;;      Params:         0       0       0
  2200 ;;      Locals:         0       0       0
  2201 ;;      Temps:          0       0       0
  2202 ;;      Totals:         0       0       0
  2203 ;;Total ram usage:        0 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; This function calls:
  2206 ;;		Nothing
  2207 ;; This function is called by:
  2208 ;;		_SYSTEM_Initialize
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           
  2213                           ;psect for function _PIN_MANAGER_Initialize
  2214  0447                     _PIN_MANAGER_Initialize:	
  2215                           
  2216                           ;pin_manager.c: 56: LATA = 0xFF;
  2217                           
  2218                           ;incstack = 0
  2219                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2220  0447  30FF               	movlw	255
  2221  0448  0022               	movlb	2	; select bank2
  2222  0449  008C               	movwf	12	;volatile
  2223                           
  2224                           ;pin_manager.c: 57: LATB = 0x00;
  2225  044A  018D               	clrf	13	;volatile
  2226                           
  2227                           ;pin_manager.c: 58: LATC = 0x00;
  2228  044B  018E               	clrf	14	;volatile
  2229                           
  2230                           ;pin_manager.c: 63: TRISA = 0x00;
  2231  044C  0021               	movlb	1	; select bank1
  2232  044D  018C               	clrf	12	;volatile
  2233                           
  2234                           ;pin_manager.c: 64: TRISB = 0xC7;
  2235  044E  30C7               	movlw	199
  2236  044F  008D               	movwf	13	;volatile
  2237                           
  2238                           ;pin_manager.c: 65: TRISC = 0x97;
  2239  0450  3097               	movlw	151
  2240  0451  008E               	movwf	14	;volatile
  2241                           
  2242                           ;pin_manager.c: 70: ANSELC = 0x00;
  2243  0452  0023               	movlb	3	; select bank3
  2244  0453  018E               	clrf	14	;volatile
  2245                           
  2246                           ;pin_manager.c: 71: ANSELB = 0x3F;
  2247  0454  303F               	movlw	63
  2248  0455  008D               	movwf	13	;volatile
  2249                           
  2250                           ;pin_manager.c: 72: ANSELA = 0x2F;
  2251  0456  302F               	movlw	47
  2252  0457  008C               	movwf	12	;volatile
  2253                           
  2254                           ;pin_manager.c: 77: WPUE = 0x08;
  2255  0458  3008               	movlw	8
  2256  0459  0024               	movlb	4	; select bank4
  2257  045A  0090               	movwf	16	;volatile
  2258                           
  2259                           ;pin_manager.c: 78: WPUB = 0xFF;
  2260  045B  30FF               	movlw	255
  2261  045C  008D               	movwf	13	;volatile
  2262                           
  2263                           ;pin_manager.c: 79: OPTION_REGbits.nWPUEN = 0;
  2264  045D  0021               	movlb	1	; select bank1
  2265  045E  1395               	bcf	21,7	;volatile
  2266                           
  2267                           ;pin_manager.c: 85: APFCON = 0x00;
  2268  045F  0022               	movlb	2	; select bank2
  2269  0460  019D               	clrf	29	;volatile
  2270  0461  0008               	return
  2271  0462                     __end_of_PIN_MANAGER_Initialize:	
  2272                           
  2273                           	psect	text8
  2274  0407                     __ptext8:	
  2275 ;; *************** function _OSCILLATOR_Initialize *****************
  2276 ;; Defined at:
  2277 ;;		line 79 in file "mcc_generated_files/mcc.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;		None
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;		None
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		wreg
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMMON   BANK0   BANK1
  2291 ;;      Params:         0       0       0
  2292 ;;      Locals:         0       0       0
  2293 ;;      Temps:          0       0       0
  2294 ;;      Totals:         0       0       0
  2295 ;;Total ram usage:        0 bytes
  2296 ;; Hardware stack levels used:    1
  2297 ;; This function calls:
  2298 ;;		Nothing
  2299 ;; This function is called by:
  2300 ;;		_SYSTEM_Initialize
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           
  2305                           ;psect for function _OSCILLATOR_Initialize
  2306  0407                     _OSCILLATOR_Initialize:	
  2307                           
  2308                           ;mcc.c: 82: OSCCON = 0x78;
  2309                           
  2310                           ;incstack = 0
  2311                           ; Regs used in _OSCILLATOR_Initialize: [wreg]
  2312  0407  3078               	movlw	120
  2313  0408  0021               	movlb	1	; select bank1
  2314  0409  0099               	movwf	25	;volatile
  2315  040A  0008               	return
  2316  040B                     __end_of_OSCILLATOR_Initialize:	
  2317                           
  2318                           	psect	text9
  2319  043C                     __ptext9:	
  2320 ;; *************** function _EUSART_Initialize *****************
  2321 ;; Defined at:
  2322 ;;		line 55 in file "mcc_generated_files/eusart.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;		None
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;		None
  2327 ;; Return value:  Size  Location     Type
  2328 ;;                  1    wreg      void 
  2329 ;; Registers used:
  2330 ;;		wreg, status,2
  2331 ;; Tracked objects:
  2332 ;;		On entry : 0/0
  2333 ;;		On exit  : 0/0
  2334 ;;		Unchanged: 0/0
  2335 ;; Data sizes:     COMMON   BANK0   BANK1
  2336 ;;      Params:         0       0       0
  2337 ;;      Locals:         0       0       0
  2338 ;;      Temps:          0       0       0
  2339 ;;      Totals:         0       0       0
  2340 ;;Total ram usage:        0 bytes
  2341 ;; Hardware stack levels used:    1
  2342 ;; This function calls:
  2343 ;;		Nothing
  2344 ;; This function is called by:
  2345 ;;		_SYSTEM_Initialize
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           
  2350                           ;psect for function _EUSART_Initialize
  2351  043C                     _EUSART_Initialize:	
  2352                           
  2353                           ;eusart.c: 60: BAUDCON = 0x08;
  2354                           
  2355                           ;incstack = 0
  2356                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  2357  043C  3008               	movlw	8
  2358  043D  0023               	movlb	3	; select bank3
  2359  043E  009F               	movwf	31	;volatile
  2360                           
  2361                           ;eusart.c: 63: RCSTA = 0x90;
  2362  043F  3090               	movlw	144
  2363  0440  009D               	movwf	29	;volatile
  2364                           
  2365                           ;eusart.c: 66: TXSTA = 0x24;
  2366  0441  3024               	movlw	36
  2367  0442  009E               	movwf	30	;volatile
  2368                           
  2369                           ;eusart.c: 69: SPBRGL = 0x22;
  2370  0443  3022               	movlw	34
  2371  0444  009B               	movwf	27	;volatile
  2372                           
  2373                           ;eusart.c: 72: SPBRGH = 0x00;
  2374  0445  019C               	clrf	28	;volatile
  2375  0446  0008               	return
  2376  0447                     __end_of_EUSART_Initialize:	
  2377                           
  2378                           	psect	text10
  2379  04AE                     __ptext10:	
  2380 ;; *************** function _GetData *****************
  2381 ;; Defined at:
  2382 ;;		line 243 in file "main.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;  ChannelNumbe    1    wreg     unsigned char 
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;  ChannelNumbe    1    5[COMMON] unsigned char 
  2387 ;;  ArrayPointer    1    4[COMMON] PTR unsigned char 
  2388 ;;		 -> CH_8_RAW(4), CH_7_RAW(4), CH_6_RAW(4), CH_5_RAW(4), 
  2389 ;;		 -> CH_4_RAW(4), CH_3_RAW(4), CH_2_RAW(4), CH_1_RAW(4), 
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  1    wreg      void 
  2392 ;; Registers used:
  2393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMMON   BANK0   BANK1
  2399 ;;      Params:         0       0       0
  2400 ;;      Locals:         2       0       0
  2401 ;;      Temps:          2       0       0
  2402 ;;      Totals:         4       0       0
  2403 ;;Total ram usage:        4 bytes
  2404 ;; Hardware stack levels used:    1
  2405 ;; Hardware stack levels required when called:    1
  2406 ;; This function calls:
  2407 ;;		_SPI_Exchange8bit
  2408 ;;		_SetChannel
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           
  2415                           ;psect for function _GetData
  2416  04AE                     _GetData:	
  2417                           
  2418                           ;incstack = 0
  2419                           ; Regs used in _GetData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2420                           ;GetData@ChannelNumber stored from wreg
  2421  04AE  00F5               	movwf	GetData@ChannelNumber
  2422                           
  2423                           ;main.c: 245: char *ArrayPointer;
  2424                           ;main.c: 247: if(ChannelNumber == 1) ArrayPointer = &CH_1_RAW;
  2425  04AF  0375               	decf	GetData@ChannelNumber,w
  2426  04B0  1D03               	btfss	3,2
  2427  04B1  2CB6               	goto	l1478
  2428  04B2  3020               	movlw	(low (_CH_1_RAW| 0))& (0+255)
  2429  04B3  00F2               	movwf	??_GetData
  2430  04B4  0872               	movf	??_GetData,w
  2431  04B5  00F4               	movwf	GetData@ArrayPointer
  2432  04B6                     l1478:	
  2433                           
  2434                           ;main.c: 248: if(ChannelNumber == 2) ArrayPointer = &CH_2_RAW;
  2435  04B6  3002               	movlw	2
  2436  04B7  0675               	xorwf	GetData@ChannelNumber,w
  2437  04B8  1D03               	btfss	3,2
  2438  04B9  2CBE               	goto	l1482
  2439  04BA  3024               	movlw	(low (_CH_2_RAW| 0))& (0+255)
  2440  04BB  00F2               	movwf	??_GetData
  2441  04BC  0872               	movf	??_GetData,w
  2442  04BD  00F4               	movwf	GetData@ArrayPointer
  2443  04BE                     l1482:	
  2444                           
  2445                           ;main.c: 249: if(ChannelNumber == 3) ArrayPointer = &CH_3_RAW;
  2446  04BE  3003               	movlw	3
  2447  04BF  0675               	xorwf	GetData@ChannelNumber,w
  2448  04C0  1D03               	btfss	3,2
  2449  04C1  2CC6               	goto	l1486
  2450  04C2  3028               	movlw	(low (_CH_3_RAW| 0))& (0+255)
  2451  04C3  00F2               	movwf	??_GetData
  2452  04C4  0872               	movf	??_GetData,w
  2453  04C5  00F4               	movwf	GetData@ArrayPointer
  2454  04C6                     l1486:	
  2455                           
  2456                           ;main.c: 250: if(ChannelNumber == 4) ArrayPointer = &CH_4_RAW;
  2457  04C6  3004               	movlw	4
  2458  04C7  0675               	xorwf	GetData@ChannelNumber,w
  2459  04C8  1D03               	btfss	3,2
  2460  04C9  2CCE               	goto	l1490
  2461  04CA  302C               	movlw	(low (_CH_4_RAW| 0))& (0+255)
  2462  04CB  00F2               	movwf	??_GetData
  2463  04CC  0872               	movf	??_GetData,w
  2464  04CD  00F4               	movwf	GetData@ArrayPointer
  2465  04CE                     l1490:	
  2466                           
  2467                           ;main.c: 251: if(ChannelNumber == 5) ArrayPointer = &CH_5_RAW;
  2468  04CE  3005               	movlw	5
  2469  04CF  0675               	xorwf	GetData@ChannelNumber,w
  2470  04D0  1D03               	btfss	3,2
  2471  04D1  2CD6               	goto	l1494
  2472  04D2  3030               	movlw	(low (_CH_5_RAW| 0))& (0+255)
  2473  04D3  00F2               	movwf	??_GetData
  2474  04D4  0872               	movf	??_GetData,w
  2475  04D5  00F4               	movwf	GetData@ArrayPointer
  2476  04D6                     l1494:	
  2477                           
  2478                           ;main.c: 252: if(ChannelNumber == 6) ArrayPointer = &CH_6_RAW;
  2479  04D6  3006               	movlw	6
  2480  04D7  0675               	xorwf	GetData@ChannelNumber,w
  2481  04D8  1D03               	btfss	3,2
  2482  04D9  2CDE               	goto	l1498
  2483  04DA  3034               	movlw	(low (_CH_6_RAW| 0))& (0+255)
  2484  04DB  00F2               	movwf	??_GetData
  2485  04DC  0872               	movf	??_GetData,w
  2486  04DD  00F4               	movwf	GetData@ArrayPointer
  2487  04DE                     l1498:	
  2488                           
  2489                           ;main.c: 253: if(ChannelNumber == 7) ArrayPointer = &CH_7_RAW;
  2490  04DE  3007               	movlw	7
  2491  04DF  0675               	xorwf	GetData@ChannelNumber,w
  2492  04E0  1D03               	btfss	3,2
  2493  04E1  2CE6               	goto	l1502
  2494  04E2  3038               	movlw	(low (_CH_7_RAW| 0))& (0+255)
  2495  04E3  00F2               	movwf	??_GetData
  2496  04E4  0872               	movf	??_GetData,w
  2497  04E5  00F4               	movwf	GetData@ArrayPointer
  2498  04E6                     l1502:	
  2499                           
  2500                           ;main.c: 254: if(ChannelNumber == 8) ArrayPointer = &CH_8_RAW;
  2501  04E6  3008               	movlw	8
  2502  04E7  0675               	xorwf	GetData@ChannelNumber,w
  2503  04E8  1D03               	btfss	3,2
  2504  04E9  2CEE               	goto	l1506
  2505  04EA  303C               	movlw	(low (_CH_8_RAW| 0))& (0+255)
  2506  04EB  00F2               	movwf	??_GetData
  2507  04EC  0872               	movf	??_GetData,w
  2508  04ED  00F4               	movwf	GetData@ArrayPointer
  2509  04EE                     l1506:	
  2510                           
  2511                           ;main.c: 256: SetChannel(ChannelNumber);
  2512  04EE  0875               	movf	GetData@ChannelNumber,w
  2513  04EF  00F2               	movwf	??_GetData
  2514  04F0  01F3               	clrf	??_GetData+1
  2515  04F1  0872               	movf	??_GetData,w
  2516  04F2  00F0               	movwf	SetChannel@ChannelNumber
  2517  04F3  0873               	movf	??_GetData+1,w
  2518  04F4  00F1               	movwf	SetChannel@ChannelNumber+1
  2519  04F5  2590               	fcall	_SetChannel
  2520                           
  2521                           ;main.c: 258: *(ArrayPointer+0) = SPI_Exchange8bit(0);
  2522  04F6  3000               	movlw	0
  2523  04F7  2429               	fcall	_SPI_Exchange8bit
  2524  04F8  00F2               	movwf	??_GetData
  2525  04F9  0874               	movf	GetData@ArrayPointer,w
  2526  04FA  0086               	movwf	6
  2527  04FB  0187               	clrf	7
  2528  04FC  0872               	movf	??_GetData,w
  2529  04FD  0081               	movwf	1
  2530                           
  2531                           ;main.c: 259: *(ArrayPointer+1) = SPI_Exchange8bit(0);
  2532  04FE  3000               	movlw	0
  2533  04FF  2429               	fcall	_SPI_Exchange8bit
  2534  0500  00F2               	movwf	??_GetData
  2535  0501  0A74               	incf	GetData@ArrayPointer,w
  2536  0502  0086               	movwf	6
  2537  0503  0187               	clrf	7
  2538  0504  0872               	movf	??_GetData,w
  2539  0505  0081               	movwf	1
  2540                           
  2541                           ;main.c: 260: *(ArrayPointer+2) = SPI_Exchange8bit(0);
  2542  0506  3000               	movlw	0
  2543  0507  2429               	fcall	_SPI_Exchange8bit
  2544  0508  00F2               	movwf	??_GetData
  2545  0509  0874               	movf	GetData@ArrayPointer,w
  2546  050A  3E02               	addlw	2
  2547  050B  0086               	movwf	6
  2548  050C  0187               	clrf	7
  2549  050D  0872               	movf	??_GetData,w
  2550  050E  0081               	movwf	1
  2551                           
  2552                           ;main.c: 261: *(ArrayPointer+3) = SPI_Exchange8bit(0);
  2553  050F  3000               	movlw	0
  2554  0510  2429               	fcall	_SPI_Exchange8bit
  2555  0511  00F2               	movwf	??_GetData
  2556  0512  0874               	movf	GetData@ArrayPointer,w
  2557  0513  3E03               	addlw	3
  2558  0514  0086               	movwf	6
  2559  0515  0187               	clrf	7
  2560  0516  0872               	movf	??_GetData,w
  2561  0517  0081               	movwf	1
  2562                           
  2563                           ;main.c: 263: SetChannel(0);
  2564  0518  3000               	movlw	0
  2565  0519  00F0               	movwf	SetChannel@ChannelNumber
  2566  051A  00F1               	movwf	SetChannel@ChannelNumber+1
  2567  051B  2590               	fcall	_SetChannel
  2568  051C  0008               	return
  2569  051D                     __end_of_GetData:	
  2570                           
  2571                           	psect	text11
  2572  0590                     __ptext11:	
  2573 ;; *************** function _SetChannel *****************
  2574 ;; Defined at:
  2575 ;;		line 135 in file "main.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;  ChannelNumbe    2    0[COMMON] int 
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;		None
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  1    wreg      void 
  2582 ;; Registers used:
  2583 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMMON   BANK0   BANK1
  2589 ;;      Params:         2       0       0
  2590 ;;      Locals:         0       0       0
  2591 ;;      Temps:          0       0       0
  2592 ;;      Totals:         2       0       0
  2593 ;;Total ram usage:        2 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; This function calls:
  2596 ;;		Nothing
  2597 ;; This function is called by:
  2598 ;;		_GetData
  2599 ;;		_main
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           
  2604                           ;psect for function _SetChannel
  2605  0590                     _SetChannel:	
  2606                           
  2607                           ;main.c: 136: switch (ChannelNumber){
  2608                           
  2609                           ;incstack = 0
  2610                           ; Regs used in _SetChannel: [wreg-fsr0h+status,2+status,0]
  2611  0590  2DF5               	goto	l1280
  2612  0591                     l197:	
  2613                           ;main.c: 138: do { LATAbits.LATA0 = 1; } while(0);
  2614                           
  2615                           ;main.c: 137: case 0:
  2616                           
  2617  0591  0022               	movlb	2	; select bank2
  2618  0592  140C               	bsf	12,0	;volatile
  2619                           
  2620                           ;main.c: 139: do { LATAbits.LATA1 = 1; } while(0);
  2621  0593  148C               	bsf	12,1	;volatile
  2622                           
  2623                           ;main.c: 140: do { LATAbits.LATA2 = 1; } while(0);
  2624  0594  150C               	bsf	12,2	;volatile
  2625                           
  2626                           ;main.c: 141: do { LATAbits.LATA3 = 1; } while(0);
  2627  0595  158C               	bsf	12,3	;volatile
  2628                           
  2629                           ;main.c: 142: do { LATAbits.LATA4 = 1; } while(0);
  2630  0596  160C               	bsf	12,4	;volatile
  2631                           
  2632                           ;main.c: 143: do { LATAbits.LATA5 = 1; } while(0);
  2633  0597  168C               	bsf	12,5	;volatile
  2634                           
  2635                           ;main.c: 144: do { LATAbits.LATA7 = 1; } while(0);
  2636  0598  178C               	bsf	12,7	;volatile
  2637                           
  2638                           ;main.c: 145: do { LATAbits.LATA6 = 1; } while(0);
  2639  0599  170C               	bsf	12,6	;volatile
  2640                           
  2641                           ;main.c: 146: break;
  2642  059A  0008               	return
  2643  059B                     l215:	
  2644                           ;main.c: 148: do { LATAbits.LATA0 = 0; } while(0);
  2645                           
  2646                           ;main.c: 147: case 1:
  2647                           
  2648  059B  0022               	movlb	2	; select bank2
  2649  059C  100C               	bcf	12,0	;volatile
  2650                           
  2651                           ;main.c: 149: do { LATAbits.LATA1 = 1; } while(0);
  2652  059D  148C               	bsf	12,1	;volatile
  2653                           
  2654                           ;main.c: 150: do { LATAbits.LATA2 = 1; } while(0);
  2655  059E  150C               	bsf	12,2	;volatile
  2656                           
  2657                           ;main.c: 151: do { LATAbits.LATA3 = 1; } while(0);
  2658  059F  158C               	bsf	12,3	;volatile
  2659                           
  2660                           ;main.c: 152: do { LATAbits.LATA4 = 1; } while(0);
  2661  05A0  160C               	bsf	12,4	;volatile
  2662                           
  2663                           ;main.c: 153: do { LATAbits.LATA5 = 1; } while(0);
  2664  05A1  168C               	bsf	12,5	;volatile
  2665                           
  2666                           ;main.c: 154: do { LATAbits.LATA7 = 1; } while(0);
  2667  05A2  178C               	bsf	12,7	;volatile
  2668                           
  2669                           ;main.c: 155: do { LATAbits.LATA6 = 1; } while(0);
  2670  05A3  170C               	bsf	12,6	;volatile
  2671                           
  2672                           ;main.c: 156: break;
  2673  05A4  0008               	return
  2674  05A5                     l232:	
  2675                           ;main.c: 158: do { LATAbits.LATA0 = 1; } while(0);
  2676                           
  2677                           ;main.c: 157: case 2:
  2678                           
  2679  05A5  0022               	movlb	2	; select bank2
  2680  05A6  140C               	bsf	12,0	;volatile
  2681                           
  2682                           ;main.c: 159: do { LATAbits.LATA1 = 0; } while(0);
  2683  05A7  108C               	bcf	12,1	;volatile
  2684                           
  2685                           ;main.c: 160: do { LATAbits.LATA2 = 1; } while(0);
  2686  05A8  150C               	bsf	12,2	;volatile
  2687                           
  2688                           ;main.c: 161: do { LATAbits.LATA3 = 1; } while(0);
  2689  05A9  158C               	bsf	12,3	;volatile
  2690                           
  2691                           ;main.c: 162: do { LATAbits.LATA4 = 1; } while(0);
  2692  05AA  160C               	bsf	12,4	;volatile
  2693                           
  2694                           ;main.c: 163: do { LATAbits.LATA5 = 1; } while(0);
  2695  05AB  168C               	bsf	12,5	;volatile
  2696                           
  2697                           ;main.c: 164: do { LATAbits.LATA7 = 1; } while(0);
  2698  05AC  178C               	bsf	12,7	;volatile
  2699                           
  2700                           ;main.c: 165: do { LATAbits.LATA6 = 1; } while(0);
  2701  05AD  170C               	bsf	12,6	;volatile
  2702                           
  2703                           ;main.c: 166: break;
  2704  05AE  0008               	return
  2705  05AF                     l249:	
  2706                           ;main.c: 168: do { LATAbits.LATA0 = 1; } while(0);
  2707                           
  2708                           ;main.c: 167: case 3:
  2709                           
  2710  05AF  0022               	movlb	2	; select bank2
  2711  05B0  140C               	bsf	12,0	;volatile
  2712                           
  2713                           ;main.c: 169: do { LATAbits.LATA1 = 1; } while(0);
  2714  05B1  148C               	bsf	12,1	;volatile
  2715                           
  2716                           ;main.c: 170: do { LATAbits.LATA2 = 0; } while(0);
  2717  05B2  110C               	bcf	12,2	;volatile
  2718                           
  2719                           ;main.c: 171: do { LATAbits.LATA3 = 1; } while(0);
  2720  05B3  158C               	bsf	12,3	;volatile
  2721                           
  2722                           ;main.c: 172: do { LATAbits.LATA4 = 1; } while(0);
  2723  05B4  160C               	bsf	12,4	;volatile
  2724                           
  2725                           ;main.c: 173: do { LATAbits.LATA5 = 1; } while(0);
  2726  05B5  168C               	bsf	12,5	;volatile
  2727                           
  2728                           ;main.c: 174: do { LATAbits.LATA7 = 1; } while(0);
  2729  05B6  178C               	bsf	12,7	;volatile
  2730                           
  2731                           ;main.c: 175: do { LATAbits.LATA6 = 1; } while(0);
  2732  05B7  170C               	bsf	12,6	;volatile
  2733                           
  2734                           ;main.c: 176: break;
  2735  05B8  0008               	return
  2736  05B9                     l266:	
  2737                           ;main.c: 178: do { LATAbits.LATA0 = 1; } while(0);
  2738                           
  2739                           ;main.c: 177: case 4:
  2740                           
  2741  05B9  0022               	movlb	2	; select bank2
  2742  05BA  140C               	bsf	12,0	;volatile
  2743                           
  2744                           ;main.c: 179: do { LATAbits.LATA1 = 1; } while(0);
  2745  05BB  148C               	bsf	12,1	;volatile
  2746                           
  2747                           ;main.c: 180: do { LATAbits.LATA2 = 1; } while(0);
  2748  05BC  150C               	bsf	12,2	;volatile
  2749                           
  2750                           ;main.c: 181: do { LATAbits.LATA3 = 0; } while(0);
  2751  05BD  118C               	bcf	12,3	;volatile
  2752                           
  2753                           ;main.c: 182: do { LATAbits.LATA4 = 1; } while(0);
  2754  05BE  160C               	bsf	12,4	;volatile
  2755                           
  2756                           ;main.c: 183: do { LATAbits.LATA5 = 1; } while(0);
  2757  05BF  168C               	bsf	12,5	;volatile
  2758                           
  2759                           ;main.c: 184: do { LATAbits.LATA7 = 1; } while(0);
  2760  05C0  178C               	bsf	12,7	;volatile
  2761                           
  2762                           ;main.c: 185: do { LATAbits.LATA6 = 1; } while(0);
  2763  05C1  170C               	bsf	12,6	;volatile
  2764                           
  2765                           ;main.c: 186: break;
  2766  05C2  0008               	return
  2767  05C3                     l283:	
  2768                           ;main.c: 188: do { LATAbits.LATA0 = 1; } while(0);
  2769                           
  2770                           ;main.c: 187: case 5:
  2771                           
  2772  05C3  0022               	movlb	2	; select bank2
  2773  05C4  140C               	bsf	12,0	;volatile
  2774                           
  2775                           ;main.c: 189: do { LATAbits.LATA1 = 1; } while(0);
  2776  05C5  148C               	bsf	12,1	;volatile
  2777                           
  2778                           ;main.c: 190: do { LATAbits.LATA2 = 1; } while(0);
  2779  05C6  150C               	bsf	12,2	;volatile
  2780                           
  2781                           ;main.c: 191: do { LATAbits.LATA3 = 1; } while(0);
  2782  05C7  158C               	bsf	12,3	;volatile
  2783                           
  2784                           ;main.c: 192: do { LATAbits.LATA4 = 0; } while(0);
  2785  05C8  120C               	bcf	12,4	;volatile
  2786                           
  2787                           ;main.c: 193: do { LATAbits.LATA5 = 1; } while(0);
  2788  05C9  168C               	bsf	12,5	;volatile
  2789                           
  2790                           ;main.c: 194: do { LATAbits.LATA7 = 1; } while(0);
  2791  05CA  178C               	bsf	12,7	;volatile
  2792                           
  2793                           ;main.c: 195: do { LATAbits.LATA6 = 1; } while(0);
  2794  05CB  170C               	bsf	12,6	;volatile
  2795                           
  2796                           ;main.c: 196: break;
  2797  05CC  0008               	return
  2798  05CD                     l300:	
  2799                           ;main.c: 198: do { LATAbits.LATA0 = 1; } while(0);
  2800                           
  2801                           ;main.c: 197: case 6:
  2802                           
  2803  05CD  0022               	movlb	2	; select bank2
  2804  05CE  140C               	bsf	12,0	;volatile
  2805                           
  2806                           ;main.c: 199: do { LATAbits.LATA1 = 1; } while(0);
  2807  05CF  148C               	bsf	12,1	;volatile
  2808                           
  2809                           ;main.c: 200: do { LATAbits.LATA2 = 1; } while(0);
  2810  05D0  150C               	bsf	12,2	;volatile
  2811                           
  2812                           ;main.c: 201: do { LATAbits.LATA3 = 1; } while(0);
  2813  05D1  158C               	bsf	12,3	;volatile
  2814                           
  2815                           ;main.c: 202: do { LATAbits.LATA4 = 1; } while(0);
  2816  05D2  160C               	bsf	12,4	;volatile
  2817                           
  2818                           ;main.c: 203: do { LATAbits.LATA5 = 0; } while(0);
  2819  05D3  128C               	bcf	12,5	;volatile
  2820                           
  2821                           ;main.c: 204: do { LATAbits.LATA7 = 1; } while(0);
  2822  05D4  178C               	bsf	12,7	;volatile
  2823                           
  2824                           ;main.c: 205: do { LATAbits.LATA6 = 1; } while(0);
  2825  05D5  170C               	bsf	12,6	;volatile
  2826                           
  2827                           ;main.c: 206: break;
  2828  05D6  0008               	return
  2829  05D7                     l317:	
  2830                           ;main.c: 208: do { LATAbits.LATA0 = 1; } while(0);
  2831                           
  2832                           ;main.c: 207: case 7:
  2833                           
  2834  05D7  0022               	movlb	2	; select bank2
  2835  05D8  140C               	bsf	12,0	;volatile
  2836                           
  2837                           ;main.c: 209: do { LATAbits.LATA1 = 1; } while(0);
  2838  05D9  148C               	bsf	12,1	;volatile
  2839                           
  2840                           ;main.c: 210: do { LATAbits.LATA2 = 1; } while(0);
  2841  05DA  150C               	bsf	12,2	;volatile
  2842                           
  2843                           ;main.c: 211: do { LATAbits.LATA3 = 1; } while(0);
  2844  05DB  158C               	bsf	12,3	;volatile
  2845                           
  2846                           ;main.c: 212: do { LATAbits.LATA4 = 1; } while(0);
  2847  05DC  160C               	bsf	12,4	;volatile
  2848                           
  2849                           ;main.c: 213: do { LATAbits.LATA5 = 1; } while(0);
  2850  05DD  168C               	bsf	12,5	;volatile
  2851                           
  2852                           ;main.c: 214: do { LATAbits.LATA7 = 0; } while(0);
  2853  05DE  138C               	bcf	12,7	;volatile
  2854                           
  2855                           ;main.c: 215: do { LATAbits.LATA6 = 1; } while(0);
  2856  05DF  170C               	bsf	12,6	;volatile
  2857                           
  2858                           ;main.c: 216: break;
  2859  05E0  0008               	return
  2860  05E1                     l334:	
  2861                           ;main.c: 218: do { LATAbits.LATA0 = 1; } while(0);
  2862                           
  2863                           ;main.c: 217: case 8:
  2864                           
  2865  05E1  0022               	movlb	2	; select bank2
  2866  05E2  140C               	bsf	12,0	;volatile
  2867                           
  2868                           ;main.c: 219: do { LATAbits.LATA1 = 1; } while(0);
  2869  05E3  148C               	bsf	12,1	;volatile
  2870                           
  2871                           ;main.c: 220: do { LATAbits.LATA2 = 1; } while(0);
  2872  05E4  150C               	bsf	12,2	;volatile
  2873                           
  2874                           ;main.c: 221: do { LATAbits.LATA3 = 1; } while(0);
  2875  05E5  158C               	bsf	12,3	;volatile
  2876                           
  2877                           ;main.c: 222: do { LATAbits.LATA4 = 1; } while(0);
  2878  05E6  160C               	bsf	12,4	;volatile
  2879                           
  2880                           ;main.c: 223: do { LATAbits.LATA5 = 1; } while(0);
  2881  05E7  168C               	bsf	12,5	;volatile
  2882                           
  2883                           ;main.c: 224: do { LATAbits.LATA7 = 1; } while(0);
  2884  05E8  178C               	bsf	12,7	;volatile
  2885                           
  2886                           ;main.c: 225: do { LATAbits.LATA6 = 0; } while(0);
  2887  05E9  130C               	bcf	12,6	;volatile
  2888                           
  2889                           ;main.c: 226: break;
  2890  05EA  0008               	return
  2891  05EB                     l351:	
  2892                           ;main.c: 229: do { LATAbits.LATA0 = 1; } while(0);
  2893                           
  2894                           ;main.c: 228: default:
  2895                           
  2896  05EB  0022               	movlb	2	; select bank2
  2897  05EC  140C               	bsf	12,0	;volatile
  2898                           
  2899                           ;main.c: 230: do { LATAbits.LATA1 = 1; } while(0);
  2900  05ED  148C               	bsf	12,1	;volatile
  2901                           
  2902                           ;main.c: 231: do { LATAbits.LATA2 = 1; } while(0);
  2903  05EE  150C               	bsf	12,2	;volatile
  2904                           
  2905                           ;main.c: 232: do { LATAbits.LATA3 = 1; } while(0);
  2906  05EF  158C               	bsf	12,3	;volatile
  2907                           
  2908                           ;main.c: 233: do { LATAbits.LATA4 = 1; } while(0);
  2909  05F0  160C               	bsf	12,4	;volatile
  2910                           
  2911                           ;main.c: 234: do { LATAbits.LATA5 = 1; } while(0);
  2912  05F1  168C               	bsf	12,5	;volatile
  2913                           
  2914                           ;main.c: 235: do { LATAbits.LATA7 = 1; } while(0);
  2915  05F2  178C               	bsf	12,7	;volatile
  2916                           
  2917                           ;main.c: 236: do { LATAbits.LATA6 = 1; } while(0);
  2918  05F3  170C               	bsf	12,6	;volatile
  2919                           
  2920                           ;main.c: 238: }
  2921                           
  2922                           ;main.c: 237: break;
  2923  05F4  0008               	return
  2924  05F5                     l1280:	
  2925                           
  2926                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2927                           ; Switch size 1, requested type "space"
  2928                           ; Number of cases is 1, Range of values is 0 to 0
  2929                           ; switch strategies available:
  2930                           ; Name         Instructions Cycles
  2931                           ; simple_byte            4     3 (average)
  2932                           ; direct_byte            8     6 (fixed)
  2933                           ; jumptable            260     6 (fixed)
  2934                           ;	Chosen strategy is simple_byte
  2935  05F5  0871               	movf	SetChannel@ChannelNumber+1,w
  2936  05F6  3A00               	xorlw	0	; case 0
  2937  05F7  1903               	skipnz
  2938  05F8  2DFA               	goto	l1682
  2939  05F9  2DEB               	goto	l351
  2940  05FA                     l1682:	
  2941                           
  2942                           ; Switch size 1, requested type "space"
  2943                           ; Number of cases is 9, Range of values is 0 to 8
  2944                           ; switch strategies available:
  2945                           ; Name         Instructions Cycles
  2946                           ; direct_byte           24     6 (fixed)
  2947                           ; simple_byte           28    15 (average)
  2948                           ; jumptable            260     6 (fixed)
  2949                           ;	Chosen strategy is direct_byte
  2950  05FA  0870               	movf	SetChannel@ChannelNumber,w
  2951  05FB  0084               	movwf	4
  2952  05FC  3009               	movlw	9
  2953  05FD  0204               	subwf	4,w
  2954  05FE  1803               	skipnc
  2955  05FF  2DEB               	goto	l351
  2956  0600  3180               	movlp	high S1684
  2957  0601  3002               	movlw	low S1684
  2958  0602  0704               	addwf	4,w
  2959  0603  0082               	movwf	2
  2960  0604  0008               	return
  2961  0605                     __end_of_SetChannel:	
  2962                           
  2963                           	psect	swtext1
  2964  0002                     __pswtext1:	
  2965  0002                     S1684:	
  2966  0002  2D91               	ljmp	l197
  2967  0003  2D9B               	ljmp	l215
  2968  0004  2DA5               	ljmp	l232
  2969  0005  2DAF               	ljmp	l249
  2970  0006  2DB9               	ljmp	l266
  2971  0007  2DC3               	ljmp	l283
  2972  0008  2DCD               	ljmp	l300
  2973  0009  2DD7               	ljmp	l317
  2974  000A  2DE1               	ljmp	l334
  2975                           
  2976                           	psect	text12
  2977  0429                     __ptext12:	
  2978 ;; *************** function _SPI_Exchange8bit *****************
  2979 ;; Defined at:
  2980 ;;		line 77 in file "mcc_generated_files/spi.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;  data            1    wreg     unsigned char 
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;  data            1    0[COMMON] unsigned char 
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  1    wreg      unsigned char 
  2987 ;; Registers used:
  2988 ;;		wreg
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMMON   BANK0   BANK1
  2994 ;;      Params:         0       0       0
  2995 ;;      Locals:         1       0       0
  2996 ;;      Temps:          0       0       0
  2997 ;;      Totals:         1       0       0
  2998 ;;Total ram usage:        1 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; This function calls:
  3001 ;;		Nothing
  3002 ;; This function is called by:
  3003 ;;		_GetData
  3004 ;;		_SPI_Exchange8bitBuffer
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           
  3009                           ;psect for function _SPI_Exchange8bit
  3010  0429                     _SPI_Exchange8bit:	
  3011                           
  3012                           ;incstack = 0
  3013                           ; Regs used in _SPI_Exchange8bit: [wreg]
  3014                           ;SPI_Exchange8bit@data stored from wreg
  3015  0429  00F0               	movwf	SPI_Exchange8bit@data
  3016                           
  3017                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  3018  042A  0024               	movlb	4	; select bank4
  3019  042B  1395               	bcf	21,7	;volatile
  3020                           
  3021                           ;spi.c: 82: SSPBUF = data;
  3022  042C  0870               	movf	SPI_Exchange8bit@data,w
  3023  042D  0091               	movwf	17	;volatile
  3024  042E                     l18:	
  3025                           ;spi.c: 85: {
  3026                           
  3027                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  3028                           
  3029  042E  1C14               	btfss	20,0	;volatile
  3030  042F  2C2E               	goto	l18
  3031                           
  3032                           ;spi.c: 86: }
  3033                           ;spi.c: 88: return (SSPBUF);
  3034  0430  0811               	movf	17,w	;volatile
  3035  0431  0008               	return
  3036  0432                     __end_of_SPI_Exchange8bit:	
  3037                           
  3038                           	psect	text13
  3039  0432                     __ptext13:	
  3040 ;; *************** function _EUSART_Read *****************
  3041 ;; Defined at:
  3042 ;;		line 77 in file "mcc_generated_files/eusart.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;		None
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;		None
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      unsigned char 
  3049 ;; Registers used:
  3050 ;;		wreg
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMMON   BANK0   BANK1
  3056 ;;      Params:         0       0       0
  3057 ;;      Locals:         0       0       0
  3058 ;;      Temps:          0       0       0
  3059 ;;      Totals:         0       0       0
  3060 ;;Total ram usage:        0 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; This function calls:
  3063 ;;		Nothing
  3064 ;; This function is called by:
  3065 ;;		_main
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           
  3070                           ;psect for function _EUSART_Read
  3071  0432                     _EUSART_Read:	
  3072  0432                     l92:	
  3073                           ;eusart.c: 81: {
  3074                           
  3075                           ;eusart.c: 80: while(!PIR1bits.RCIF)
  3076                           
  3077                           ;incstack = 0
  3078                           ; Regs used in _EUSART_Read: [wreg]
  3079                           
  3080  0432  0020               	movlb	0	; select bank0
  3081  0433  1E91               	btfss	17,5	;volatile
  3082  0434  2C32               	goto	l92
  3083                           
  3084                           ;eusart.c: 82: }
  3085                           ;eusart.c: 85: if(1 == RCSTAbits.OERR)
  3086  0435  0023               	movlb	3	; select bank3
  3087  0436  1C9D               	btfss	29,1	;volatile
  3088  0437  2C3A               	goto	l880
  3089                           
  3090                           ;eusart.c: 86: {
  3091                           ;eusart.c: 89: RCSTAbits.CREN = 0;
  3092  0438  121D               	bcf	29,4	;volatile
  3093                           
  3094                           ;eusart.c: 90: RCSTAbits.CREN = 1;
  3095  0439  161D               	bsf	29,4	;volatile
  3096  043A                     l880:	
  3097                           
  3098                           ;eusart.c: 91: }
  3099                           ;eusart.c: 93: return RCREG;
  3100  043A  0819               	movf	25,w	;volatile
  3101  043B  0008               	return
  3102  043C                     __end_of_EUSART_Read:	
  3103  007E                     btemp	set	126	;btemp
  3104  007E                     wtemp	set	126
  3105  007E                     wtemp0	set	126
  3106  0080                     wtemp1	set	128
  3107  0082                     wtemp2	set	130
  3108  0084                     wtemp3	set	132
  3109  0086                     wtemp4	set	134
  3110  0088                     wtemp5	set	136
  3111  007F                     wtemp6	set	127
  3112  007E                     ttemp	set	126
  3113  007E                     ttemp0	set	126
  3114  0081                     ttemp1	set	129
  3115  0084                     ttemp2	set	132
  3116  0087                     ttemp3	set	135
  3117  007F                     ttemp4	set	127
  3118  007E                     ltemp	set	126
  3119  007E                     ltemp0	set	126
  3120  0082                     ltemp1	set	130
  3121  0086                     ltemp2	set	134
  3122  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        32
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     19      51
    BANK1            32      0       0

Pointer List with Targets:

    GetData@ArrayPointer	PTR unsigned char  size(1) Largest target is 4
		 -> CH_8_RAW(BANK0[4]), CH_7_RAW(BANK0[4]), CH_6_RAW(BANK0[4]), CH_5_RAW(BANK0[4]), 
		 -> CH_4_RAW(BANK0[4]), CH_3_RAW(BANK0[4]), CH_2_RAW(BANK0[4]), CH_1_RAW(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_SendDataFrame
    _SendDataFrame->___lwmod
    _GetData->_SetChannel

Critical Paths under _main in BANK0

    _main->_SendDataFrame

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2214
                                              7 COMMON     2     2      0
                        _EUSART_Read
                            _GetData
                  _SYSTEM_Initialize
                      _SendDataFrame
                         _SetChannel
 ---------------------------------------------------------------------------------
 (1) _SendDataFrame                                       20    20      0    1468
                                              6 COMMON     1     1      0
                                              0 BANK0     19    19      0
                       _EUSART_Write
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetData                                              4     4      0     497
                                              2 COMMON     4     4      0
                   _SPI_Exchange8bit
                         _SetChannel
 ---------------------------------------------------------------------------------
 (1) _SetChannel                                           2     0      2     181
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _GetData
     _SPI_Exchange8bit
     _SetChannel
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _SendDataFrame
     _EUSART_Write
     ___lwmod
   _SetChannel

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      3E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     13      33       6       63.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      3E       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Nov 27 16:31:36 2016

                 _SPI_Initialize 040F                                pc 0002                      __CFG_CP$OFF 0000  
                             l18 042E                               l92 0432                               l99 0422  
                    __CFG_LVP$ON 0000                              l300 05CD                              l215 059B  
                            l232 05A5                              l317 05D7                              l334 05E1  
                            l351 05EB                              l249 05AF                              l266 05B9  
                            l283 05C3                              l197 0591                              l384 0524  
                            l880 043A                              u705 049A                              u715 04A1  
                            u805 06F0                              u815 0706                              u735 0626  
                            u825 0728                              u745 0648                              u835 073E  
                            u755 065E                              u685 048B                              u845 0760  
                            u765 0680                              u855 0776                              u775 0696  
                            u865 0798                              u785 06B8                              u875 07AE  
                            u795 06CE                              u885 07D0                     __CFG_BORV$LO 0000  
                            wreg 0009                     __CFG_IESO$ON 0000                             S1684 0002  
                   ?_EUSART_Read 0070                             l1300 0494                             l1304 04A0  
                           l1308 04A9                             l1502 04E6                             l1406 072A  
                           l1334 064A                             l1326 0628                             l1280 05F5  
                           l1424 0762                             l1416 0740                             l1352 0682  
                           l1344 0660                             l1506 04EE                             l1442 079A  
                           l1434 0778                             l1370 06BA                             l1362 0698  
                           l1610 055F                             l1460 07D2                             l1452 07B0  
                           l1380 06D0                             l1620 056F                             l1604 0557  
                           l1630 0581                             l1622 0574                             l1616 0567  
                           l1624 0575                             l1490 04CE                             l1482 04BE  
                           l1298 0488                             l1388 06F2                             l1636 058B  
                           l1494 04D6                             l1486 04C6                             l1478 04B6  
                           l1398 0708                             l1592 0547                             l1682 05FA  
                           l1498 04DE                             l1586 053F                             l1598 054F  
                           _LATA 010C                             _LATB 010D                             _LATC 010E  
                           _WPUB 020D                             _WPUE 0210                     __CFG_WRT$OFF 0000  
                  __CFG_FCMEN$ON 0000                             _main 051D                             fsr0h 0005  
                           fsr1h 0007                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E                    __CFG_BOREN$ON 0000  
               main@ChannelCount 0078                             ltemp 007E                             start 0001  
                           ttemp 007E                             wtemp 007E           __end_of_SPI_Initialize 0415  
                __end_of_GetData 051D                    __CFG_MCLRE$ON 0000                    ?_EUSART_Write 0070  
 __size_of_OSCILLATOR_Initialize 0004    __end_of_OSCILLATOR_Initialize 040B                            ?_main 0070  
                  __CFG_WDTE$OFF 0000                  __end_of___lwmod 04AE                            _RCREG 0199  
                          _RCSTA 019D                            _TRISA 008C                            _TRISB 008D  
                          _TRISC 008E                            _TXREG 019A                            _TXSTA 019E  
                 _WDT_Initialize 040B                            ltemp0 007E                            ltemp1 0082  
                          ltemp2 0086                            ltemp3 0080                            ttemp0 007E  
                          ttemp1 0081                            ttemp2 0084                            ttemp3 0087  
                          ttemp4 007F                            status 0003                            wtemp0 007E  
                          wtemp1 0080                            wtemp2 0082                            wtemp3 0084  
                          wtemp4 0086                            wtemp5 0088                            wtemp6 007F  
                ?_SPI_Initialize 0070                  __initialization 07F2                     __end_of_main 0590  
                 ??_EUSART_Write 0070                   __CFG_LPBOR$OFF 0000                           ??_main 0077  
                     _SetChannel 0590           __end_of_WDT_Initialize 040F         __end_of_SPI_Exchange8bit 0432  
                         _APFCON 011D                           _ANSELA 018C                           _ANSELB 018D  
                         _ANSELC 018E                        ??_GetData 0072                           _OSCCON 0099  
                         _SPBRGH 019C                           _SPBRGL 019B                           _WDTCON 0097  
                         _SSPBUF 0211            SendDataFrame@Checksum 0040                   __CFG_PWRTE$OFF 0000  
          SendDataFrame@FrameSum 0051                   __CFG_STVREN$ON 0000                        ??___lwmod 0074  
         __size_of_SendDataFrame 01ED                  ?_WDT_Initialize 0070             __size_of_EUSART_Read 000A  
              _SYSTEM_Initialize 0415          __end_of__initialization 07FE               ?_SYSTEM_Initialize 0070  
                 __pcstackCOMMON 0070                     __pidataBANK0 0462              ??_SYSTEM_Initialize 0070  
                 _OPTION_REGbits 0095                      ?_SetChannel 0070        __end_of_SYSTEM_Initialize 041B  
           __end_of_EUSART_Write 0429                  __CFG_VCAPEN$OFF 0000                    _SendDataFrame 0605  
                     __pmaintext 051D                          _BAUDCON 019F                          _SSP1ADD 0212  
               ??_SPI_Initialize 0070                          _GetData 04AE                   ?_SendDataFrame 0070  
            __size_of_SetChannel 0075                          ___lwmod 0482                          __ptext1 0605  
                        __ptext2 0482                          __ptext3 0421                          __ptext4 0415  
                        __ptext5 040B                          __ptext6 040F                          __ptext7 0447  
                        __ptext8 0407                          __ptext9 043C            _OSCILLATOR_Initialize 0407  
       ??_PIN_MANAGER_Initialize 0070              GetData@ArrayPointer 0074                ?_SPI_Exchange8bit 0070  
     __size_of_SYSTEM_Initialize 0006             end_of_initialization 07FE               ??_SPI_Exchange8bit 0070  
           SPI_Exchange8bit@data 0070                          init_ram 041B                          initloop 041C  
              _EUSART_Initialize 043C             GetData@ChannelNumber 0075               ?_EUSART_Initialize 0070  
                      _RCSTAbits 019D              ??_EUSART_Initialize 0070                 ??_WDT_Initialize 0070  
               __CFG_FOSC$INTOSC 0000            __size_of_EUSART_Write 0008                  ??_SendDataFrame 0076  
      __end_of_EUSART_Initialize 0447               SendDataFrame@i_320 004B               SendDataFrame@i_321 004D  
             SendDataFrame@i_322 004F               SendDataFrame@i_316 0043               SendDataFrame@i_317 0045  
             SendDataFrame@i_318 0047               SendDataFrame@i_319 0049                     _EUSART_Write 0421  
         ?_OSCILLATOR_Initialize 0070                     ??_SetChannel 0072              start_initialization 07F2  
__size_of_PIN_MANAGER_Initialize 001B                    ??_EUSART_Read 0070               __end_of_SetChannel 0605  
                    __pdataBANK0 0020                      __pbssCOMMON 0079                        ___latbits 0000  
                   _ReceiveCount 0079                    __pcstackBANK0 0040                     _ReceivedByte 007A  
                       ?_GetData 0070       __size_of_EUSART_Initialize 000B              __end_of_EUSART_Read 043C  
         _PIN_MANAGER_Initialize 0447                         ?___lwmod 0070                        __pswtext1 0002  
                       _CH_1_RAW 0020                         _CH_2_RAW 0024                         _CH_3_RAW 0028  
                       _CH_4_RAW 002C                         _CH_5_RAW 0030                         _CH_6_RAW 0034  
                       _CH_7_RAW 0038                         _CH_8_RAW 003C                         _LATAbits 010C  
                       _LATBbits 010D          SetChannel@ChannelNumber 0070                         _PIR1bits 0011  
      __size_of_SPI_Exchange8bit 0009                         _SSP1CON1 0215                         _SSP1STAT 0214  
                    _EUSART_Read 0432                 __size_of_GetData 006F          __size_of_SPI_Initialize 0006  
        ??_OSCILLATOR_Initialize 0070                 __size_of___lwmod 002C                         __ptext10 04AE  
                       __ptext11 0590                         __ptext12 0429                         __ptext13 0432  
                   _SSP1CON1bits 0215                   SendDataFrame@i 0041                    __size_of_main 0073  
          __end_of_SendDataFrame 07F2                     _SSP1STATbits 0214          __size_of_WDT_Initialize 0004  
               ___lwmod@dividend 0072          ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000  
               _SPI_Exchange8bit 0429                  ___lwmod@divisor 0070                  ___lwmod@counter 0075  
             EUSART_Write@txData 0070   __end_of_PIN_MANAGER_Initialize 0462  
