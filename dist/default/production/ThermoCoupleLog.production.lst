

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Nov 28 21:23:15 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1512
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	swtext1,local,class=CONST,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  0008                     	;# 
    36  0009                     	;# 
    37  000A                     	;# 
    38  000B                     	;# 
    39  000C                     	;# 
    40  000D                     	;# 
    41  000E                     	;# 
    42  0010                     	;# 
    43  0011                     	;# 
    44  0012                     	;# 
    45  0015                     	;# 
    46  0016                     	;# 
    47  0016                     	;# 
    48  0017                     	;# 
    49  0018                     	;# 
    50  0019                     	;# 
    51  001A                     	;# 
    52  001B                     	;# 
    53  001C                     	;# 
    54  008C                     	;# 
    55  008D                     	;# 
    56  008E                     	;# 
    57  0090                     	;# 
    58  0091                     	;# 
    59  0092                     	;# 
    60  0095                     	;# 
    61  0096                     	;# 
    62  0097                     	;# 
    63  0099                     	;# 
    64  009A                     	;# 
    65  009B                     	;# 
    66  009B                     	;# 
    67  009B                     	;# 
    68  009B                     	;# 
    69  009C                     	;# 
    70  009C                     	;# 
    71  009D                     	;# 
    72  009E                     	;# 
    73  010C                     	;# 
    74  010D                     	;# 
    75  010E                     	;# 
    76  0116                     	;# 
    77  0117                     	;# 
    78  011D                     	;# 
    79  018C                     	;# 
    80  018D                     	;# 
    81  018E                     	;# 
    82  0191                     	;# 
    83  0191                     	;# 
    84  0192                     	;# 
    85  0193                     	;# 
    86  0193                     	;# 
    87  0194                     	;# 
    88  0195                     	;# 
    89  0196                     	;# 
    90  0197                     	;# 
    91  0199                     	;# 
    92  019A                     	;# 
    93  019B                     	;# 
    94  019B                     	;# 
    95  019B                     	;# 
    96  019B                     	;# 
    97  019C                     	;# 
    98  019C                     	;# 
    99  019D                     	;# 
   100  019E                     	;# 
   101  019F                     	;# 
   102  020D                     	;# 
   103  0210                     	;# 
   104  0211                     	;# 
   105  0211                     	;# 
   106  0212                     	;# 
   107  0212                     	;# 
   108  0213                     	;# 
   109  0213                     	;# 
   110  0214                     	;# 
   111  0214                     	;# 
   112  0215                     	;# 
   113  0215                     	;# 
   114  0215                     	;# 
   115  0216                     	;# 
   116  0216                     	;# 
   117  0217                     	;# 
   118  0217                     	;# 
   119  0291                     	;# 
   120  0291                     	;# 
   121  0292                     	;# 
   122  0293                     	;# 
   123  0298                     	;# 
   124  0298                     	;# 
   125  0299                     	;# 
   126  029A                     	;# 
   127  0394                     	;# 
   128  0395                     	;# 
   129  0396                     	;# 
   130  0FE4                     	;# 
   131  0FE5                     	;# 
   132  0FE6                     	;# 
   133  0FE7                     	;# 
   134  0FE8                     	;# 
   135  0FE9                     	;# 
   136  0FEA                     	;# 
   137  0FEB                     	;# 
   138  0FED                     	;# 
   139  0FEE                     	;# 
   140  0FEF                     	;# 
   141  0711                     	;# 
   142  0712                     	;# 
   143  0713                     	;# 
   144  0714                     	;# 
   145  0715                     	;# 
   146  0716                     	;# 
   147  0717                     	;# 
   148  0718                     	;# 
   149  0719                     	;# 
   150  071A                     	;# 
   151  071A                     	;# 
   152  071A                     	;# 
   153  071B                     	;# 
   154  071C                     	;# 
   155  071C                     	;# 
   156  071C                     	;# 
   157  071D                     	;# 
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  0010                     	;# 
   174  0011                     	;# 
   175  0012                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  0090                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009B                     	;# 
   200  009C                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  0116                     	;# 
   208  0117                     	;# 
   209  011D                     	;# 
   210  018C                     	;# 
   211  018D                     	;# 
   212  018E                     	;# 
   213  0191                     	;# 
   214  0191                     	;# 
   215  0192                     	;# 
   216  0193                     	;# 
   217  0193                     	;# 
   218  0194                     	;# 
   219  0195                     	;# 
   220  0196                     	;# 
   221  0197                     	;# 
   222  0199                     	;# 
   223  019A                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019C                     	;# 
   229  019C                     	;# 
   230  019D                     	;# 
   231  019E                     	;# 
   232  019F                     	;# 
   233  020D                     	;# 
   234  0210                     	;# 
   235  0211                     	;# 
   236  0211                     	;# 
   237  0212                     	;# 
   238  0212                     	;# 
   239  0213                     	;# 
   240  0213                     	;# 
   241  0214                     	;# 
   242  0214                     	;# 
   243  0215                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0216                     	;# 
   247  0216                     	;# 
   248  0217                     	;# 
   249  0217                     	;# 
   250  0291                     	;# 
   251  0291                     	;# 
   252  0292                     	;# 
   253  0293                     	;# 
   254  0298                     	;# 
   255  0298                     	;# 
   256  0299                     	;# 
   257  029A                     	;# 
   258  0394                     	;# 
   259  0395                     	;# 
   260  0396                     	;# 
   261  0FE4                     	;# 
   262  0FE5                     	;# 
   263  0FE6                     	;# 
   264  0FE7                     	;# 
   265  0FE8                     	;# 
   266  0FE9                     	;# 
   267  0FEA                     	;# 
   268  0FEB                     	;# 
   269  0FED                     	;# 
   270  0FEE                     	;# 
   271  0FEF                     	;# 
   272  0711                     	;# 
   273  0712                     	;# 
   274  0713                     	;# 
   275  0714                     	;# 
   276  0715                     	;# 
   277  0716                     	;# 
   278  0717                     	;# 
   279  0718                     	;# 
   280  0719                     	;# 
   281  071A                     	;# 
   282  071A                     	;# 
   283  071A                     	;# 
   284  071B                     	;# 
   285  071C                     	;# 
   286  071C                     	;# 
   287  071C                     	;# 
   288  071D                     	;# 
   289  0000                     	;# 
   290  0001                     	;# 
   291  0002                     	;# 
   292  0003                     	;# 
   293  0004                     	;# 
   294  0005                     	;# 
   295  0006                     	;# 
   296  0007                     	;# 
   297  0008                     	;# 
   298  0009                     	;# 
   299  000A                     	;# 
   300  000B                     	;# 
   301  000C                     	;# 
   302  000D                     	;# 
   303  000E                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  008C                     	;# 
   317  008D                     	;# 
   318  008E                     	;# 
   319  0090                     	;# 
   320  0091                     	;# 
   321  0092                     	;# 
   322  0095                     	;# 
   323  0096                     	;# 
   324  0097                     	;# 
   325  0099                     	;# 
   326  009A                     	;# 
   327  009B                     	;# 
   328  009B                     	;# 
   329  009B                     	;# 
   330  009B                     	;# 
   331  009C                     	;# 
   332  009C                     	;# 
   333  009D                     	;# 
   334  009E                     	;# 
   335  010C                     	;# 
   336  010D                     	;# 
   337  010E                     	;# 
   338  0116                     	;# 
   339  0117                     	;# 
   340  011D                     	;# 
   341  018C                     	;# 
   342  018D                     	;# 
   343  018E                     	;# 
   344  0191                     	;# 
   345  0191                     	;# 
   346  0192                     	;# 
   347  0193                     	;# 
   348  0193                     	;# 
   349  0194                     	;# 
   350  0195                     	;# 
   351  0196                     	;# 
   352  0197                     	;# 
   353  0199                     	;# 
   354  019A                     	;# 
   355  019B                     	;# 
   356  019B                     	;# 
   357  019B                     	;# 
   358  019B                     	;# 
   359  019C                     	;# 
   360  019C                     	;# 
   361  019D                     	;# 
   362  019E                     	;# 
   363  019F                     	;# 
   364  020D                     	;# 
   365  0210                     	;# 
   366  0211                     	;# 
   367  0211                     	;# 
   368  0212                     	;# 
   369  0212                     	;# 
   370  0213                     	;# 
   371  0213                     	;# 
   372  0214                     	;# 
   373  0214                     	;# 
   374  0215                     	;# 
   375  0215                     	;# 
   376  0215                     	;# 
   377  0216                     	;# 
   378  0216                     	;# 
   379  0217                     	;# 
   380  0217                     	;# 
   381  0291                     	;# 
   382  0291                     	;# 
   383  0292                     	;# 
   384  0293                     	;# 
   385  0298                     	;# 
   386  0298                     	;# 
   387  0299                     	;# 
   388  029A                     	;# 
   389  0394                     	;# 
   390  0395                     	;# 
   391  0396                     	;# 
   392  0FE4                     	;# 
   393  0FE5                     	;# 
   394  0FE6                     	;# 
   395  0FE7                     	;# 
   396  0FE8                     	;# 
   397  0FE9                     	;# 
   398  0FEA                     	;# 
   399  0FEB                     	;# 
   400  0FED                     	;# 
   401  0FEE                     	;# 
   402  0FEF                     	;# 
   403  0711                     	;# 
   404  0712                     	;# 
   405  0713                     	;# 
   406  0714                     	;# 
   407  0715                     	;# 
   408  0716                     	;# 
   409  0717                     	;# 
   410  0718                     	;# 
   411  0719                     	;# 
   412  071A                     	;# 
   413  071A                     	;# 
   414  071A                     	;# 
   415  071B                     	;# 
   416  071C                     	;# 
   417  071C                     	;# 
   418  071C                     	;# 
   419  071D                     	;# 
   420  0000                     	;# 
   421  0001                     	;# 
   422  0002                     	;# 
   423  0003                     	;# 
   424  0004                     	;# 
   425  0005                     	;# 
   426  0006                     	;# 
   427  0007                     	;# 
   428  0008                     	;# 
   429  0009                     	;# 
   430  000A                     	;# 
   431  000B                     	;# 
   432  000C                     	;# 
   433  000D                     	;# 
   434  000E                     	;# 
   435  0010                     	;# 
   436  0011                     	;# 
   437  0012                     	;# 
   438  0015                     	;# 
   439  0016                     	;# 
   440  0016                     	;# 
   441  0017                     	;# 
   442  0018                     	;# 
   443  0019                     	;# 
   444  001A                     	;# 
   445  001B                     	;# 
   446  001C                     	;# 
   447  008C                     	;# 
   448  008D                     	;# 
   449  008E                     	;# 
   450  0090                     	;# 
   451  0091                     	;# 
   452  0092                     	;# 
   453  0095                     	;# 
   454  0096                     	;# 
   455  0097                     	;# 
   456  0099                     	;# 
   457  009A                     	;# 
   458  009B                     	;# 
   459  009B                     	;# 
   460  009B                     	;# 
   461  009B                     	;# 
   462  009C                     	;# 
   463  009C                     	;# 
   464  009D                     	;# 
   465  009E                     	;# 
   466  010C                     	;# 
   467  010D                     	;# 
   468  010E                     	;# 
   469  0116                     	;# 
   470  0117                     	;# 
   471  011D                     	;# 
   472  018C                     	;# 
   473  018D                     	;# 
   474  018E                     	;# 
   475  0191                     	;# 
   476  0191                     	;# 
   477  0192                     	;# 
   478  0193                     	;# 
   479  0193                     	;# 
   480  0194                     	;# 
   481  0195                     	;# 
   482  0196                     	;# 
   483  0197                     	;# 
   484  0199                     	;# 
   485  019A                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019B                     	;# 
   489  019B                     	;# 
   490  019C                     	;# 
   491  019C                     	;# 
   492  019D                     	;# 
   493  019E                     	;# 
   494  019F                     	;# 
   495  020D                     	;# 
   496  0210                     	;# 
   497  0211                     	;# 
   498  0211                     	;# 
   499  0212                     	;# 
   500  0212                     	;# 
   501  0213                     	;# 
   502  0213                     	;# 
   503  0214                     	;# 
   504  0214                     	;# 
   505  0215                     	;# 
   506  0215                     	;# 
   507  0215                     	;# 
   508  0216                     	;# 
   509  0216                     	;# 
   510  0217                     	;# 
   511  0217                     	;# 
   512  0291                     	;# 
   513  0291                     	;# 
   514  0292                     	;# 
   515  0293                     	;# 
   516  0298                     	;# 
   517  0298                     	;# 
   518  0299                     	;# 
   519  029A                     	;# 
   520  0394                     	;# 
   521  0395                     	;# 
   522  0396                     	;# 
   523  0FE4                     	;# 
   524  0FE5                     	;# 
   525  0FE6                     	;# 
   526  0FE7                     	;# 
   527  0FE8                     	;# 
   528  0FE9                     	;# 
   529  0FEA                     	;# 
   530  0FEB                     	;# 
   531  0FED                     	;# 
   532  0FEE                     	;# 
   533  0FEF                     	;# 
   534  0711                     	;# 
   535  0712                     	;# 
   536  0713                     	;# 
   537  0714                     	;# 
   538  0715                     	;# 
   539  0716                     	;# 
   540  0717                     	;# 
   541  0718                     	;# 
   542  0719                     	;# 
   543  071A                     	;# 
   544  071A                     	;# 
   545  071A                     	;# 
   546  071B                     	;# 
   547  071C                     	;# 
   548  071C                     	;# 
   549  071C                     	;# 
   550  071D                     	;# 
   551  0000                     	;# 
   552  0001                     	;# 
   553  0002                     	;# 
   554  0003                     	;# 
   555  0004                     	;# 
   556  0005                     	;# 
   557  0006                     	;# 
   558  0007                     	;# 
   559  0008                     	;# 
   560  0009                     	;# 
   561  000A                     	;# 
   562  000B                     	;# 
   563  000C                     	;# 
   564  000D                     	;# 
   565  000E                     	;# 
   566  0010                     	;# 
   567  0011                     	;# 
   568  0012                     	;# 
   569  0015                     	;# 
   570  0016                     	;# 
   571  0016                     	;# 
   572  0017                     	;# 
   573  0018                     	;# 
   574  0019                     	;# 
   575  001A                     	;# 
   576  001B                     	;# 
   577  001C                     	;# 
   578  008C                     	;# 
   579  008D                     	;# 
   580  008E                     	;# 
   581  0090                     	;# 
   582  0091                     	;# 
   583  0092                     	;# 
   584  0095                     	;# 
   585  0096                     	;# 
   586  0097                     	;# 
   587  0099                     	;# 
   588  009A                     	;# 
   589  009B                     	;# 
   590  009B                     	;# 
   591  009B                     	;# 
   592  009B                     	;# 
   593  009C                     	;# 
   594  009C                     	;# 
   595  009D                     	;# 
   596  009E                     	;# 
   597  010C                     	;# 
   598  010D                     	;# 
   599  010E                     	;# 
   600  0116                     	;# 
   601  0117                     	;# 
   602  011D                     	;# 
   603  018C                     	;# 
   604  018D                     	;# 
   605  018E                     	;# 
   606  0191                     	;# 
   607  0191                     	;# 
   608  0192                     	;# 
   609  0193                     	;# 
   610  0193                     	;# 
   611  0194                     	;# 
   612  0195                     	;# 
   613  0196                     	;# 
   614  0197                     	;# 
   615  0199                     	;# 
   616  019A                     	;# 
   617  019B                     	;# 
   618  019B                     	;# 
   619  019B                     	;# 
   620  019B                     	;# 
   621  019C                     	;# 
   622  019C                     	;# 
   623  019D                     	;# 
   624  019E                     	;# 
   625  019F                     	;# 
   626  020D                     	;# 
   627  0210                     	;# 
   628  0211                     	;# 
   629  0211                     	;# 
   630  0212                     	;# 
   631  0212                     	;# 
   632  0213                     	;# 
   633  0213                     	;# 
   634  0214                     	;# 
   635  0214                     	;# 
   636  0215                     	;# 
   637  0215                     	;# 
   638  0215                     	;# 
   639  0216                     	;# 
   640  0216                     	;# 
   641  0217                     	;# 
   642  0217                     	;# 
   643  0291                     	;# 
   644  0291                     	;# 
   645  0292                     	;# 
   646  0293                     	;# 
   647  0298                     	;# 
   648  0298                     	;# 
   649  0299                     	;# 
   650  029A                     	;# 
   651  0394                     	;# 
   652  0395                     	;# 
   653  0396                     	;# 
   654  0FE4                     	;# 
   655  0FE5                     	;# 
   656  0FE6                     	;# 
   657  0FE7                     	;# 
   658  0FE8                     	;# 
   659  0FE9                     	;# 
   660  0FEA                     	;# 
   661  0FEB                     	;# 
   662  0FED                     	;# 
   663  0FEE                     	;# 
   664  0FEF                     	;# 
   665  0711                     	;# 
   666  0712                     	;# 
   667  0713                     	;# 
   668  0714                     	;# 
   669  0715                     	;# 
   670  0716                     	;# 
   671  0717                     	;# 
   672  0718                     	;# 
   673  0719                     	;# 
   674  071A                     	;# 
   675  071A                     	;# 
   676  071A                     	;# 
   677  071B                     	;# 
   678  071C                     	;# 
   679  071C                     	;# 
   680  071C                     	;# 
   681  071D                     	;# 
   682                           
   683                           	psect	idataBANK0
   684  04AD                     __pidataBANK0:	
   685                           
   686                           ;initializer for _CH_1_RAW
   687  04AD  344E               	retlw	78
   688  04AE  344F               	retlw	79
   689  04AF  344E               	retlw	78
   690  04B0  3445               	retlw	69
   691                           
   692                           ;initializer for _CH_2_RAW
   693  04B1  344E               	retlw	78
   694  04B2  344F               	retlw	79
   695  04B3  344E               	retlw	78
   696  04B4  3445               	retlw	69
   697                           
   698                           ;initializer for _CH_3_RAW
   699  04B5  344E               	retlw	78
   700  04B6  344F               	retlw	79
   701  04B7  344E               	retlw	78
   702  04B8  3445               	retlw	69
   703                           
   704                           ;initializer for _CH_4_RAW
   705  04B9  344E               	retlw	78
   706  04BA  344F               	retlw	79
   707  04BB  344E               	retlw	78
   708  04BC  3445               	retlw	69
   709                           
   710                           ;initializer for _CH_5_RAW
   711  04BD  344E               	retlw	78
   712  04BE  344F               	retlw	79
   713  04BF  344E               	retlw	78
   714  04C0  3445               	retlw	69
   715                           
   716                           ;initializer for _CH_6_RAW
   717  04C1  344E               	retlw	78
   718  04C2  344F               	retlw	79
   719  04C3  344E               	retlw	78
   720  04C4  3445               	retlw	69
   721                           
   722                           ;initializer for _CH_7_RAW
   723  04C5  344E               	retlw	78
   724  04C6  344F               	retlw	79
   725  04C7  344E               	retlw	78
   726  04C8  3445               	retlw	69
   727                           
   728                           ;initializer for _CH_8_RAW
   729  04C9  344E               	retlw	78
   730  04CA  344F               	retlw	79
   731  04CB  344E               	retlw	78
   732  04CC  3445               	retlw	69
   733  0011                     _PIR1bits	set	17
   734  0095                     _OPTION_REGbits	set	149
   735  0099                     _OSCCON	set	153
   736  008C                     _TRISA	set	140
   737  008D                     _TRISB	set	141
   738  008E                     _TRISC	set	142
   739  0097                     _WDTCON	set	151
   740  011D                     _APFCON	set	285
   741  010C                     _LATA	set	268
   742  010C                     _LATAbits	set	268
   743  010D                     _LATB	set	269
   744  010D                     _LATBbits	set	269
   745  010E                     _LATC	set	270
   746  018C                     _ANSELA	set	396
   747  018D                     _ANSELB	set	397
   748  018E                     _ANSELC	set	398
   749  019F                     _BAUDCON	set	415
   750  0199                     _RCREG	set	409
   751  019D                     _RCSTA	set	413
   752  019D                     _RCSTAbits	set	413
   753  019C                     _SPBRGH	set	412
   754  019B                     _SPBRGL	set	411
   755  019A                     _TXREG	set	410
   756  019E                     _TXSTA	set	414
   757  0212                     _SSP1ADD	set	530
   758  0215                     _SSP1CON1	set	533
   759  0215                     _SSP1CON1bits	set	533
   760  0214                     _SSP1STAT	set	532
   761  0214                     _SSP1STATbits	set	532
   762  0211                     _SSPBUF	set	529
   763  020D                     _WPUB	set	525
   764  0210                     _WPUE	set	528
   765                           
   766                           ; #config settings
   767  0000                     
   768                           	psect	cinit
   769  07F2                     start_initialization:	
   770  07F2                     __initialization:	
   771                           
   772                           ; Initialize objects allocated to BANK0
   773  07F2  30AD               	movlw	low __pidataBANK0
   774  07F3  0084               	movwf	4
   775  07F4  3084               	movlw	(high __pidataBANK0)| (0+128)
   776  07F5  0085               	movwf	5
   777  07F6  3020               	movlw	low __pdataBANK0
   778  07F7  0086               	movwf	6
   779  07F8  3000               	movlw	high __pdataBANK0
   780  07F9  0087               	movwf	7
   781  07FA  3020               	movlw	32
   782  07FB  2466               	fcall	init_ram
   783                           
   784                           ; Clear objects allocated to COMMON
   785  07FC  01F9               	clrf	__pbssCOMMON& (0+127)
   786  07FD  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   787  07FE                     end_of_initialization:	
   788                           ;End of C runtime variable initialization code
   789                           
   790  07FE                     __end_of__initialization:	
   791  07FE  0020               	movlb	0
   792  07FF  2D68               	ljmp	_main	;jump to C main() function
   793                           
   794                           	psect	bssCOMMON
   795  0079                     __pbssCOMMON:	
   796  0079                     _ReceiveCount:	
   797  0079                     	ds	1
   798  007A                     _ReceivedByte:	
   799  007A                     	ds	1
   800                           
   801                           	psect	dataBANK0
   802  0020                     __pdataBANK0:	
   803  0020                     _CH_1_RAW:	
   804  0020                     	ds	4
   805  0024                     _CH_2_RAW:	
   806  0024                     	ds	4
   807  0028                     _CH_3_RAW:	
   808  0028                     	ds	4
   809  002C                     _CH_4_RAW:	
   810  002C                     	ds	4
   811  0030                     _CH_5_RAW:	
   812  0030                     	ds	4
   813  0034                     _CH_6_RAW:	
   814  0034                     	ds	4
   815  0038                     _CH_7_RAW:	
   816  0038                     	ds	4
   817  003C                     _CH_8_RAW:	
   818  003C                     	ds	4
   819                           
   820                           	psect	inittext
   821  0466                     init_ram:	
   822  0466  00FE               	movwf	126
   823  0467                     initloop:	
   824  0467  0012               	moviw fsr0++
   825  0468  001E               	movwi fsr1++
   826  0469  0BFE               	decfsz	126,f
   827  046A  2C67               	goto	initloop
   828  046B  3400               	retlw	0
   829                           
   830                           	psect	cstackCOMMON
   831  0070                     __pcstackCOMMON:	
   832  0070                     ?_PIN_MANAGER_Initialize:	
   833  0070                     ??_PIN_MANAGER_Initialize:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0070                     ?_OSCILLATOR_Initialize:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0070                     ??_OSCILLATOR_Initialize:	
   840                           ; 1 bytes @ 0x0
   841                           
   842  0070                     ?_WDT_Initialize:	
   843                           ; 1 bytes @ 0x0
   844                           
   845  0070                     ??_WDT_Initialize:	
   846                           ; 1 bytes @ 0x0
   847                           
   848  0070                     ?_EUSART_Initialize:	
   849                           ; 1 bytes @ 0x0
   850                           
   851  0070                     ??_EUSART_Initialize:	
   852                           ; 1 bytes @ 0x0
   853                           
   854  0070                     ?_SPI_Initialize:	
   855                           ; 1 bytes @ 0x0
   856                           
   857  0070                     ??_SPI_Initialize:	
   858                           ; 1 bytes @ 0x0
   859                           
   860  0070                     ?_SPI_Exchange8bit:	
   861                           ; 1 bytes @ 0x0
   862                           
   863  0070                     ??_SPI_Exchange8bit:	
   864                           ; 1 bytes @ 0x0
   865                           
   866  0070                     ?_SYSTEM_Initialize:	
   867                           ; 1 bytes @ 0x0
   868                           
   869  0070                     ??_SYSTEM_Initialize:	
   870                           ; 1 bytes @ 0x0
   871                           
   872  0070                     ?_EUSART_Read:	
   873                           ; 1 bytes @ 0x0
   874                           
   875  0070                     ??_EUSART_Read:	
   876                           ; 1 bytes @ 0x0
   877                           
   878  0070                     ?_EUSART_Write:	
   879                           ; 1 bytes @ 0x0
   880                           
   881  0070                     ??_EUSART_Write:	
   882                           ; 1 bytes @ 0x0
   883                           
   884  0070                     ?_SendDataFrame:	
   885                           ; 1 bytes @ 0x0
   886                           
   887  0070                     ?_SetChannel:	
   888                           ; 1 bytes @ 0x0
   889                           
   890  0070                     ?_GetData:	
   891                           ; 1 bytes @ 0x0
   892                           
   893  0070                     ?_main:	
   894                           ; 1 bytes @ 0x0
   895                           
   896  0070                     ?___lwmod:	
   897                           ; 1 bytes @ 0x0
   898                           
   899  0070                     SPI_Exchange8bit@data:	
   900                           ; 2 bytes @ 0x0
   901                           
   902  0070                     EUSART_Write@txData:	
   903                           ; 1 bytes @ 0x0
   904                           
   905  0070                     SetChannel@ChannelNumber:	
   906                           ; 1 bytes @ 0x0
   907                           
   908  0070                     ___lwmod@divisor:	
   909                           ; 2 bytes @ 0x0
   910                           
   911                           
   912                           ; 2 bytes @ 0x0
   913  0070                     	ds	2
   914  0072                     ??_SetChannel:	
   915  0072                     ??_GetData:	
   916                           ; 1 bytes @ 0x2
   917                           
   918  0072                     ___lwmod@dividend:	
   919                           ; 1 bytes @ 0x2
   920                           
   921                           
   922                           ; 2 bytes @ 0x2
   923  0072                     	ds	2
   924  0074                     ??___lwmod:	
   925  0074                     GetData@ArrayPointer:	
   926                           ; 1 bytes @ 0x4
   927                           
   928                           
   929                           ; 1 bytes @ 0x4
   930  0074                     	ds	1
   931  0075                     GetData@ChannelNumber:	
   932  0075                     ___lwmod@counter:	
   933                           ; 1 bytes @ 0x5
   934                           
   935                           
   936                           ; 1 bytes @ 0x5
   937  0075                     	ds	1
   938  0076                     ??_SendDataFrame:	
   939                           
   940                           ; 1 bytes @ 0x6
   941  0076                     	ds	1
   942  0077                     ??_main:	
   943                           
   944                           ; 1 bytes @ 0x7
   945  0077                     	ds	1
   946  0078                     main@ChannelCount:	
   947                           
   948                           ; 1 bytes @ 0x8
   949  0078                     	ds	1
   950                           
   951                           	psect	cstackBANK0
   952  0040                     __pcstackBANK0:	
   953  0040                     SendDataFrame@Checksum:	
   954                           
   955                           ; 1 bytes @ 0x0
   956  0040                     	ds	1
   957  0041                     SendDataFrame@i:	
   958                           
   959                           ; 2 bytes @ 0x1
   960  0041                     	ds	2
   961  0043                     SendDataFrame@i_316:	
   962                           
   963                           ; 2 bytes @ 0x3
   964  0043                     	ds	2
   965  0045                     SendDataFrame@i_317:	
   966                           
   967                           ; 2 bytes @ 0x5
   968  0045                     	ds	2
   969  0047                     SendDataFrame@i_318:	
   970                           
   971                           ; 2 bytes @ 0x7
   972  0047                     	ds	2
   973  0049                     SendDataFrame@i_319:	
   974                           
   975                           ; 2 bytes @ 0x9
   976  0049                     	ds	2
   977  004B                     SendDataFrame@i_320:	
   978                           
   979                           ; 2 bytes @ 0xB
   980  004B                     	ds	2
   981  004D                     SendDataFrame@i_321:	
   982                           
   983                           ; 2 bytes @ 0xD
   984  004D                     	ds	2
   985  004F                     SendDataFrame@i_322:	
   986                           
   987                           ; 2 bytes @ 0xF
   988  004F                     	ds	2
   989  0051                     SendDataFrame@FrameSum:	
   990                           
   991                           ; 2 bytes @ 0x11
   992  0051                     	ds	2
   993                           
   994                           	psect	maintext
   995  0568                     __pmaintext:	
   996 ;;
   997 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   998 ;;
   999 ;; *************** function _main *****************
  1000 ;; Defined at:
  1001 ;;		line 262 in file "main.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;		None
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;  ChannelCount    1    8[COMMON] unsigned char 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : B1F/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMMON   BANK0   BANK1
  1015 ;;      Params:         0       0       0
  1016 ;;      Locals:         1       0       0
  1017 ;;      Temps:          1       0       0
  1018 ;;      Totals:         2       0       0
  1019 ;;Total ram usage:        2 bytes
  1020 ;; Hardware stack levels required when called:    2
  1021 ;; This function calls:
  1022 ;;		_EUSART_Read
  1023 ;;		_GetData
  1024 ;;		_SYSTEM_Initialize
  1025 ;;		_SendDataFrame
  1026 ;;		_SetChannel
  1027 ;; This function is called by:
  1028 ;;		Startup code after reset
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           
  1033                           ;psect for function _main
  1034  0568                     _main:	
  1035                           
  1036                           ;main.c: 265: SYSTEM_Initialize();
  1037                           
  1038                           ;incstack = 0
  1039                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1040  0568  2460               	fcall	_SYSTEM_Initialize
  1041                           
  1042                           ;main.c: 266: SetChannel(0);
  1043  0569  3000               	movlw	0
  1044  056A  00F0               	movwf	SetChannel@ChannelNumber
  1045  056B  00F1               	movwf	SetChannel@ChannelNumber+1
  1046  056C  25DB               	fcall	_SetChannel
  1047                           
  1048                           ;main.c: 268: do { LATBbits.LATB4 = 1; } while(0);
  1049  056D  0022               	movlb	2	; select bank2
  1050  056E  160D               	bsf	13,4	;volatile
  1051  056F                     l384:	
  1052                           ;main.c: 292: {
  1053                           
  1054                           ;main.c: 286: {
  1055                           ;main.c: 291: while(!PIR1bits.RCIF)
  1056                           
  1057                           ;main.c: 285: while (1)
  1058                           
  1059  056F  0020               	movlb	0	; select bank0
  1060  0570  1E91               	btfss	17,5	;volatile
  1061  0571  2D6F               	goto	l384
  1062                           
  1063                           ;main.c: 293: }
  1064                           ;main.c: 296: ReceivedByte = EUSART_Read();
  1065  0572  247D               	fcall	_EUSART_Read
  1066  0573  00F7               	movwf	??_main
  1067  0574  0877               	movf	??_main,w
  1068  0575  00FA               	movwf	_ReceivedByte
  1069                           
  1070                           ;main.c: 298: if((ReceivedByte == '#') && ReceiveCount == 0) ReceiveCount++;
  1071  0576  3023               	movlw	35
  1072  0577  067A               	xorwf	_ReceivedByte,w
  1073  0578  1903               	btfsc	3,2
  1074  0579  0879               	movf	_ReceiveCount,w
  1075  057A  1903               	btfsc	3,2
  1076  057B  2DBA               	goto	l1536
  1077                           
  1078                           ;main.c: 299: else if((ReceivedByte == 'g') && ReceiveCount == 1) ReceiveCount++;
  1079  057C  3067               	movlw	103
  1080  057D  067A               	xorwf	_ReceivedByte,w
  1081  057E  1903               	btfsc	3,2
  1082  057F  0379               	decf	_ReceiveCount,w
  1083  0580  1903               	btfsc	3,2
  1084  0581  2DBA               	goto	l1536
  1085                           
  1086                           ;main.c: 300: else if((ReceivedByte == 'e') && ReceiveCount == 2) ReceiveCount++;
  1087  0582  3065               	movlw	101
  1088  0583  067A               	xorwf	_ReceivedByte,w
  1089  0584  1D03               	btfss	3,2
  1090  0585  2D8A               	goto	l1502
  1091  0586  3002               	movlw	2
  1092  0587  0679               	xorwf	_ReceiveCount,w
  1093  0588  1903               	btfsc	3,2
  1094  0589  2DBA               	goto	l1536
  1095  058A                     l1502:	
  1096                           
  1097                           ;main.c: 301: else if((ReceivedByte == 't') && ReceiveCount == 3) ReceiveCount++;
  1098  058A  3074               	movlw	116
  1099  058B  067A               	xorwf	_ReceivedByte,w
  1100  058C  1D03               	btfss	3,2
  1101  058D  2D92               	goto	l1508
  1102  058E  3003               	movlw	3
  1103  058F  0679               	xorwf	_ReceiveCount,w
  1104  0590  1903               	btfsc	3,2
  1105  0591  2DBA               	goto	l1536
  1106  0592                     l1508:	
  1107                           
  1108                           ;main.c: 302: else if((ReceivedByte == '_') && ReceiveCount == 4) ReceiveCount++;
  1109  0592  305F               	movlw	95
  1110  0593  067A               	xorwf	_ReceivedByte,w
  1111  0594  1D03               	btfss	3,2
  1112  0595  2D9A               	goto	l1514
  1113  0596  3004               	movlw	4
  1114  0597  0679               	xorwf	_ReceiveCount,w
  1115  0598  1903               	btfsc	3,2
  1116  0599  2DBA               	goto	l1536
  1117  059A                     l1514:	
  1118                           
  1119                           ;main.c: 303: else if((ReceivedByte == 'd') && ReceiveCount == 5) ReceiveCount++;
  1120  059A  3064               	movlw	100
  1121  059B  067A               	xorwf	_ReceivedByte,w
  1122  059C  1D03               	btfss	3,2
  1123  059D  2DA2               	goto	l1520
  1124  059E  3005               	movlw	5
  1125  059F  0679               	xorwf	_ReceiveCount,w
  1126  05A0  1903               	btfsc	3,2
  1127  05A1  2DBA               	goto	l1536
  1128  05A2                     l1520:	
  1129                           
  1130                           ;main.c: 304: else if((ReceivedByte == 'a') && ReceiveCount == 6) ReceiveCount++;
  1131  05A2  3061               	movlw	97
  1132  05A3  067A               	xorwf	_ReceivedByte,w
  1133  05A4  1D03               	btfss	3,2
  1134  05A5  2DAA               	goto	l1526
  1135  05A6  3006               	movlw	6
  1136  05A7  0679               	xorwf	_ReceiveCount,w
  1137  05A8  1903               	btfsc	3,2
  1138  05A9  2DBA               	goto	l1536
  1139  05AA                     l1526:	
  1140                           
  1141                           ;main.c: 305: else if((ReceivedByte == 't') && ReceiveCount == 7) ReceiveCount++;
  1142  05AA  3074               	movlw	116
  1143  05AB  067A               	xorwf	_ReceivedByte,w
  1144  05AC  1D03               	btfss	3,2
  1145  05AD  2DB2               	goto	l1532
  1146  05AE  3007               	movlw	7
  1147  05AF  0679               	xorwf	_ReceiveCount,w
  1148  05B0  1903               	btfsc	3,2
  1149  05B1  2DBA               	goto	l1536
  1150  05B2                     l1532:	
  1151                           
  1152                           ;main.c: 306: else if((ReceivedByte == 'a') && ReceiveCount == 8) ReceiveCount++;
  1153  05B2  3061               	movlw	97
  1154  05B3  067A               	xorwf	_ReceivedByte,w
  1155  05B4  1D03               	btfss	3,2
  1156  05B5  2DBF               	goto	l1538
  1157  05B6  3008               	movlw	8
  1158  05B7  0679               	xorwf	_ReceiveCount,w
  1159  05B8  1D03               	btfss	3,2
  1160  05B9  2DBF               	goto	l1538
  1161  05BA                     l1536:	
  1162  05BA  3001               	movlw	1
  1163  05BB  00F7               	movwf	??_main
  1164  05BC  0877               	movf	??_main,w
  1165  05BD  07F9               	addwf	_ReceiveCount,f
  1166  05BE  2DC0               	goto	l1540
  1167  05BF                     l1538:	
  1168                           
  1169                           ;main.c: 307: else ReceiveCount = 0;
  1170  05BF  01F9               	clrf	_ReceiveCount
  1171  05C0                     l1540:	
  1172                           
  1173                           ;main.c: 310: if(ReceiveCount >= 9)
  1174  05C0  3009               	movlw	9
  1175  05C1  0279               	subwf	_ReceiveCount,w
  1176  05C2  1C03               	skipc
  1177  05C3  2D6F               	goto	l384
  1178                           
  1179                           ;main.c: 311: {
  1180                           ;main.c: 312: do { LATBbits.LATB3 = 1; } while(0);
  1181  05C4  0022               	movlb	2	; select bank2
  1182  05C5  158D               	bsf	13,3	;volatile
  1183                           
  1184                           ;main.c: 313: for(uint8_t ChannelCount = 1; ChannelCount <=8; ChannelCount++)
  1185  05C6  01F8               	clrf	main@ChannelCount
  1186  05C7  0AF8               	incf	main@ChannelCount,f
  1187  05C8  3009               	movlw	9
  1188  05C9  0278               	subwf	main@ChannelCount,w
  1189  05CA  1803               	btfsc	3,0
  1190  05CB  2DD6               	goto	l1552
  1191  05CC                     l1546:	
  1192                           
  1193                           ;main.c: 314: {
  1194                           ;main.c: 315: GetData(ChannelCount);
  1195  05CC  0878               	movf	main@ChannelCount,w
  1196  05CD  24F9               	fcall	_GetData
  1197  05CE  3001               	movlw	1
  1198  05CF  00F7               	movwf	??_main
  1199  05D0  0877               	movf	??_main,w
  1200  05D1  07F8               	addwf	main@ChannelCount,f
  1201  05D2  3009               	movlw	9
  1202  05D3  0278               	subwf	main@ChannelCount,w
  1203  05D4  1C03               	skipc
  1204  05D5  2DCC               	goto	l1546
  1205  05D6                     l1552:	
  1206                           
  1207                           ;main.c: 316: }
  1208                           ;main.c: 318: SendDataFrame();
  1209  05D6  2650               	fcall	_SendDataFrame
  1210                           
  1211                           ;main.c: 319: ReceiveCount = 0;
  1212  05D7  01F9               	clrf	_ReceiveCount
  1213                           
  1214                           ;main.c: 320: do { LATBbits.LATB3 = 0; } while(0);
  1215  05D8  0022               	movlb	2	; select bank2
  1216  05D9  118D               	bcf	13,3	;volatile
  1217  05DA  2D6F               	goto	l384
  1218  05DB                     __end_of_main:	
  1219                           
  1220                           	psect	text1
  1221  0650                     __ptext1:	
  1222 ;; *************** function _SendDataFrame *****************
  1223 ;; Defined at:
  1224 ;;		line 74 in file "main.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;		None
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;  i               2   15[BANK0 ] int 
  1229 ;;  i               2   13[BANK0 ] int 
  1230 ;;  i               2   11[BANK0 ] int 
  1231 ;;  i               2    9[BANK0 ] int 
  1232 ;;  i               2    7[BANK0 ] int 
  1233 ;;  i               2    5[BANK0 ] int 
  1234 ;;  i               2    3[BANK0 ] int 
  1235 ;;  i               2    1[BANK0 ] int 
  1236 ;;  FrameSum        2   17[BANK0 ] unsigned int 
  1237 ;;  Checksum        1    0[BANK0 ] unsigned char 
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  1    wreg      void 
  1240 ;; Registers used:
  1241 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMMON   BANK0   BANK1
  1247 ;;      Params:         0       0       0
  1248 ;;      Locals:         0      19       0
  1249 ;;      Temps:          1       0       0
  1250 ;;      Totals:         1      19       0
  1251 ;;Total ram usage:       20 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:    1
  1254 ;; This function calls:
  1255 ;;		_EUSART_Write
  1256 ;;		___lwmod
  1257 ;; This function is called by:
  1258 ;;		_main
  1259 ;; This function uses a non-reentrant model
  1260 ;;
  1261                           
  1262                           
  1263                           ;psect for function _SendDataFrame
  1264  0650                     _SendDataFrame:	
  1265                           
  1266                           ;main.c: 76: uint16_t FrameSum = 0;
  1267                           
  1268                           ;incstack = 0
  1269                           ; Regs used in _SendDataFrame: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1270  0650  0020               	movlb	0	; select bank0
  1271  0651  01D1               	clrf	SendDataFrame@FrameSum
  1272  0652  01D2               	clrf	SendDataFrame@FrameSum+1
  1273                           
  1274                           ;main.c: 77: uint8_t Checksum = 0;
  1275  0653  01C0               	clrf	SendDataFrame@Checksum
  1276                           
  1277                           ;main.c: 80: EUSART_Write('#'); FrameSum = FrameSum + '#';
  1278  0654  3023               	movlw	35
  1279  0655  246C               	fcall	_EUSART_Write
  1280  0656  0020               	movlb	0	; select bank0
  1281  0657  0851               	movf	SendDataFrame@FrameSum,w
  1282  0658  3E23               	addlw	35
  1283  0659  00D1               	movwf	SendDataFrame@FrameSum
  1284  065A  3000               	movlw	0
  1285  065B  3D52               	addwfc	SendDataFrame@FrameSum+1,w
  1286  065C  00D2               	movwf	SendDataFrame@FrameSum+1
  1287                           
  1288                           ;main.c: 81: for(int i=0; i<4; i++)
  1289  065D  01C1               	clrf	SendDataFrame@i
  1290  065E  01C2               	clrf	SendDataFrame@i+1
  1291  065F  0842               	movf	SendDataFrame@i+1,w
  1292  0660  3A80               	xorlw	128
  1293  0661  00F6               	movwf	??_SendDataFrame
  1294  0662  3080               	movlw	128
  1295  0663  0276               	subwf	??_SendDataFrame,w
  1296  0664  1D03               	skipz
  1297  0665  2E68               	goto	u735
  1298  0666  3004               	movlw	4
  1299  0667  0241               	subwf	SendDataFrame@i,w
  1300  0668                     u735:	
  1301  0668  1803               	btfsc	3,0
  1302  0669  2E8C               	goto	l1290
  1303  066A                     l1282:	
  1304                           
  1305                           ;main.c: 82: {
  1306                           ;main.c: 83: EUSART_Write(CH_1_RAW[i]); FrameSum = FrameSum + CH_1_RAW[i];
  1307  066A  0020               	movlb	0	; select bank0
  1308  066B  0841               	movf	SendDataFrame@i,w
  1309  066C  3E20               	addlw	(low (_CH_1_RAW| 0))& (0+255)
  1310  066D  0086               	movwf	6
  1311  066E  0187               	clrf	7
  1312  066F  0801               	movf	1,w
  1313  0670  246C               	fcall	_EUSART_Write
  1314  0671  0020               	movlb	0	; select bank0
  1315  0672  0841               	movf	SendDataFrame@i,w
  1316  0673  3E20               	addlw	(low (_CH_1_RAW| 0))& (0+255)
  1317  0674  0086               	movwf	6
  1318  0675  0187               	clrf	7
  1319  0676  0801               	movf	1,w
  1320  0677  0751               	addwf	SendDataFrame@FrameSum,w
  1321  0678  00D1               	movwf	SendDataFrame@FrameSum
  1322  0679  0852               	movf	SendDataFrame@FrameSum+1,w
  1323  067A  1803               	skipnc
  1324  067B  0A52               	incf	SendDataFrame@FrameSum+1,w
  1325  067C  00D2               	movwf	SendDataFrame@FrameSum+1
  1326  067D  3001               	movlw	1
  1327  067E  07C1               	addwf	SendDataFrame@i,f
  1328  067F  3000               	movlw	0
  1329  0680  3DC2               	addwfc	SendDataFrame@i+1,f
  1330  0681  0842               	movf	SendDataFrame@i+1,w
  1331  0682  3A80               	xorlw	128
  1332  0683  00F6               	movwf	??_SendDataFrame
  1333  0684  3080               	movlw	128
  1334  0685  0276               	subwf	??_SendDataFrame,w
  1335  0686  1D03               	skipz
  1336  0687  2E8A               	goto	u745
  1337  0688  3004               	movlw	4
  1338  0689  0241               	subwf	SendDataFrame@i,w
  1339  068A                     u745:	
  1340  068A  1C03               	skipc
  1341  068B  2E6A               	goto	l1282
  1342  068C                     l1290:	
  1343                           
  1344                           ;main.c: 84: }
  1345                           ;main.c: 86: for(int i=0; i<4; i++)
  1346  068C  0020               	movlb	0	; select bank0
  1347  068D  01C3               	clrf	SendDataFrame@i_316
  1348  068E  01C4               	clrf	SendDataFrame@i_316+1
  1349  068F  0844               	movf	SendDataFrame@i_316+1,w
  1350  0690  3A80               	xorlw	128
  1351  0691  00F6               	movwf	??_SendDataFrame
  1352  0692  3080               	movlw	128
  1353  0693  0276               	subwf	??_SendDataFrame,w
  1354  0694  1D03               	skipz
  1355  0695  2E98               	goto	u755
  1356  0696  3004               	movlw	4
  1357  0697  0243               	subwf	SendDataFrame@i_316,w
  1358  0698                     u755:	
  1359  0698  1803               	btfsc	3,0
  1360  0699  2EBC               	goto	l1304
  1361  069A                     l1296:	
  1362                           
  1363                           ;main.c: 87: {
  1364                           ;main.c: 88: EUSART_Write(CH_2_RAW[i]); FrameSum = FrameSum + CH_2_RAW[i];
  1365  069A  0020               	movlb	0	; select bank0
  1366  069B  0843               	movf	SendDataFrame@i_316,w
  1367  069C  3E24               	addlw	(low (_CH_2_RAW| 0))& (0+255)
  1368  069D  0086               	movwf	6
  1369  069E  0187               	clrf	7
  1370  069F  0801               	movf	1,w
  1371  06A0  246C               	fcall	_EUSART_Write
  1372  06A1  0020               	movlb	0	; select bank0
  1373  06A2  0843               	movf	SendDataFrame@i_316,w
  1374  06A3  3E24               	addlw	(low (_CH_2_RAW| 0))& (0+255)
  1375  06A4  0086               	movwf	6
  1376  06A5  0187               	clrf	7
  1377  06A6  0801               	movf	1,w
  1378  06A7  0751               	addwf	SendDataFrame@FrameSum,w
  1379  06A8  00D1               	movwf	SendDataFrame@FrameSum
  1380  06A9  0852               	movf	SendDataFrame@FrameSum+1,w
  1381  06AA  1803               	skipnc
  1382  06AB  0A52               	incf	SendDataFrame@FrameSum+1,w
  1383  06AC  00D2               	movwf	SendDataFrame@FrameSum+1
  1384  06AD  3001               	movlw	1
  1385  06AE  07C3               	addwf	SendDataFrame@i_316,f
  1386  06AF  3000               	movlw	0
  1387  06B0  3DC4               	addwfc	SendDataFrame@i_316+1,f
  1388  06B1  0844               	movf	SendDataFrame@i_316+1,w
  1389  06B2  3A80               	xorlw	128
  1390  06B3  00F6               	movwf	??_SendDataFrame
  1391  06B4  3080               	movlw	128
  1392  06B5  0276               	subwf	??_SendDataFrame,w
  1393  06B6  1D03               	skipz
  1394  06B7  2EBA               	goto	u765
  1395  06B8  3004               	movlw	4
  1396  06B9  0243               	subwf	SendDataFrame@i_316,w
  1397  06BA                     u765:	
  1398  06BA  1C03               	skipc
  1399  06BB  2E9A               	goto	l1296
  1400  06BC                     l1304:	
  1401                           
  1402                           ;main.c: 89: }
  1403                           ;main.c: 90: for(int i=0; i<4; i++)
  1404  06BC  0020               	movlb	0	; select bank0
  1405  06BD  01C5               	clrf	SendDataFrame@i_317
  1406  06BE  01C6               	clrf	SendDataFrame@i_317+1
  1407  06BF  0846               	movf	SendDataFrame@i_317+1,w
  1408  06C0  3A80               	xorlw	128
  1409  06C1  00F6               	movwf	??_SendDataFrame
  1410  06C2  3080               	movlw	128
  1411  06C3  0276               	subwf	??_SendDataFrame,w
  1412  06C4  1D03               	skipz
  1413  06C5  2EC8               	goto	u775
  1414  06C6  3004               	movlw	4
  1415  06C7  0245               	subwf	SendDataFrame@i_317,w
  1416  06C8                     u775:	
  1417  06C8  1803               	btfsc	3,0
  1418  06C9  2EEC               	goto	l1318
  1419  06CA                     l1310:	
  1420                           
  1421                           ;main.c: 91: {
  1422                           ;main.c: 92: EUSART_Write(CH_3_RAW[i]); FrameSum = FrameSum + CH_3_RAW[i];
  1423  06CA  0020               	movlb	0	; select bank0
  1424  06CB  0845               	movf	SendDataFrame@i_317,w
  1425  06CC  3E28               	addlw	(low (_CH_3_RAW| 0))& (0+255)
  1426  06CD  0086               	movwf	6
  1427  06CE  0187               	clrf	7
  1428  06CF  0801               	movf	1,w
  1429  06D0  246C               	fcall	_EUSART_Write
  1430  06D1  0020               	movlb	0	; select bank0
  1431  06D2  0845               	movf	SendDataFrame@i_317,w
  1432  06D3  3E28               	addlw	(low (_CH_3_RAW| 0))& (0+255)
  1433  06D4  0086               	movwf	6
  1434  06D5  0187               	clrf	7
  1435  06D6  0801               	movf	1,w
  1436  06D7  0751               	addwf	SendDataFrame@FrameSum,w
  1437  06D8  00D1               	movwf	SendDataFrame@FrameSum
  1438  06D9  0852               	movf	SendDataFrame@FrameSum+1,w
  1439  06DA  1803               	skipnc
  1440  06DB  0A52               	incf	SendDataFrame@FrameSum+1,w
  1441  06DC  00D2               	movwf	SendDataFrame@FrameSum+1
  1442  06DD  3001               	movlw	1
  1443  06DE  07C5               	addwf	SendDataFrame@i_317,f
  1444  06DF  3000               	movlw	0
  1445  06E0  3DC6               	addwfc	SendDataFrame@i_317+1,f
  1446  06E1  0846               	movf	SendDataFrame@i_317+1,w
  1447  06E2  3A80               	xorlw	128
  1448  06E3  00F6               	movwf	??_SendDataFrame
  1449  06E4  3080               	movlw	128
  1450  06E5  0276               	subwf	??_SendDataFrame,w
  1451  06E6  1D03               	skipz
  1452  06E7  2EEA               	goto	u785
  1453  06E8  3004               	movlw	4
  1454  06E9  0245               	subwf	SendDataFrame@i_317,w
  1455  06EA                     u785:	
  1456  06EA  1C03               	skipc
  1457  06EB  2ECA               	goto	l1310
  1458  06EC                     l1318:	
  1459                           
  1460                           ;main.c: 93: }
  1461                           ;main.c: 95: for(int i=0; i<4; i++)
  1462  06EC  0020               	movlb	0	; select bank0
  1463  06ED  01C7               	clrf	SendDataFrame@i_318
  1464  06EE  01C8               	clrf	SendDataFrame@i_318+1
  1465  06EF  0848               	movf	SendDataFrame@i_318+1,w
  1466  06F0  3A80               	xorlw	128
  1467  06F1  00F6               	movwf	??_SendDataFrame
  1468  06F2  3080               	movlw	128
  1469  06F3  0276               	subwf	??_SendDataFrame,w
  1470  06F4  1D03               	skipz
  1471  06F5  2EF8               	goto	u795
  1472  06F6  3004               	movlw	4
  1473  06F7  0247               	subwf	SendDataFrame@i_318,w
  1474  06F8                     u795:	
  1475  06F8  1803               	btfsc	3,0
  1476  06F9  2F1C               	goto	l1332
  1477  06FA                     l1324:	
  1478                           
  1479                           ;main.c: 96: {
  1480                           ;main.c: 97: EUSART_Write(CH_4_RAW[i]); FrameSum = FrameSum + CH_4_RAW[i];
  1481  06FA  0020               	movlb	0	; select bank0
  1482  06FB  0847               	movf	SendDataFrame@i_318,w
  1483  06FC  3E2C               	addlw	(low (_CH_4_RAW| 0))& (0+255)
  1484  06FD  0086               	movwf	6
  1485  06FE  0187               	clrf	7
  1486  06FF  0801               	movf	1,w
  1487  0700  246C               	fcall	_EUSART_Write
  1488  0701  0020               	movlb	0	; select bank0
  1489  0702  0847               	movf	SendDataFrame@i_318,w
  1490  0703  3E2C               	addlw	(low (_CH_4_RAW| 0))& (0+255)
  1491  0704  0086               	movwf	6
  1492  0705  0187               	clrf	7
  1493  0706  0801               	movf	1,w
  1494  0707  0751               	addwf	SendDataFrame@FrameSum,w
  1495  0708  00D1               	movwf	SendDataFrame@FrameSum
  1496  0709  0852               	movf	SendDataFrame@FrameSum+1,w
  1497  070A  1803               	skipnc
  1498  070B  0A52               	incf	SendDataFrame@FrameSum+1,w
  1499  070C  00D2               	movwf	SendDataFrame@FrameSum+1
  1500  070D  3001               	movlw	1
  1501  070E  07C7               	addwf	SendDataFrame@i_318,f
  1502  070F  3000               	movlw	0
  1503  0710  3DC8               	addwfc	SendDataFrame@i_318+1,f
  1504  0711  0848               	movf	SendDataFrame@i_318+1,w
  1505  0712  3A80               	xorlw	128
  1506  0713  00F6               	movwf	??_SendDataFrame
  1507  0714  3080               	movlw	128
  1508  0715  0276               	subwf	??_SendDataFrame,w
  1509  0716  1D03               	skipz
  1510  0717  2F1A               	goto	u805
  1511  0718  3004               	movlw	4
  1512  0719  0247               	subwf	SendDataFrame@i_318,w
  1513  071A                     u805:	
  1514  071A  1C03               	skipc
  1515  071B  2EFA               	goto	l1324
  1516  071C                     l1332:	
  1517                           
  1518                           ;main.c: 98: }
  1519                           ;main.c: 99: for(int i=0; i<4; i++)
  1520  071C  0020               	movlb	0	; select bank0
  1521  071D  01C9               	clrf	SendDataFrame@i_319
  1522  071E  01CA               	clrf	SendDataFrame@i_319+1
  1523  071F  084A               	movf	SendDataFrame@i_319+1,w
  1524  0720  3A80               	xorlw	128
  1525  0721  00F6               	movwf	??_SendDataFrame
  1526  0722  3080               	movlw	128
  1527  0723  0276               	subwf	??_SendDataFrame,w
  1528  0724  1D03               	skipz
  1529  0725  2F28               	goto	u815
  1530  0726  3004               	movlw	4
  1531  0727  0249               	subwf	SendDataFrame@i_319,w
  1532  0728                     u815:	
  1533  0728  1803               	btfsc	3,0
  1534  0729  2F4C               	goto	l1346
  1535  072A                     l1338:	
  1536                           
  1537                           ;main.c: 100: {
  1538                           ;main.c: 101: EUSART_Write(CH_5_RAW[i]); FrameSum = FrameSum + CH_5_RAW[i];
  1539  072A  0020               	movlb	0	; select bank0
  1540  072B  0849               	movf	SendDataFrame@i_319,w
  1541  072C  3E30               	addlw	(low (_CH_5_RAW| 0))& (0+255)
  1542  072D  0086               	movwf	6
  1543  072E  0187               	clrf	7
  1544  072F  0801               	movf	1,w
  1545  0730  246C               	fcall	_EUSART_Write
  1546  0731  0020               	movlb	0	; select bank0
  1547  0732  0849               	movf	SendDataFrame@i_319,w
  1548  0733  3E30               	addlw	(low (_CH_5_RAW| 0))& (0+255)
  1549  0734  0086               	movwf	6
  1550  0735  0187               	clrf	7
  1551  0736  0801               	movf	1,w
  1552  0737  0751               	addwf	SendDataFrame@FrameSum,w
  1553  0738  00D1               	movwf	SendDataFrame@FrameSum
  1554  0739  0852               	movf	SendDataFrame@FrameSum+1,w
  1555  073A  1803               	skipnc
  1556  073B  0A52               	incf	SendDataFrame@FrameSum+1,w
  1557  073C  00D2               	movwf	SendDataFrame@FrameSum+1
  1558  073D  3001               	movlw	1
  1559  073E  07C9               	addwf	SendDataFrame@i_319,f
  1560  073F  3000               	movlw	0
  1561  0740  3DCA               	addwfc	SendDataFrame@i_319+1,f
  1562  0741  084A               	movf	SendDataFrame@i_319+1,w
  1563  0742  3A80               	xorlw	128
  1564  0743  00F6               	movwf	??_SendDataFrame
  1565  0744  3080               	movlw	128
  1566  0745  0276               	subwf	??_SendDataFrame,w
  1567  0746  1D03               	skipz
  1568  0747  2F4A               	goto	u825
  1569  0748  3004               	movlw	4
  1570  0749  0249               	subwf	SendDataFrame@i_319,w
  1571  074A                     u825:	
  1572  074A  1C03               	skipc
  1573  074B  2F2A               	goto	l1338
  1574  074C                     l1346:	
  1575                           
  1576                           ;main.c: 102: }
  1577                           ;main.c: 104: for(int i=0; i<4; i++)
  1578  074C  0020               	movlb	0	; select bank0
  1579  074D  01CB               	clrf	SendDataFrame@i_320
  1580  074E  01CC               	clrf	SendDataFrame@i_320+1
  1581  074F  084C               	movf	SendDataFrame@i_320+1,w
  1582  0750  3A80               	xorlw	128
  1583  0751  00F6               	movwf	??_SendDataFrame
  1584  0752  3080               	movlw	128
  1585  0753  0276               	subwf	??_SendDataFrame,w
  1586  0754  1D03               	skipz
  1587  0755  2F58               	goto	u835
  1588  0756  3004               	movlw	4
  1589  0757  024B               	subwf	SendDataFrame@i_320,w
  1590  0758                     u835:	
  1591  0758  1803               	btfsc	3,0
  1592  0759  2F7C               	goto	l1360
  1593  075A                     l1352:	
  1594                           
  1595                           ;main.c: 105: {
  1596                           ;main.c: 106: EUSART_Write(CH_6_RAW[i]); FrameSum = FrameSum + CH_6_RAW[i];
  1597  075A  0020               	movlb	0	; select bank0
  1598  075B  084B               	movf	SendDataFrame@i_320,w
  1599  075C  3E34               	addlw	(low (_CH_6_RAW| 0))& (0+255)
  1600  075D  0086               	movwf	6
  1601  075E  0187               	clrf	7
  1602  075F  0801               	movf	1,w
  1603  0760  246C               	fcall	_EUSART_Write
  1604  0761  0020               	movlb	0	; select bank0
  1605  0762  084B               	movf	SendDataFrame@i_320,w
  1606  0763  3E34               	addlw	(low (_CH_6_RAW| 0))& (0+255)
  1607  0764  0086               	movwf	6
  1608  0765  0187               	clrf	7
  1609  0766  0801               	movf	1,w
  1610  0767  0751               	addwf	SendDataFrame@FrameSum,w
  1611  0768  00D1               	movwf	SendDataFrame@FrameSum
  1612  0769  0852               	movf	SendDataFrame@FrameSum+1,w
  1613  076A  1803               	skipnc
  1614  076B  0A52               	incf	SendDataFrame@FrameSum+1,w
  1615  076C  00D2               	movwf	SendDataFrame@FrameSum+1
  1616  076D  3001               	movlw	1
  1617  076E  07CB               	addwf	SendDataFrame@i_320,f
  1618  076F  3000               	movlw	0
  1619  0770  3DCC               	addwfc	SendDataFrame@i_320+1,f
  1620  0771  084C               	movf	SendDataFrame@i_320+1,w
  1621  0772  3A80               	xorlw	128
  1622  0773  00F6               	movwf	??_SendDataFrame
  1623  0774  3080               	movlw	128
  1624  0775  0276               	subwf	??_SendDataFrame,w
  1625  0776  1D03               	skipz
  1626  0777  2F7A               	goto	u845
  1627  0778  3004               	movlw	4
  1628  0779  024B               	subwf	SendDataFrame@i_320,w
  1629  077A                     u845:	
  1630  077A  1C03               	skipc
  1631  077B  2F5A               	goto	l1352
  1632  077C                     l1360:	
  1633                           
  1634                           ;main.c: 107: }
  1635                           ;main.c: 108: for(int i=0; i<4; i++)
  1636  077C  0020               	movlb	0	; select bank0
  1637  077D  01CD               	clrf	SendDataFrame@i_321
  1638  077E  01CE               	clrf	SendDataFrame@i_321+1
  1639  077F  084E               	movf	SendDataFrame@i_321+1,w
  1640  0780  3A80               	xorlw	128
  1641  0781  00F6               	movwf	??_SendDataFrame
  1642  0782  3080               	movlw	128
  1643  0783  0276               	subwf	??_SendDataFrame,w
  1644  0784  1D03               	skipz
  1645  0785  2F88               	goto	u855
  1646  0786  3004               	movlw	4
  1647  0787  024D               	subwf	SendDataFrame@i_321,w
  1648  0788                     u855:	
  1649  0788  1803               	btfsc	3,0
  1650  0789  2FAC               	goto	l1374
  1651  078A                     l1366:	
  1652                           
  1653                           ;main.c: 109: {
  1654                           ;main.c: 110: EUSART_Write(CH_7_RAW[i]); FrameSum = FrameSum + CH_7_RAW[i];
  1655  078A  0020               	movlb	0	; select bank0
  1656  078B  084D               	movf	SendDataFrame@i_321,w
  1657  078C  3E38               	addlw	(low (_CH_7_RAW| 0))& (0+255)
  1658  078D  0086               	movwf	6
  1659  078E  0187               	clrf	7
  1660  078F  0801               	movf	1,w
  1661  0790  246C               	fcall	_EUSART_Write
  1662  0791  0020               	movlb	0	; select bank0
  1663  0792  084D               	movf	SendDataFrame@i_321,w
  1664  0793  3E38               	addlw	(low (_CH_7_RAW| 0))& (0+255)
  1665  0794  0086               	movwf	6
  1666  0795  0187               	clrf	7
  1667  0796  0801               	movf	1,w
  1668  0797  0751               	addwf	SendDataFrame@FrameSum,w
  1669  0798  00D1               	movwf	SendDataFrame@FrameSum
  1670  0799  0852               	movf	SendDataFrame@FrameSum+1,w
  1671  079A  1803               	skipnc
  1672  079B  0A52               	incf	SendDataFrame@FrameSum+1,w
  1673  079C  00D2               	movwf	SendDataFrame@FrameSum+1
  1674  079D  3001               	movlw	1
  1675  079E  07CD               	addwf	SendDataFrame@i_321,f
  1676  079F  3000               	movlw	0
  1677  07A0  3DCE               	addwfc	SendDataFrame@i_321+1,f
  1678  07A1  084E               	movf	SendDataFrame@i_321+1,w
  1679  07A2  3A80               	xorlw	128
  1680  07A3  00F6               	movwf	??_SendDataFrame
  1681  07A4  3080               	movlw	128
  1682  07A5  0276               	subwf	??_SendDataFrame,w
  1683  07A6  1D03               	skipz
  1684  07A7  2FAA               	goto	u865
  1685  07A8  3004               	movlw	4
  1686  07A9  024D               	subwf	SendDataFrame@i_321,w
  1687  07AA                     u865:	
  1688  07AA  1C03               	skipc
  1689  07AB  2F8A               	goto	l1366
  1690  07AC                     l1374:	
  1691                           
  1692                           ;main.c: 111: }
  1693                           ;main.c: 113: for(int i=0; i<4; i++)
  1694  07AC  0020               	movlb	0	; select bank0
  1695  07AD  01CF               	clrf	SendDataFrame@i_322
  1696  07AE  01D0               	clrf	SendDataFrame@i_322+1
  1697  07AF  0850               	movf	SendDataFrame@i_322+1,w
  1698  07B0  3A80               	xorlw	128
  1699  07B1  00F6               	movwf	??_SendDataFrame
  1700  07B2  3080               	movlw	128
  1701  07B3  0276               	subwf	??_SendDataFrame,w
  1702  07B4  1D03               	skipz
  1703  07B5  2FB8               	goto	u875
  1704  07B6  3004               	movlw	4
  1705  07B7  024F               	subwf	SendDataFrame@i_322,w
  1706  07B8                     u875:	
  1707  07B8  1803               	btfsc	3,0
  1708  07B9  2FDC               	goto	l1388
  1709  07BA                     l1380:	
  1710                           
  1711                           ;main.c: 114: {
  1712                           ;main.c: 115: EUSART_Write(CH_8_RAW[i]); FrameSum = FrameSum + CH_8_RAW[i];
  1713  07BA  0020               	movlb	0	; select bank0
  1714  07BB  084F               	movf	SendDataFrame@i_322,w
  1715  07BC  3E3C               	addlw	(low (_CH_8_RAW| 0))& (0+255)
  1716  07BD  0086               	movwf	6
  1717  07BE  0187               	clrf	7
  1718  07BF  0801               	movf	1,w
  1719  07C0  246C               	fcall	_EUSART_Write
  1720  07C1  0020               	movlb	0	; select bank0
  1721  07C2  084F               	movf	SendDataFrame@i_322,w
  1722  07C3  3E3C               	addlw	(low (_CH_8_RAW| 0))& (0+255)
  1723  07C4  0086               	movwf	6
  1724  07C5  0187               	clrf	7
  1725  07C6  0801               	movf	1,w
  1726  07C7  0751               	addwf	SendDataFrame@FrameSum,w
  1727  07C8  00D1               	movwf	SendDataFrame@FrameSum
  1728  07C9  0852               	movf	SendDataFrame@FrameSum+1,w
  1729  07CA  1803               	skipnc
  1730  07CB  0A52               	incf	SendDataFrame@FrameSum+1,w
  1731  07CC  00D2               	movwf	SendDataFrame@FrameSum+1
  1732  07CD  3001               	movlw	1
  1733  07CE  07CF               	addwf	SendDataFrame@i_322,f
  1734  07CF  3000               	movlw	0
  1735  07D0  3DD0               	addwfc	SendDataFrame@i_322+1,f
  1736  07D1  0850               	movf	SendDataFrame@i_322+1,w
  1737  07D2  3A80               	xorlw	128
  1738  07D3  00F6               	movwf	??_SendDataFrame
  1739  07D4  3080               	movlw	128
  1740  07D5  0276               	subwf	??_SendDataFrame,w
  1741  07D6  1D03               	skipz
  1742  07D7  2FDA               	goto	u885
  1743  07D8  3004               	movlw	4
  1744  07D9  024F               	subwf	SendDataFrame@i_322,w
  1745  07DA                     u885:	
  1746  07DA  1C03               	skipc
  1747  07DB  2FBA               	goto	l1380
  1748  07DC                     l1388:	
  1749                           
  1750                           ;main.c: 116: }
  1751                           ;main.c: 118: Checksum = FrameSum%255;
  1752  07DC  30FF               	movlw	255
  1753  07DD  00F0               	movwf	___lwmod@divisor
  1754  07DE  3000               	movlw	0
  1755  07DF  00F1               	movwf	___lwmod@divisor+1
  1756  07E0  0020               	movlb	0	; select bank0
  1757  07E1  0852               	movf	SendDataFrame@FrameSum+1,w
  1758  07E2  00F3               	movwf	___lwmod@dividend+1
  1759  07E3  0851               	movf	SendDataFrame@FrameSum,w
  1760  07E4  00F2               	movwf	___lwmod@dividend
  1761  07E5  24CD               	fcall	___lwmod
  1762  07E6  0870               	movf	?___lwmod,w
  1763  07E7  00F6               	movwf	??_SendDataFrame
  1764  07E8  0876               	movf	??_SendDataFrame,w
  1765  07E9  0020               	movlb	0	; select bank0
  1766  07EA  00C0               	movwf	SendDataFrame@Checksum
  1767                           
  1768                           ;main.c: 119: EUSART_Write(Checksum);
  1769  07EB  0840               	movf	SendDataFrame@Checksum,w
  1770  07EC  246C               	fcall	_EUSART_Write
  1771                           
  1772                           ;main.c: 121: EUSART_Write(0x0D);
  1773  07ED  300D               	movlw	13
  1774  07EE  246C               	fcall	_EUSART_Write
  1775                           
  1776                           ;main.c: 122: EUSART_Write(0x0A);
  1777  07EF  300A               	movlw	10
  1778  07F0  246C               	fcall	_EUSART_Write
  1779  07F1  0008               	return
  1780  07F2                     __end_of_SendDataFrame:	
  1781                           
  1782                           	psect	text2
  1783  04CD                     __ptext2:	
  1784 ;; *************** function ___lwmod *****************
  1785 ;; Defined at:
  1786 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;  divisor         2    0[COMMON] unsigned int 
  1789 ;;  dividend        2    2[COMMON] unsigned int 
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;  counter         1    5[COMMON] unsigned char 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  2    0[COMMON] unsigned int 
  1794 ;; Registers used:
  1795 ;;		wreg, status,2, status,0
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMMON   BANK0   BANK1
  1801 ;;      Params:         4       0       0
  1802 ;;      Locals:         1       0       0
  1803 ;;      Temps:          1       0       0
  1804 ;;      Totals:         6       0       0
  1805 ;;Total ram usage:        6 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; This function calls:
  1808 ;;		Nothing
  1809 ;; This function is called by:
  1810 ;;		_SendDataFrame
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           
  1815                           ;psect for function ___lwmod
  1816  04CD                     ___lwmod:	
  1817                           
  1818                           ;incstack = 0
  1819                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1820  04CD  0870               	movf	___lwmod@divisor,w
  1821  04CE  0471               	iorwf	___lwmod@divisor+1,w
  1822  04CF  1903               	btfsc	3,2
  1823  04D0  2CF4               	goto	l1266
  1824  04D1  01F5               	clrf	___lwmod@counter
  1825  04D2  0AF5               	incf	___lwmod@counter,f
  1826  04D3                     l1256:	
  1827  04D3  1BF1               	btfsc	___lwmod@divisor+1,7
  1828  04D4  2CDF               	goto	l1258
  1829  04D5  3001               	movlw	1
  1830  04D6                     u685:	
  1831  04D6  35F0               	lslf	___lwmod@divisor,f
  1832  04D7  0DF1               	rlf	___lwmod@divisor+1,f
  1833  04D8  0B89               	decfsz	9,f
  1834  04D9  2CD6               	goto	u685
  1835  04DA  3001               	movlw	1
  1836  04DB  00F4               	movwf	??___lwmod
  1837  04DC  0874               	movf	??___lwmod,w
  1838  04DD  07F5               	addwf	___lwmod@counter,f
  1839  04DE  2CD3               	goto	l1256
  1840  04DF                     l1258:	
  1841  04DF  0871               	movf	___lwmod@divisor+1,w
  1842  04E0  0273               	subwf	___lwmod@dividend+1,w
  1843  04E1  1D03               	skipz
  1844  04E2  2CE5               	goto	u705
  1845  04E3  0870               	movf	___lwmod@divisor,w
  1846  04E4  0272               	subwf	___lwmod@dividend,w
  1847  04E5                     u705:	
  1848  04E5  1C03               	skipc
  1849  04E6  2CEB               	goto	l1262
  1850  04E7  0870               	movf	___lwmod@divisor,w
  1851  04E8  02F2               	subwf	___lwmod@dividend,f
  1852  04E9  0871               	movf	___lwmod@divisor+1,w
  1853  04EA  3BF3               	subwfb	___lwmod@dividend+1,f
  1854  04EB                     l1262:	
  1855  04EB  3001               	movlw	1
  1856  04EC                     u715:	
  1857  04EC  36F1               	lsrf	___lwmod@divisor+1,f
  1858  04ED  0CF0               	rrf	___lwmod@divisor,f
  1859  04EE  0B89               	decfsz	9,f
  1860  04EF  2CEC               	goto	u715
  1861  04F0  3001               	movlw	1
  1862  04F1  02F5               	subwf	___lwmod@counter,f
  1863  04F2  1D03               	btfss	3,2
  1864  04F3  2CDF               	goto	l1258
  1865  04F4                     l1266:	
  1866  04F4  0873               	movf	___lwmod@dividend+1,w
  1867  04F5  00F1               	movwf	?___lwmod+1
  1868  04F6  0872               	movf	___lwmod@dividend,w
  1869  04F7  00F0               	movwf	?___lwmod
  1870  04F8  0008               	return
  1871  04F9                     __end_of___lwmod:	
  1872                           
  1873                           	psect	text3
  1874  046C                     __ptext3:	
  1875 ;; *************** function _EUSART_Write *****************
  1876 ;; Defined at:
  1877 ;;		line 96 in file "mcc_generated_files/eusart.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;  txData          1    wreg     unsigned char 
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;  txData          1    0[COMMON] unsigned char 
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  1    wreg      void 
  1884 ;; Registers used:
  1885 ;;		wreg
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMMON   BANK0   BANK1
  1891 ;;      Params:         0       0       0
  1892 ;;      Locals:         1       0       0
  1893 ;;      Temps:          0       0       0
  1894 ;;      Totals:         1       0       0
  1895 ;;Total ram usage:        1 bytes
  1896 ;; Hardware stack levels used:    1
  1897 ;; This function calls:
  1898 ;;		Nothing
  1899 ;; This function is called by:
  1900 ;;		_SendDataFrame
  1901 ;;		_SendData
  1902 ;; This function uses a non-reentrant model
  1903 ;;
  1904                           
  1905                           
  1906                           ;psect for function _EUSART_Write
  1907  046C                     _EUSART_Write:	
  1908                           
  1909                           ;incstack = 0
  1910                           ; Regs used in _EUSART_Write: [wreg]
  1911                           ;EUSART_Write@txData stored from wreg
  1912  046C  00F0               	movwf	EUSART_Write@txData
  1913  046D                     l99:	
  1914                           ;eusart.c: 99: {
  1915                           
  1916                           ;eusart.c: 98: while(0 == PIR1bits.TXIF)
  1917                           
  1918  046D  0020               	movlb	0	; select bank0
  1919  046E  1E11               	btfss	17,4	;volatile
  1920  046F  2C6D               	goto	l99
  1921                           
  1922                           ;eusart.c: 100: }
  1923                           ;eusart.c: 102: TXREG = txData;
  1924  0470  0870               	movf	EUSART_Write@txData,w
  1925  0471  0023               	movlb	3	; select bank3
  1926  0472  009A               	movwf	26	;volatile
  1927  0473  0008               	return
  1928  0474                     __end_of_EUSART_Write:	
  1929                           
  1930                           	psect	text4
  1931  0460                     __ptext4:	
  1932 ;; *************** function _SYSTEM_Initialize *****************
  1933 ;; Defined at:
  1934 ;;		line 69 in file "mcc_generated_files/mcc.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, status,0, pclath, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMMON   BANK0   BANK1
  1948 ;;      Params:         0       0       0
  1949 ;;      Locals:         0       0       0
  1950 ;;      Temps:          0       0       0
  1951 ;;      Totals:         0       0       0
  1952 ;;Total ram usage:        0 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    1
  1955 ;; This function calls:
  1956 ;;		_EUSART_Initialize
  1957 ;;		_OSCILLATOR_Initialize
  1958 ;;		_PIN_MANAGER_Initialize
  1959 ;;		_SPI_Initialize
  1960 ;;		_WDT_Initialize
  1961 ;; This function is called by:
  1962 ;;		_main
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           
  1967                           ;psect for function _SYSTEM_Initialize
  1968  0460                     _SYSTEM_Initialize:	
  1969                           
  1970                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  1971                           
  1972                           ;incstack = 0
  1973                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1974  0460  2492               	fcall	_PIN_MANAGER_Initialize
  1975                           
  1976                           ;mcc.c: 73: OSCILLATOR_Initialize();
  1977  0461  2452               	fcall	_OSCILLATOR_Initialize
  1978                           
  1979                           ;mcc.c: 74: WDT_Initialize();
  1980  0462  2456               	fcall	_WDT_Initialize
  1981                           
  1982                           ;mcc.c: 75: SPI_Initialize();
  1983  0463  245A               	fcall	_SPI_Initialize
  1984                           
  1985                           ;mcc.c: 76: EUSART_Initialize();
  1986  0464  2487               	fcall	_EUSART_Initialize
  1987  0465  0008               	return
  1988  0466                     __end_of_SYSTEM_Initialize:	
  1989                           
  1990                           	psect	text5
  1991  0456                     __ptext5:	
  1992 ;; *************** function _WDT_Initialize *****************
  1993 ;; Defined at:
  1994 ;;		line 87 in file "mcc_generated_files/mcc.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;		None
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;		None
  1999 ;; Return value:  Size  Location     Type
  2000 ;;                  1    wreg      void 
  2001 ;; Registers used:
  2002 ;;		wreg
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMMON   BANK0   BANK1
  2008 ;;      Params:         0       0       0
  2009 ;;      Locals:         0       0       0
  2010 ;;      Temps:          0       0       0
  2011 ;;      Totals:         0       0       0
  2012 ;;Total ram usage:        0 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; This function calls:
  2015 ;;		Nothing
  2016 ;; This function is called by:
  2017 ;;		_SYSTEM_Initialize
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           
  2022                           ;psect for function _WDT_Initialize
  2023  0456                     _WDT_Initialize:	
  2024                           
  2025                           ;mcc.c: 90: WDTCON = 0x16;
  2026                           
  2027                           ;incstack = 0
  2028                           ; Regs used in _WDT_Initialize: [wreg]
  2029  0456  3016               	movlw	22
  2030  0457  0021               	movlb	1	; select bank1
  2031  0458  0097               	movwf	23	;volatile
  2032  0459  0008               	return
  2033  045A                     __end_of_WDT_Initialize:	
  2034                           
  2035                           	psect	text6
  2036  045A                     __ptext6:	
  2037 ;; *************** function _SPI_Initialize *****************
  2038 ;; Defined at:
  2039 ;;		line 63 in file "mcc_generated_files/spi.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;		None
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;		None
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  1    wreg      void 
  2046 ;; Registers used:
  2047 ;;		wreg, status,2
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMMON   BANK0   BANK1
  2053 ;;      Params:         0       0       0
  2054 ;;      Locals:         0       0       0
  2055 ;;      Temps:          0       0       0
  2056 ;;      Totals:         0       0       0
  2057 ;;Total ram usage:        0 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; This function calls:
  2060 ;;		Nothing
  2061 ;; This function is called by:
  2062 ;;		_SYSTEM_Initialize
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           
  2067                           ;psect for function _SPI_Initialize
  2068  045A                     _SPI_Initialize:	
  2069                           
  2070                           ;spi.c: 68: SSP1STAT = 0x00;
  2071                           
  2072                           ;incstack = 0
  2073                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  2074  045A  0024               	movlb	4	; select bank4
  2075  045B  0194               	clrf	20	;volatile
  2076                           
  2077                           ;spi.c: 71: SSP1CON1 = 0x21;
  2078  045C  3021               	movlw	33
  2079  045D  0095               	movwf	21	;volatile
  2080                           
  2081                           ;spi.c: 74: SSP1ADD = 0x00;
  2082  045E  0192               	clrf	18	;volatile
  2083  045F  0008               	return
  2084  0460                     __end_of_SPI_Initialize:	
  2085                           
  2086                           	psect	text7
  2087  0492                     __ptext7:	
  2088 ;; *************** function _PIN_MANAGER_Initialize *****************
  2089 ;; Defined at:
  2090 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;		None
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;		None
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  1    wreg      void 
  2097 ;; Registers used:
  2098 ;;		wreg, status,2
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMMON   BANK0   BANK1
  2104 ;;      Params:         0       0       0
  2105 ;;      Locals:         0       0       0
  2106 ;;      Temps:          0       0       0
  2107 ;;      Totals:         0       0       0
  2108 ;;Total ram usage:        0 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; This function calls:
  2111 ;;		Nothing
  2112 ;; This function is called by:
  2113 ;;		_SYSTEM_Initialize
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           
  2118                           ;psect for function _PIN_MANAGER_Initialize
  2119  0492                     _PIN_MANAGER_Initialize:	
  2120                           
  2121                           ;pin_manager.c: 56: LATA = 0xFF;
  2122                           
  2123                           ;incstack = 0
  2124                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2125  0492  30FF               	movlw	255
  2126  0493  0022               	movlb	2	; select bank2
  2127  0494  008C               	movwf	12	;volatile
  2128                           
  2129                           ;pin_manager.c: 57: LATB = 0x00;
  2130  0495  018D               	clrf	13	;volatile
  2131                           
  2132                           ;pin_manager.c: 58: LATC = 0x00;
  2133  0496  018E               	clrf	14	;volatile
  2134                           
  2135                           ;pin_manager.c: 63: TRISA = 0x00;
  2136  0497  0021               	movlb	1	; select bank1
  2137  0498  018C               	clrf	12	;volatile
  2138                           
  2139                           ;pin_manager.c: 64: TRISB = 0xC7;
  2140  0499  30C7               	movlw	199
  2141  049A  008D               	movwf	13	;volatile
  2142                           
  2143                           ;pin_manager.c: 65: TRISC = 0x97;
  2144  049B  3097               	movlw	151
  2145  049C  008E               	movwf	14	;volatile
  2146                           
  2147                           ;pin_manager.c: 70: ANSELC = 0x00;
  2148  049D  0023               	movlb	3	; select bank3
  2149  049E  018E               	clrf	14	;volatile
  2150                           
  2151                           ;pin_manager.c: 71: ANSELB = 0x3F;
  2152  049F  303F               	movlw	63
  2153  04A0  008D               	movwf	13	;volatile
  2154                           
  2155                           ;pin_manager.c: 72: ANSELA = 0x2F;
  2156  04A1  302F               	movlw	47
  2157  04A2  008C               	movwf	12	;volatile
  2158                           
  2159                           ;pin_manager.c: 77: WPUE = 0x08;
  2160  04A3  3008               	movlw	8
  2161  04A4  0024               	movlb	4	; select bank4
  2162  04A5  0090               	movwf	16	;volatile
  2163                           
  2164                           ;pin_manager.c: 78: WPUB = 0xFF;
  2165  04A6  30FF               	movlw	255
  2166  04A7  008D               	movwf	13	;volatile
  2167                           
  2168                           ;pin_manager.c: 79: OPTION_REGbits.nWPUEN = 0;
  2169  04A8  0021               	movlb	1	; select bank1
  2170  04A9  1395               	bcf	21,7	;volatile
  2171                           
  2172                           ;pin_manager.c: 85: APFCON = 0x00;
  2173  04AA  0022               	movlb	2	; select bank2
  2174  04AB  019D               	clrf	29	;volatile
  2175  04AC  0008               	return
  2176  04AD                     __end_of_PIN_MANAGER_Initialize:	
  2177                           
  2178                           	psect	text8
  2179  0452                     __ptext8:	
  2180 ;; *************** function _OSCILLATOR_Initialize *****************
  2181 ;; Defined at:
  2182 ;;		line 79 in file "mcc_generated_files/mcc.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;		None
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;		None
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  1    wreg      void 
  2189 ;; Registers used:
  2190 ;;		wreg
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMMON   BANK0   BANK1
  2196 ;;      Params:         0       0       0
  2197 ;;      Locals:         0       0       0
  2198 ;;      Temps:          0       0       0
  2199 ;;      Totals:         0       0       0
  2200 ;;Total ram usage:        0 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; This function calls:
  2203 ;;		Nothing
  2204 ;; This function is called by:
  2205 ;;		_SYSTEM_Initialize
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           
  2210                           ;psect for function _OSCILLATOR_Initialize
  2211  0452                     _OSCILLATOR_Initialize:	
  2212                           
  2213                           ;mcc.c: 82: OSCCON = 0x78;
  2214                           
  2215                           ;incstack = 0
  2216                           ; Regs used in _OSCILLATOR_Initialize: [wreg]
  2217  0452  3078               	movlw	120
  2218  0453  0021               	movlb	1	; select bank1
  2219  0454  0099               	movwf	25	;volatile
  2220  0455  0008               	return
  2221  0456                     __end_of_OSCILLATOR_Initialize:	
  2222                           
  2223                           	psect	text9
  2224  0487                     __ptext9:	
  2225 ;; *************** function _EUSART_Initialize *****************
  2226 ;; Defined at:
  2227 ;;		line 55 in file "mcc_generated_files/eusart.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;		None
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;		None
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg, status,2
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMMON   BANK0   BANK1
  2241 ;;      Params:         0       0       0
  2242 ;;      Locals:         0       0       0
  2243 ;;      Temps:          0       0       0
  2244 ;;      Totals:         0       0       0
  2245 ;;Total ram usage:        0 bytes
  2246 ;; Hardware stack levels used:    1
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_SYSTEM_Initialize
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           
  2255                           ;psect for function _EUSART_Initialize
  2256  0487                     _EUSART_Initialize:	
  2257                           
  2258                           ;eusart.c: 60: BAUDCON = 0x08;
  2259                           
  2260                           ;incstack = 0
  2261                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  2262  0487  3008               	movlw	8
  2263  0488  0023               	movlb	3	; select bank3
  2264  0489  009F               	movwf	31	;volatile
  2265                           
  2266                           ;eusart.c: 63: RCSTA = 0x90;
  2267  048A  3090               	movlw	144
  2268  048B  009D               	movwf	29	;volatile
  2269                           
  2270                           ;eusart.c: 66: TXSTA = 0x24;
  2271  048C  3024               	movlw	36
  2272  048D  009E               	movwf	30	;volatile
  2273                           
  2274                           ;eusart.c: 69: SPBRGL = 0x22;
  2275  048E  3022               	movlw	34
  2276  048F  009B               	movwf	27	;volatile
  2277                           
  2278                           ;eusart.c: 72: SPBRGH = 0x00;
  2279  0490  019C               	clrf	28	;volatile
  2280  0491  0008               	return
  2281  0492                     __end_of_EUSART_Initialize:	
  2282                           
  2283                           	psect	text10
  2284  04F9                     __ptext10:	
  2285 ;; *************** function _GetData *****************
  2286 ;; Defined at:
  2287 ;;		line 233 in file "main.c"
  2288 ;; Parameters:    Size  Location     Type
  2289 ;;  ChannelNumbe    1    wreg     unsigned char 
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;  ChannelNumbe    1    5[COMMON] unsigned char 
  2292 ;;  ArrayPointer    1    4[COMMON] PTR unsigned char 
  2293 ;;		 -> CH_8_RAW(4), CH_7_RAW(4), CH_6_RAW(4), CH_5_RAW(4), 
  2294 ;;		 -> CH_4_RAW(4), CH_3_RAW(4), CH_2_RAW(4), CH_1_RAW(4), 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      void 
  2297 ;; Registers used:
  2298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMMON   BANK0   BANK1
  2304 ;;      Params:         0       0       0
  2305 ;;      Locals:         2       0       0
  2306 ;;      Temps:          2       0       0
  2307 ;;      Totals:         4       0       0
  2308 ;;Total ram usage:        4 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    1
  2311 ;; This function calls:
  2312 ;;		_SPI_Exchange8bit
  2313 ;;		_SetChannel
  2314 ;; This function is called by:
  2315 ;;		_main
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           
  2320                           ;psect for function _GetData
  2321  04F9                     _GetData:	
  2322                           
  2323                           ;incstack = 0
  2324                           ; Regs used in _GetData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2325                           ;GetData@ChannelNumber stored from wreg
  2326  04F9  00F5               	movwf	GetData@ChannelNumber
  2327                           
  2328                           ;main.c: 235: char *ArrayPointer;
  2329                           ;main.c: 237: if(ChannelNumber == 1) ArrayPointer = &CH_1_RAW;
  2330  04FA  0375               	decf	GetData@ChannelNumber,w
  2331  04FB  1D03               	btfss	3,2
  2332  04FC  2D01               	goto	l1394
  2333  04FD  3020               	movlw	(low (_CH_1_RAW| 0))& (0+255)
  2334  04FE  00F2               	movwf	??_GetData
  2335  04FF  0872               	movf	??_GetData,w
  2336  0500  00F4               	movwf	GetData@ArrayPointer
  2337  0501                     l1394:	
  2338                           
  2339                           ;main.c: 238: if(ChannelNumber == 2) ArrayPointer = &CH_2_RAW;
  2340  0501  3002               	movlw	2
  2341  0502  0675               	xorwf	GetData@ChannelNumber,w
  2342  0503  1D03               	btfss	3,2
  2343  0504  2D09               	goto	l1398
  2344  0505  3024               	movlw	(low (_CH_2_RAW| 0))& (0+255)
  2345  0506  00F2               	movwf	??_GetData
  2346  0507  0872               	movf	??_GetData,w
  2347  0508  00F4               	movwf	GetData@ArrayPointer
  2348  0509                     l1398:	
  2349                           
  2350                           ;main.c: 239: if(ChannelNumber == 3) ArrayPointer = &CH_3_RAW;
  2351  0509  3003               	movlw	3
  2352  050A  0675               	xorwf	GetData@ChannelNumber,w
  2353  050B  1D03               	btfss	3,2
  2354  050C  2D11               	goto	l1402
  2355  050D  3028               	movlw	(low (_CH_3_RAW| 0))& (0+255)
  2356  050E  00F2               	movwf	??_GetData
  2357  050F  0872               	movf	??_GetData,w
  2358  0510  00F4               	movwf	GetData@ArrayPointer
  2359  0511                     l1402:	
  2360                           
  2361                           ;main.c: 240: if(ChannelNumber == 4) ArrayPointer = &CH_4_RAW;
  2362  0511  3004               	movlw	4
  2363  0512  0675               	xorwf	GetData@ChannelNumber,w
  2364  0513  1D03               	btfss	3,2
  2365  0514  2D19               	goto	l1406
  2366  0515  302C               	movlw	(low (_CH_4_RAW| 0))& (0+255)
  2367  0516  00F2               	movwf	??_GetData
  2368  0517  0872               	movf	??_GetData,w
  2369  0518  00F4               	movwf	GetData@ArrayPointer
  2370  0519                     l1406:	
  2371                           
  2372                           ;main.c: 241: if(ChannelNumber == 5) ArrayPointer = &CH_5_RAW;
  2373  0519  3005               	movlw	5
  2374  051A  0675               	xorwf	GetData@ChannelNumber,w
  2375  051B  1D03               	btfss	3,2
  2376  051C  2D21               	goto	l1410
  2377  051D  3030               	movlw	(low (_CH_5_RAW| 0))& (0+255)
  2378  051E  00F2               	movwf	??_GetData
  2379  051F  0872               	movf	??_GetData,w
  2380  0520  00F4               	movwf	GetData@ArrayPointer
  2381  0521                     l1410:	
  2382                           
  2383                           ;main.c: 242: if(ChannelNumber == 6) ArrayPointer = &CH_6_RAW;
  2384  0521  3006               	movlw	6
  2385  0522  0675               	xorwf	GetData@ChannelNumber,w
  2386  0523  1D03               	btfss	3,2
  2387  0524  2D29               	goto	l1414
  2388  0525  3034               	movlw	(low (_CH_6_RAW| 0))& (0+255)
  2389  0526  00F2               	movwf	??_GetData
  2390  0527  0872               	movf	??_GetData,w
  2391  0528  00F4               	movwf	GetData@ArrayPointer
  2392  0529                     l1414:	
  2393                           
  2394                           ;main.c: 243: if(ChannelNumber == 7) ArrayPointer = &CH_7_RAW;
  2395  0529  3007               	movlw	7
  2396  052A  0675               	xorwf	GetData@ChannelNumber,w
  2397  052B  1D03               	btfss	3,2
  2398  052C  2D31               	goto	l1418
  2399  052D  3038               	movlw	(low (_CH_7_RAW| 0))& (0+255)
  2400  052E  00F2               	movwf	??_GetData
  2401  052F  0872               	movf	??_GetData,w
  2402  0530  00F4               	movwf	GetData@ArrayPointer
  2403  0531                     l1418:	
  2404                           
  2405                           ;main.c: 244: if(ChannelNumber == 8) ArrayPointer = &CH_8_RAW;
  2406  0531  3008               	movlw	8
  2407  0532  0675               	xorwf	GetData@ChannelNumber,w
  2408  0533  1D03               	btfss	3,2
  2409  0534  2D39               	goto	l1422
  2410  0535  303C               	movlw	(low (_CH_8_RAW| 0))& (0+255)
  2411  0536  00F2               	movwf	??_GetData
  2412  0537  0872               	movf	??_GetData,w
  2413  0538  00F4               	movwf	GetData@ArrayPointer
  2414  0539                     l1422:	
  2415                           
  2416                           ;main.c: 246: SetChannel(ChannelNumber);
  2417  0539  0875               	movf	GetData@ChannelNumber,w
  2418  053A  00F2               	movwf	??_GetData
  2419  053B  01F3               	clrf	??_GetData+1
  2420  053C  0872               	movf	??_GetData,w
  2421  053D  00F0               	movwf	SetChannel@ChannelNumber
  2422  053E  0873               	movf	??_GetData+1,w
  2423  053F  00F1               	movwf	SetChannel@ChannelNumber+1
  2424  0540  25DB               	fcall	_SetChannel
  2425                           
  2426                           ;main.c: 248: *(ArrayPointer+0) = SPI_Exchange8bit(0);
  2427  0541  3000               	movlw	0
  2428  0542  2474               	fcall	_SPI_Exchange8bit
  2429  0543  00F2               	movwf	??_GetData
  2430  0544  0874               	movf	GetData@ArrayPointer,w
  2431  0545  0086               	movwf	6
  2432  0546  0187               	clrf	7
  2433  0547  0872               	movf	??_GetData,w
  2434  0548  0081               	movwf	1
  2435                           
  2436                           ;main.c: 249: *(ArrayPointer+1) = SPI_Exchange8bit(0);
  2437  0549  3000               	movlw	0
  2438  054A  2474               	fcall	_SPI_Exchange8bit
  2439  054B  00F2               	movwf	??_GetData
  2440  054C  0A74               	incf	GetData@ArrayPointer,w
  2441  054D  0086               	movwf	6
  2442  054E  0187               	clrf	7
  2443  054F  0872               	movf	??_GetData,w
  2444  0550  0081               	movwf	1
  2445                           
  2446                           ;main.c: 250: *(ArrayPointer+2) = SPI_Exchange8bit(0);
  2447  0551  3000               	movlw	0
  2448  0552  2474               	fcall	_SPI_Exchange8bit
  2449  0553  00F2               	movwf	??_GetData
  2450  0554  0874               	movf	GetData@ArrayPointer,w
  2451  0555  3E02               	addlw	2
  2452  0556  0086               	movwf	6
  2453  0557  0187               	clrf	7
  2454  0558  0872               	movf	??_GetData,w
  2455  0559  0081               	movwf	1
  2456                           
  2457                           ;main.c: 251: *(ArrayPointer+3) = SPI_Exchange8bit(0);
  2458  055A  3000               	movlw	0
  2459  055B  2474               	fcall	_SPI_Exchange8bit
  2460  055C  00F2               	movwf	??_GetData
  2461  055D  0874               	movf	GetData@ArrayPointer,w
  2462  055E  3E03               	addlw	3
  2463  055F  0086               	movwf	6
  2464  0560  0187               	clrf	7
  2465  0561  0872               	movf	??_GetData,w
  2466  0562  0081               	movwf	1
  2467                           
  2468                           ;main.c: 253: SetChannel(0);
  2469  0563  3000               	movlw	0
  2470  0564  00F0               	movwf	SetChannel@ChannelNumber
  2471  0565  00F1               	movwf	SetChannel@ChannelNumber+1
  2472  0566  25DB               	fcall	_SetChannel
  2473  0567  0008               	return
  2474  0568                     __end_of_GetData:	
  2475                           
  2476                           	psect	text11
  2477  05DB                     __ptext11:	
  2478 ;; *************** function _SetChannel *****************
  2479 ;; Defined at:
  2480 ;;		line 125 in file "main.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;  ChannelNumbe    2    0[COMMON] int 
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;		None
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  1    wreg      void 
  2487 ;; Registers used:
  2488 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMMON   BANK0   BANK1
  2494 ;;      Params:         2       0       0
  2495 ;;      Locals:         0       0       0
  2496 ;;      Temps:          0       0       0
  2497 ;;      Totals:         2       0       0
  2498 ;;Total ram usage:        2 bytes
  2499 ;; Hardware stack levels used:    1
  2500 ;; This function calls:
  2501 ;;		Nothing
  2502 ;; This function is called by:
  2503 ;;		_GetData
  2504 ;;		_main
  2505 ;; This function uses a non-reentrant model
  2506 ;;
  2507                           
  2508                           
  2509                           ;psect for function _SetChannel
  2510  05DB                     _SetChannel:	
  2511                           
  2512                           ;main.c: 126: switch (ChannelNumber){
  2513                           
  2514                           ;incstack = 0
  2515                           ; Regs used in _SetChannel: [wreg-fsr0h+status,2+status,0]
  2516  05DB  2E40               	goto	l1238
  2517  05DC                     l197:	
  2518                           ;main.c: 128: do { LATAbits.LATA0 = 1; } while(0);
  2519                           
  2520                           ;main.c: 127: case 0:
  2521                           
  2522  05DC  0022               	movlb	2	; select bank2
  2523  05DD  140C               	bsf	12,0	;volatile
  2524                           
  2525                           ;main.c: 129: do { LATAbits.LATA1 = 1; } while(0);
  2526  05DE  148C               	bsf	12,1	;volatile
  2527                           
  2528                           ;main.c: 130: do { LATAbits.LATA2 = 1; } while(0);
  2529  05DF  150C               	bsf	12,2	;volatile
  2530                           
  2531                           ;main.c: 131: do { LATAbits.LATA3 = 1; } while(0);
  2532  05E0  158C               	bsf	12,3	;volatile
  2533                           
  2534                           ;main.c: 132: do { LATAbits.LATA4 = 1; } while(0);
  2535  05E1  160C               	bsf	12,4	;volatile
  2536                           
  2537                           ;main.c: 133: do { LATAbits.LATA5 = 1; } while(0);
  2538  05E2  168C               	bsf	12,5	;volatile
  2539                           
  2540                           ;main.c: 134: do { LATAbits.LATA7 = 1; } while(0);
  2541  05E3  178C               	bsf	12,7	;volatile
  2542                           
  2543                           ;main.c: 135: do { LATAbits.LATA6 = 1; } while(0);
  2544  05E4  170C               	bsf	12,6	;volatile
  2545                           
  2546                           ;main.c: 136: break;
  2547  05E5  0008               	return
  2548  05E6                     l215:	
  2549                           ;main.c: 138: do { LATAbits.LATA0 = 0; } while(0);
  2550                           
  2551                           ;main.c: 137: case 1:
  2552                           
  2553  05E6  0022               	movlb	2	; select bank2
  2554  05E7  100C               	bcf	12,0	;volatile
  2555                           
  2556                           ;main.c: 139: do { LATAbits.LATA1 = 1; } while(0);
  2557  05E8  148C               	bsf	12,1	;volatile
  2558                           
  2559                           ;main.c: 140: do { LATAbits.LATA2 = 1; } while(0);
  2560  05E9  150C               	bsf	12,2	;volatile
  2561                           
  2562                           ;main.c: 141: do { LATAbits.LATA3 = 1; } while(0);
  2563  05EA  158C               	bsf	12,3	;volatile
  2564                           
  2565                           ;main.c: 142: do { LATAbits.LATA4 = 1; } while(0);
  2566  05EB  160C               	bsf	12,4	;volatile
  2567                           
  2568                           ;main.c: 143: do { LATAbits.LATA5 = 1; } while(0);
  2569  05EC  168C               	bsf	12,5	;volatile
  2570                           
  2571                           ;main.c: 144: do { LATAbits.LATA7 = 1; } while(0);
  2572  05ED  178C               	bsf	12,7	;volatile
  2573                           
  2574                           ;main.c: 145: do { LATAbits.LATA6 = 1; } while(0);
  2575  05EE  170C               	bsf	12,6	;volatile
  2576                           
  2577                           ;main.c: 146: break;
  2578  05EF  0008               	return
  2579  05F0                     l232:	
  2580                           ;main.c: 148: do { LATAbits.LATA0 = 1; } while(0);
  2581                           
  2582                           ;main.c: 147: case 2:
  2583                           
  2584  05F0  0022               	movlb	2	; select bank2
  2585  05F1  140C               	bsf	12,0	;volatile
  2586                           
  2587                           ;main.c: 149: do { LATAbits.LATA1 = 0; } while(0);
  2588  05F2  108C               	bcf	12,1	;volatile
  2589                           
  2590                           ;main.c: 150: do { LATAbits.LATA2 = 1; } while(0);
  2591  05F3  150C               	bsf	12,2	;volatile
  2592                           
  2593                           ;main.c: 151: do { LATAbits.LATA3 = 1; } while(0);
  2594  05F4  158C               	bsf	12,3	;volatile
  2595                           
  2596                           ;main.c: 152: do { LATAbits.LATA4 = 1; } while(0);
  2597  05F5  160C               	bsf	12,4	;volatile
  2598                           
  2599                           ;main.c: 153: do { LATAbits.LATA5 = 1; } while(0);
  2600  05F6  168C               	bsf	12,5	;volatile
  2601                           
  2602                           ;main.c: 154: do { LATAbits.LATA7 = 1; } while(0);
  2603  05F7  178C               	bsf	12,7	;volatile
  2604                           
  2605                           ;main.c: 155: do { LATAbits.LATA6 = 1; } while(0);
  2606  05F8  170C               	bsf	12,6	;volatile
  2607                           
  2608                           ;main.c: 156: break;
  2609  05F9  0008               	return
  2610  05FA                     l249:	
  2611                           ;main.c: 158: do { LATAbits.LATA0 = 1; } while(0);
  2612                           
  2613                           ;main.c: 157: case 3:
  2614                           
  2615  05FA  0022               	movlb	2	; select bank2
  2616  05FB  140C               	bsf	12,0	;volatile
  2617                           
  2618                           ;main.c: 159: do { LATAbits.LATA1 = 1; } while(0);
  2619  05FC  148C               	bsf	12,1	;volatile
  2620                           
  2621                           ;main.c: 160: do { LATAbits.LATA2 = 0; } while(0);
  2622  05FD  110C               	bcf	12,2	;volatile
  2623                           
  2624                           ;main.c: 161: do { LATAbits.LATA3 = 1; } while(0);
  2625  05FE  158C               	bsf	12,3	;volatile
  2626                           
  2627                           ;main.c: 162: do { LATAbits.LATA4 = 1; } while(0);
  2628  05FF  160C               	bsf	12,4	;volatile
  2629                           
  2630                           ;main.c: 163: do { LATAbits.LATA5 = 1; } while(0);
  2631  0600  168C               	bsf	12,5	;volatile
  2632                           
  2633                           ;main.c: 164: do { LATAbits.LATA7 = 1; } while(0);
  2634  0601  178C               	bsf	12,7	;volatile
  2635                           
  2636                           ;main.c: 165: do { LATAbits.LATA6 = 1; } while(0);
  2637  0602  170C               	bsf	12,6	;volatile
  2638                           
  2639                           ;main.c: 166: break;
  2640  0603  0008               	return
  2641  0604                     l266:	
  2642                           ;main.c: 168: do { LATAbits.LATA0 = 1; } while(0);
  2643                           
  2644                           ;main.c: 167: case 4:
  2645                           
  2646  0604  0022               	movlb	2	; select bank2
  2647  0605  140C               	bsf	12,0	;volatile
  2648                           
  2649                           ;main.c: 169: do { LATAbits.LATA1 = 1; } while(0);
  2650  0606  148C               	bsf	12,1	;volatile
  2651                           
  2652                           ;main.c: 170: do { LATAbits.LATA2 = 1; } while(0);
  2653  0607  150C               	bsf	12,2	;volatile
  2654                           
  2655                           ;main.c: 171: do { LATAbits.LATA3 = 0; } while(0);
  2656  0608  118C               	bcf	12,3	;volatile
  2657                           
  2658                           ;main.c: 172: do { LATAbits.LATA4 = 1; } while(0);
  2659  0609  160C               	bsf	12,4	;volatile
  2660                           
  2661                           ;main.c: 173: do { LATAbits.LATA5 = 1; } while(0);
  2662  060A  168C               	bsf	12,5	;volatile
  2663                           
  2664                           ;main.c: 174: do { LATAbits.LATA7 = 1; } while(0);
  2665  060B  178C               	bsf	12,7	;volatile
  2666                           
  2667                           ;main.c: 175: do { LATAbits.LATA6 = 1; } while(0);
  2668  060C  170C               	bsf	12,6	;volatile
  2669                           
  2670                           ;main.c: 176: break;
  2671  060D  0008               	return
  2672  060E                     l283:	
  2673                           ;main.c: 178: do { LATAbits.LATA0 = 1; } while(0);
  2674                           
  2675                           ;main.c: 177: case 5:
  2676                           
  2677  060E  0022               	movlb	2	; select bank2
  2678  060F  140C               	bsf	12,0	;volatile
  2679                           
  2680                           ;main.c: 179: do { LATAbits.LATA1 = 1; } while(0);
  2681  0610  148C               	bsf	12,1	;volatile
  2682                           
  2683                           ;main.c: 180: do { LATAbits.LATA2 = 1; } while(0);
  2684  0611  150C               	bsf	12,2	;volatile
  2685                           
  2686                           ;main.c: 181: do { LATAbits.LATA3 = 1; } while(0);
  2687  0612  158C               	bsf	12,3	;volatile
  2688                           
  2689                           ;main.c: 182: do { LATAbits.LATA4 = 0; } while(0);
  2690  0613  120C               	bcf	12,4	;volatile
  2691                           
  2692                           ;main.c: 183: do { LATAbits.LATA5 = 1; } while(0);
  2693  0614  168C               	bsf	12,5	;volatile
  2694                           
  2695                           ;main.c: 184: do { LATAbits.LATA7 = 1; } while(0);
  2696  0615  178C               	bsf	12,7	;volatile
  2697                           
  2698                           ;main.c: 185: do { LATAbits.LATA6 = 1; } while(0);
  2699  0616  170C               	bsf	12,6	;volatile
  2700                           
  2701                           ;main.c: 186: break;
  2702  0617  0008               	return
  2703  0618                     l300:	
  2704                           ;main.c: 188: do { LATAbits.LATA0 = 1; } while(0);
  2705                           
  2706                           ;main.c: 187: case 6:
  2707                           
  2708  0618  0022               	movlb	2	; select bank2
  2709  0619  140C               	bsf	12,0	;volatile
  2710                           
  2711                           ;main.c: 189: do { LATAbits.LATA1 = 1; } while(0);
  2712  061A  148C               	bsf	12,1	;volatile
  2713                           
  2714                           ;main.c: 190: do { LATAbits.LATA2 = 1; } while(0);
  2715  061B  150C               	bsf	12,2	;volatile
  2716                           
  2717                           ;main.c: 191: do { LATAbits.LATA3 = 1; } while(0);
  2718  061C  158C               	bsf	12,3	;volatile
  2719                           
  2720                           ;main.c: 192: do { LATAbits.LATA4 = 1; } while(0);
  2721  061D  160C               	bsf	12,4	;volatile
  2722                           
  2723                           ;main.c: 193: do { LATAbits.LATA5 = 0; } while(0);
  2724  061E  128C               	bcf	12,5	;volatile
  2725                           
  2726                           ;main.c: 194: do { LATAbits.LATA7 = 1; } while(0);
  2727  061F  178C               	bsf	12,7	;volatile
  2728                           
  2729                           ;main.c: 195: do { LATAbits.LATA6 = 1; } while(0);
  2730  0620  170C               	bsf	12,6	;volatile
  2731                           
  2732                           ;main.c: 196: break;
  2733  0621  0008               	return
  2734  0622                     l317:	
  2735                           ;main.c: 198: do { LATAbits.LATA0 = 1; } while(0);
  2736                           
  2737                           ;main.c: 197: case 7:
  2738                           
  2739  0622  0022               	movlb	2	; select bank2
  2740  0623  140C               	bsf	12,0	;volatile
  2741                           
  2742                           ;main.c: 199: do { LATAbits.LATA1 = 1; } while(0);
  2743  0624  148C               	bsf	12,1	;volatile
  2744                           
  2745                           ;main.c: 200: do { LATAbits.LATA2 = 1; } while(0);
  2746  0625  150C               	bsf	12,2	;volatile
  2747                           
  2748                           ;main.c: 201: do { LATAbits.LATA3 = 1; } while(0);
  2749  0626  158C               	bsf	12,3	;volatile
  2750                           
  2751                           ;main.c: 202: do { LATAbits.LATA4 = 1; } while(0);
  2752  0627  160C               	bsf	12,4	;volatile
  2753                           
  2754                           ;main.c: 203: do { LATAbits.LATA5 = 1; } while(0);
  2755  0628  168C               	bsf	12,5	;volatile
  2756                           
  2757                           ;main.c: 204: do { LATAbits.LATA7 = 0; } while(0);
  2758  0629  138C               	bcf	12,7	;volatile
  2759                           
  2760                           ;main.c: 205: do { LATAbits.LATA6 = 1; } while(0);
  2761  062A  170C               	bsf	12,6	;volatile
  2762                           
  2763                           ;main.c: 206: break;
  2764  062B  0008               	return
  2765  062C                     l334:	
  2766                           ;main.c: 208: do { LATAbits.LATA0 = 1; } while(0);
  2767                           
  2768                           ;main.c: 207: case 8:
  2769                           
  2770  062C  0022               	movlb	2	; select bank2
  2771  062D  140C               	bsf	12,0	;volatile
  2772                           
  2773                           ;main.c: 209: do { LATAbits.LATA1 = 1; } while(0);
  2774  062E  148C               	bsf	12,1	;volatile
  2775                           
  2776                           ;main.c: 210: do { LATAbits.LATA2 = 1; } while(0);
  2777  062F  150C               	bsf	12,2	;volatile
  2778                           
  2779                           ;main.c: 211: do { LATAbits.LATA3 = 1; } while(0);
  2780  0630  158C               	bsf	12,3	;volatile
  2781                           
  2782                           ;main.c: 212: do { LATAbits.LATA4 = 1; } while(0);
  2783  0631  160C               	bsf	12,4	;volatile
  2784                           
  2785                           ;main.c: 213: do { LATAbits.LATA5 = 1; } while(0);
  2786  0632  168C               	bsf	12,5	;volatile
  2787                           
  2788                           ;main.c: 214: do { LATAbits.LATA7 = 1; } while(0);
  2789  0633  178C               	bsf	12,7	;volatile
  2790                           
  2791                           ;main.c: 215: do { LATAbits.LATA6 = 0; } while(0);
  2792  0634  130C               	bcf	12,6	;volatile
  2793                           
  2794                           ;main.c: 216: break;
  2795  0635  0008               	return
  2796  0636                     l351:	
  2797                           ;main.c: 219: do { LATAbits.LATA0 = 1; } while(0);
  2798                           
  2799                           ;main.c: 218: default:
  2800                           
  2801  0636  0022               	movlb	2	; select bank2
  2802  0637  140C               	bsf	12,0	;volatile
  2803                           
  2804                           ;main.c: 220: do { LATAbits.LATA1 = 1; } while(0);
  2805  0638  148C               	bsf	12,1	;volatile
  2806                           
  2807                           ;main.c: 221: do { LATAbits.LATA2 = 1; } while(0);
  2808  0639  150C               	bsf	12,2	;volatile
  2809                           
  2810                           ;main.c: 222: do { LATAbits.LATA3 = 1; } while(0);
  2811  063A  158C               	bsf	12,3	;volatile
  2812                           
  2813                           ;main.c: 223: do { LATAbits.LATA4 = 1; } while(0);
  2814  063B  160C               	bsf	12,4	;volatile
  2815                           
  2816                           ;main.c: 224: do { LATAbits.LATA5 = 1; } while(0);
  2817  063C  168C               	bsf	12,5	;volatile
  2818                           
  2819                           ;main.c: 225: do { LATAbits.LATA7 = 1; } while(0);
  2820  063D  178C               	bsf	12,7	;volatile
  2821                           
  2822                           ;main.c: 226: do { LATAbits.LATA6 = 1; } while(0);
  2823  063E  170C               	bsf	12,6	;volatile
  2824                           
  2825                           ;main.c: 228: }
  2826                           
  2827                           ;main.c: 227: break;
  2828  063F  0008               	return
  2829  0640                     l1238:	
  2830                           
  2831                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2832                           ; Switch size 1, requested type "space"
  2833                           ; Number of cases is 1, Range of values is 0 to 0
  2834                           ; switch strategies available:
  2835                           ; Name         Instructions Cycles
  2836                           ; simple_byte            4     3 (average)
  2837                           ; direct_byte            8     6 (fixed)
  2838                           ; jumptable            260     6 (fixed)
  2839                           ;	Chosen strategy is simple_byte
  2840  0640  0871               	movf	SetChannel@ChannelNumber+1,w
  2841  0641  3A00               	xorlw	0	; case 0
  2842  0642  1903               	skipnz
  2843  0643  2E45               	goto	l1598
  2844  0644  2E36               	goto	l351
  2845  0645                     l1598:	
  2846                           
  2847                           ; Switch size 1, requested type "space"
  2848                           ; Number of cases is 9, Range of values is 0 to 8
  2849                           ; switch strategies available:
  2850                           ; Name         Instructions Cycles
  2851                           ; direct_byte           24     6 (fixed)
  2852                           ; simple_byte           28    15 (average)
  2853                           ; jumptable            260     6 (fixed)
  2854                           ;	Chosen strategy is direct_byte
  2855  0645  0870               	movf	SetChannel@ChannelNumber,w
  2856  0646  0084               	movwf	4
  2857  0647  3009               	movlw	9
  2858  0648  0204               	subwf	4,w
  2859  0649  1803               	skipnc
  2860  064A  2E36               	goto	l351
  2861  064B  3180               	movlp	high S1600
  2862  064C  3002               	movlw	low S1600
  2863  064D  0704               	addwf	4,w
  2864  064E  0082               	movwf	2
  2865  064F  0008               	return
  2866  0650                     __end_of_SetChannel:	
  2867                           
  2868                           	psect	swtext1
  2869  0002                     __pswtext1:	
  2870  0002                     S1600:	
  2871  0002  2DDC               	ljmp	l197
  2872  0003  2DE6               	ljmp	l215
  2873  0004  2DF0               	ljmp	l232
  2874  0005  2DFA               	ljmp	l249
  2875  0006  2E04               	ljmp	l266
  2876  0007  2E0E               	ljmp	l283
  2877  0008  2E18               	ljmp	l300
  2878  0009  2E22               	ljmp	l317
  2879  000A  2E2C               	ljmp	l334
  2880                           
  2881                           	psect	text12
  2882  0474                     __ptext12:	
  2883 ;; *************** function _SPI_Exchange8bit *****************
  2884 ;; Defined at:
  2885 ;;		line 77 in file "mcc_generated_files/spi.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  data            1    wreg     unsigned char 
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  data            1    0[COMMON] unsigned char 
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  1    wreg      unsigned char 
  2892 ;; Registers used:
  2893 ;;		wreg
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMMON   BANK0   BANK1
  2899 ;;      Params:         0       0       0
  2900 ;;      Locals:         1       0       0
  2901 ;;      Temps:          0       0       0
  2902 ;;      Totals:         1       0       0
  2903 ;;Total ram usage:        1 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; This function calls:
  2906 ;;		Nothing
  2907 ;; This function is called by:
  2908 ;;		_GetData
  2909 ;;		_SPI_Exchange8bitBuffer
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           
  2914                           ;psect for function _SPI_Exchange8bit
  2915  0474                     _SPI_Exchange8bit:	
  2916                           
  2917                           ;incstack = 0
  2918                           ; Regs used in _SPI_Exchange8bit: [wreg]
  2919                           ;SPI_Exchange8bit@data stored from wreg
  2920  0474  00F0               	movwf	SPI_Exchange8bit@data
  2921                           
  2922                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  2923  0475  0024               	movlb	4	; select bank4
  2924  0476  1395               	bcf	21,7	;volatile
  2925                           
  2926                           ;spi.c: 82: SSPBUF = data;
  2927  0477  0870               	movf	SPI_Exchange8bit@data,w
  2928  0478  0091               	movwf	17	;volatile
  2929  0479                     l18:	
  2930                           ;spi.c: 85: {
  2931                           
  2932                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  2933                           
  2934  0479  1C14               	btfss	20,0	;volatile
  2935  047A  2C79               	goto	l18
  2936                           
  2937                           ;spi.c: 86: }
  2938                           ;spi.c: 88: return (SSPBUF);
  2939  047B  0811               	movf	17,w	;volatile
  2940  047C  0008               	return
  2941  047D                     __end_of_SPI_Exchange8bit:	
  2942                           
  2943                           	psect	text13
  2944  047D                     __ptext13:	
  2945 ;; *************** function _EUSART_Read *****************
  2946 ;; Defined at:
  2947 ;;		line 77 in file "mcc_generated_files/eusart.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;		None
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;		None
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      unsigned char 
  2954 ;; Registers used:
  2955 ;;		wreg
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMMON   BANK0   BANK1
  2961 ;;      Params:         0       0       0
  2962 ;;      Locals:         0       0       0
  2963 ;;      Temps:          0       0       0
  2964 ;;      Totals:         0       0       0
  2965 ;;Total ram usage:        0 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_main
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           
  2975                           ;psect for function _EUSART_Read
  2976  047D                     _EUSART_Read:	
  2977  047D                     l92:	
  2978                           ;eusart.c: 81: {
  2979                           
  2980                           ;eusart.c: 80: while(!PIR1bits.RCIF)
  2981                           
  2982                           ;incstack = 0
  2983                           ; Regs used in _EUSART_Read: [wreg]
  2984                           
  2985  047D  0020               	movlb	0	; select bank0
  2986  047E  1E91               	btfss	17,5	;volatile
  2987  047F  2C7D               	goto	l92
  2988                           
  2989                           ;eusart.c: 82: }
  2990                           ;eusart.c: 85: if(1 == RCSTAbits.OERR)
  2991  0480  0023               	movlb	3	; select bank3
  2992  0481  1C9D               	btfss	29,1	;volatile
  2993  0482  2C85               	goto	l880
  2994                           
  2995                           ;eusart.c: 86: {
  2996                           ;eusart.c: 89: RCSTAbits.CREN = 0;
  2997  0483  121D               	bcf	29,4	;volatile
  2998                           
  2999                           ;eusart.c: 90: RCSTAbits.CREN = 1;
  3000  0484  161D               	bsf	29,4	;volatile
  3001  0485                     l880:	
  3002                           
  3003                           ;eusart.c: 91: }
  3004                           ;eusart.c: 93: return RCREG;
  3005  0485  0819               	movf	25,w	;volatile
  3006  0486  0008               	return
  3007  0487                     __end_of_EUSART_Read:	
  3008  007E                     btemp	set	126	;btemp
  3009  007E                     wtemp	set	126
  3010  007E                     wtemp0	set	126
  3011  0080                     wtemp1	set	128
  3012  0082                     wtemp2	set	130
  3013  0084                     wtemp3	set	132
  3014  0086                     wtemp4	set	134
  3015  0088                     wtemp5	set	136
  3016  007F                     wtemp6	set	127
  3017  007E                     ttemp	set	126
  3018  007E                     ttemp0	set	126
  3019  0081                     ttemp1	set	129
  3020  0084                     ttemp2	set	132
  3021  0087                     ttemp3	set	135
  3022  007F                     ttemp4	set	127
  3023  007E                     ltemp	set	126
  3024  007E                     ltemp0	set	126
  3025  0082                     ltemp1	set	130
  3026  0086                     ltemp2	set	134
  3027  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        32
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     19      51
    BANK1            32      0       0

Pointer List with Targets:

    GetData@ArrayPointer	PTR unsigned char  size(1) Largest target is 4
		 -> CH_8_RAW(BANK0[4]), CH_7_RAW(BANK0[4]), CH_6_RAW(BANK0[4]), CH_5_RAW(BANK0[4]), 
		 -> CH_4_RAW(BANK0[4]), CH_3_RAW(BANK0[4]), CH_2_RAW(BANK0[4]), CH_1_RAW(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_SendDataFrame
    _SendDataFrame->___lwmod
    _GetData->_SetChannel

Critical Paths under _main in BANK0

    _main->_SendDataFrame

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2007
                                              7 COMMON     2     2      0
                        _EUSART_Read
                            _GetData
                  _SYSTEM_Initialize
                      _SendDataFrame
                         _SetChannel
 ---------------------------------------------------------------------------------
 (1) _SendDataFrame                                       20    20      0    1261
                                              6 COMMON     1     1      0
                                              0 BANK0     19    19      0
                       _EUSART_Write
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetData                                              4     4      0     497
                                              2 COMMON     4     4      0
                   _SPI_Exchange8bit
                         _SetChannel
 ---------------------------------------------------------------------------------
 (1) _SetChannel                                           2     0      2     181
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Read
   _GetData
     _SPI_Exchange8bit
     _SetChannel
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _SendDataFrame
     _EUSART_Write
     ___lwmod
   _SetChannel

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      3E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     13      33       6       63.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      3E       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Nov 28 21:23:15 2016

                 _SPI_Initialize 045A                                pc 0002                      __CFG_CP$OFF 0000  
                             l18 0479                               l92 047D                               l99 046D  
                    __CFG_LVP$ON 0000                              l300 0618                              l215 05E6  
                            l232 05F0                              l317 0622                              l334 062C  
                            l351 0636                              l249 05FA                              l266 0604  
                            l283 060E                              l197 05DC                              l384 056F  
                            l880 0485                              u705 04E5                              u715 04EC  
                            u805 071A                              u815 0728                              u735 0668  
                            u825 074A                              u745 068A                              u835 0758  
                            u755 0698                              u685 04D6                              u845 077A  
                            u765 06BA                              u855 0788                              u775 06C8  
                            u865 07AA                              u785 06EA                              u875 07B8  
                            u795 06F8                              u885 07DA                     __CFG_BORV$LO 0000  
                            wreg 0009                     __CFG_IESO$ON 0000                             S1600 0002  
                   ?_EUSART_Read 0070                             l1310 06CA                             l1304 06BC  
                           l1410 0521                             l1402 0511                             l1332 071C  
                           l1324 06FA                             l1238 0640                             l1422 0539  
                           l1414 0529                             l1406 0519                             l1262 04EB  
                           l1318 06EC                             l1502 058A                             l1256 04D3  
                           l1360 077C                             l1352 075A                             l1520 05A2  
                           l1418 0531                             l1258 04DF                             l1266 04F4  
                           l1346 074C                             l1338 072A                             l1290 068C  
                           l1282 066A                             l1514 059A                             l1380 07BA  
                           l1532 05B2                             l1508 0592                             l1540 05C0  
                           l1374 07AC                             l1366 078A                             l1526 05AA  
                           l1296 069A                             l1552 05D6                             l1536 05BA  
                           l1394 0501                             l1546 05CC                             l1538 05BF  
                           l1388 07DC                             l1398 0509                             l1598 0645  
                           _LATA 010C                             _LATB 010D                             _LATC 010E  
                           _WPUB 020D                             _WPUE 0210                     __CFG_WRT$OFF 0000  
                  __CFG_FCMEN$ON 0000                             _main 0568                             fsr0h 0005  
                           fsr1h 0007                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E                    __CFG_BOREN$ON 0000  
               main@ChannelCount 0078                             ltemp 007E                             start 0001  
                           ttemp 007E                             wtemp 007E           __end_of_SPI_Initialize 0460  
                __end_of_GetData 0568                    __CFG_MCLRE$ON 0000                    ?_EUSART_Write 0070  
 __size_of_OSCILLATOR_Initialize 0004    __end_of_OSCILLATOR_Initialize 0456                            ?_main 0070  
                  __CFG_WDTE$OFF 0000                  __end_of___lwmod 04F9                            _RCREG 0199  
                          _RCSTA 019D                            _TRISA 008C                            _TRISB 008D  
                          _TRISC 008E                            _TXREG 019A                            _TXSTA 019E  
                 _WDT_Initialize 0456                            ltemp0 007E                            ltemp1 0082  
                          ltemp2 0086                            ltemp3 0080                            ttemp0 007E  
                          ttemp1 0081                            ttemp2 0084                            ttemp3 0087  
                          ttemp4 007F                            status 0003                            wtemp0 007E  
                          wtemp1 0080                            wtemp2 0082                            wtemp3 0084  
                          wtemp4 0086                            wtemp5 0088                            wtemp6 007F  
                ?_SPI_Initialize 0070                  __initialization 07F2                     __end_of_main 05DB  
                 ??_EUSART_Write 0070                   __CFG_LPBOR$OFF 0000                           ??_main 0077  
                     _SetChannel 05DB           __end_of_WDT_Initialize 045A         __end_of_SPI_Exchange8bit 047D  
                         _APFCON 011D                           _ANSELA 018C                           _ANSELB 018D  
                         _ANSELC 018E                        ??_GetData 0072                           _OSCCON 0099  
                         _SPBRGH 019C                           _SPBRGL 019B                           _WDTCON 0097  
                         _SSPBUF 0211            SendDataFrame@Checksum 0040                   __CFG_PWRTE$OFF 0000  
          SendDataFrame@FrameSum 0051                   __CFG_STVREN$ON 0000                        ??___lwmod 0074  
         __size_of_SendDataFrame 01A2                  ?_WDT_Initialize 0070             __size_of_EUSART_Read 000A  
              _SYSTEM_Initialize 0460          __end_of__initialization 07FE               ?_SYSTEM_Initialize 0070  
                 __pcstackCOMMON 0070                     __pidataBANK0 04AD              ??_SYSTEM_Initialize 0070  
                 _OPTION_REGbits 0095                      ?_SetChannel 0070        __end_of_SYSTEM_Initialize 0466  
           __end_of_EUSART_Write 0474                  __CFG_VCAPEN$OFF 0000                    _SendDataFrame 0650  
                     __pmaintext 0568                          _BAUDCON 019F                          _SSP1ADD 0212  
               ??_SPI_Initialize 0070                          _GetData 04F9                   ?_SendDataFrame 0070  
            __size_of_SetChannel 0075                          ___lwmod 04CD                          __ptext1 0650  
                        __ptext2 04CD                          __ptext3 046C                          __ptext4 0460  
                        __ptext5 0456                          __ptext6 045A                          __ptext7 0492  
                        __ptext8 0452                          __ptext9 0487            _OSCILLATOR_Initialize 0452  
       ??_PIN_MANAGER_Initialize 0070              GetData@ArrayPointer 0074                ?_SPI_Exchange8bit 0070  
     __size_of_SYSTEM_Initialize 0006             end_of_initialization 07FE               ??_SPI_Exchange8bit 0070  
           SPI_Exchange8bit@data 0070                          init_ram 0466                          initloop 0467  
              _EUSART_Initialize 0487             GetData@ChannelNumber 0075               ?_EUSART_Initialize 0070  
                      _RCSTAbits 019D              ??_EUSART_Initialize 0070                 ??_WDT_Initialize 0070  
               __CFG_FOSC$INTOSC 0000            __size_of_EUSART_Write 0008                  ??_SendDataFrame 0076  
      __end_of_EUSART_Initialize 0492               SendDataFrame@i_320 004B               SendDataFrame@i_321 004D  
             SendDataFrame@i_322 004F               SendDataFrame@i_316 0043               SendDataFrame@i_317 0045  
             SendDataFrame@i_318 0047               SendDataFrame@i_319 0049                     _EUSART_Write 046C  
         ?_OSCILLATOR_Initialize 0070                     ??_SetChannel 0072              start_initialization 07F2  
__size_of_PIN_MANAGER_Initialize 001B                    ??_EUSART_Read 0070               __end_of_SetChannel 0650  
                    __pdataBANK0 0020                      __pbssCOMMON 0079                        ___latbits 0000  
                   _ReceiveCount 0079                    __pcstackBANK0 0040                     _ReceivedByte 007A  
                       ?_GetData 0070       __size_of_EUSART_Initialize 000B              __end_of_EUSART_Read 0487  
         _PIN_MANAGER_Initialize 0492                         ?___lwmod 0070                        __pswtext1 0002  
                       _CH_1_RAW 0020                         _CH_2_RAW 0024                         _CH_3_RAW 0028  
                       _CH_4_RAW 002C                         _CH_5_RAW 0030                         _CH_6_RAW 0034  
                       _CH_7_RAW 0038                         _CH_8_RAW 003C                         _LATAbits 010C  
                       _LATBbits 010D          SetChannel@ChannelNumber 0070                         _PIR1bits 0011  
      __size_of_SPI_Exchange8bit 0009                         _SSP1CON1 0215                         _SSP1STAT 0214  
                    _EUSART_Read 047D                 __size_of_GetData 006F          __size_of_SPI_Initialize 0006  
        ??_OSCILLATOR_Initialize 0070                 __size_of___lwmod 002C                         __ptext10 04F9  
                       __ptext11 05DB                         __ptext12 0474                         __ptext13 047D  
                   _SSP1CON1bits 0215                   SendDataFrame@i 0041                    __size_of_main 0073  
          __end_of_SendDataFrame 07F2                     _SSP1STATbits 0214          __size_of_WDT_Initialize 0004  
               ___lwmod@dividend 0072          ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000  
               _SPI_Exchange8bit 0474                  ___lwmod@divisor 0070                  ___lwmod@counter 0075  
             EUSART_Write@txData 0070   __end_of_PIN_MANAGER_Initialize 04AD  
