

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Nov 27 14:15:57 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1512
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	swtext1,local,class=CONST,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     	;# 
    31  0001                     	;# 
    32  0002                     	;# 
    33  0003                     	;# 
    34  0004                     	;# 
    35  0005                     	;# 
    36  0006                     	;# 
    37  0007                     	;# 
    38  0008                     	;# 
    39  0009                     	;# 
    40  000A                     	;# 
    41  000B                     	;# 
    42  000C                     	;# 
    43  000D                     	;# 
    44  000E                     	;# 
    45  0010                     	;# 
    46  0011                     	;# 
    47  0012                     	;# 
    48  0015                     	;# 
    49  0016                     	;# 
    50  0016                     	;# 
    51  0017                     	;# 
    52  0018                     	;# 
    53  0019                     	;# 
    54  001A                     	;# 
    55  001B                     	;# 
    56  001C                     	;# 
    57  008C                     	;# 
    58  008D                     	;# 
    59  008E                     	;# 
    60  0090                     	;# 
    61  0091                     	;# 
    62  0092                     	;# 
    63  0095                     	;# 
    64  0096                     	;# 
    65  0097                     	;# 
    66  0099                     	;# 
    67  009A                     	;# 
    68  009B                     	;# 
    69  009B                     	;# 
    70  009B                     	;# 
    71  009B                     	;# 
    72  009C                     	;# 
    73  009C                     	;# 
    74  009D                     	;# 
    75  009E                     	;# 
    76  010C                     	;# 
    77  010D                     	;# 
    78  010E                     	;# 
    79  0116                     	;# 
    80  0117                     	;# 
    81  011D                     	;# 
    82  018C                     	;# 
    83  018D                     	;# 
    84  018E                     	;# 
    85  0191                     	;# 
    86  0191                     	;# 
    87  0192                     	;# 
    88  0193                     	;# 
    89  0193                     	;# 
    90  0194                     	;# 
    91  0195                     	;# 
    92  0196                     	;# 
    93  0197                     	;# 
    94  0199                     	;# 
    95  019A                     	;# 
    96  019B                     	;# 
    97  019B                     	;# 
    98  019B                     	;# 
    99  019B                     	;# 
   100  019C                     	;# 
   101  019C                     	;# 
   102  019D                     	;# 
   103  019E                     	;# 
   104  019F                     	;# 
   105  020D                     	;# 
   106  0210                     	;# 
   107  0211                     	;# 
   108  0211                     	;# 
   109  0212                     	;# 
   110  0212                     	;# 
   111  0213                     	;# 
   112  0213                     	;# 
   113  0214                     	;# 
   114  0214                     	;# 
   115  0215                     	;# 
   116  0215                     	;# 
   117  0215                     	;# 
   118  0216                     	;# 
   119  0216                     	;# 
   120  0217                     	;# 
   121  0217                     	;# 
   122  0291                     	;# 
   123  0291                     	;# 
   124  0292                     	;# 
   125  0293                     	;# 
   126  0298                     	;# 
   127  0298                     	;# 
   128  0299                     	;# 
   129  029A                     	;# 
   130  0394                     	;# 
   131  0395                     	;# 
   132  0396                     	;# 
   133  0FE4                     	;# 
   134  0FE5                     	;# 
   135  0FE6                     	;# 
   136  0FE7                     	;# 
   137  0FE8                     	;# 
   138  0FE9                     	;# 
   139  0FEA                     	;# 
   140  0FEB                     	;# 
   141  0FED                     	;# 
   142  0FEE                     	;# 
   143  0FEF                     	;# 
   144  0711                     	;# 
   145  0712                     	;# 
   146  0713                     	;# 
   147  0714                     	;# 
   148  0715                     	;# 
   149  0716                     	;# 
   150  0717                     	;# 
   151  0718                     	;# 
   152  0719                     	;# 
   153  071A                     	;# 
   154  071A                     	;# 
   155  071A                     	;# 
   156  071B                     	;# 
   157  071C                     	;# 
   158  071C                     	;# 
   159  071C                     	;# 
   160  071D                     	;# 
   161  0000                     	;# 
   162  0001                     	;# 
   163  0002                     	;# 
   164  0003                     	;# 
   165  0004                     	;# 
   166  0005                     	;# 
   167  0006                     	;# 
   168  0007                     	;# 
   169  0008                     	;# 
   170  0009                     	;# 
   171  000A                     	;# 
   172  000B                     	;# 
   173  000C                     	;# 
   174  000D                     	;# 
   175  000E                     	;# 
   176  0010                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0015                     	;# 
   180  0016                     	;# 
   181  0016                     	;# 
   182  0017                     	;# 
   183  0018                     	;# 
   184  0019                     	;# 
   185  001A                     	;# 
   186  001B                     	;# 
   187  001C                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0095                     	;# 
   195  0096                     	;# 
   196  0097                     	;# 
   197  0099                     	;# 
   198  009A                     	;# 
   199  009B                     	;# 
   200  009B                     	;# 
   201  009B                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  0116                     	;# 
   211  0117                     	;# 
   212  011D                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  018E                     	;# 
   216  0191                     	;# 
   217  0191                     	;# 
   218  0192                     	;# 
   219  0193                     	;# 
   220  0193                     	;# 
   221  0194                     	;# 
   222  0195                     	;# 
   223  0196                     	;# 
   224  0197                     	;# 
   225  0199                     	;# 
   226  019A                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019C                     	;# 
   232  019C                     	;# 
   233  019D                     	;# 
   234  019E                     	;# 
   235  019F                     	;# 
   236  020D                     	;# 
   237  0210                     	;# 
   238  0211                     	;# 
   239  0211                     	;# 
   240  0212                     	;# 
   241  0212                     	;# 
   242  0213                     	;# 
   243  0213                     	;# 
   244  0214                     	;# 
   245  0214                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0216                     	;# 
   250  0216                     	;# 
   251  0217                     	;# 
   252  0217                     	;# 
   253  0291                     	;# 
   254  0291                     	;# 
   255  0292                     	;# 
   256  0293                     	;# 
   257  0298                     	;# 
   258  0298                     	;# 
   259  0299                     	;# 
   260  029A                     	;# 
   261  0394                     	;# 
   262  0395                     	;# 
   263  0396                     	;# 
   264  0FE4                     	;# 
   265  0FE5                     	;# 
   266  0FE6                     	;# 
   267  0FE7                     	;# 
   268  0FE8                     	;# 
   269  0FE9                     	;# 
   270  0FEA                     	;# 
   271  0FEB                     	;# 
   272  0FED                     	;# 
   273  0FEE                     	;# 
   274  0FEF                     	;# 
   275  0711                     	;# 
   276  0712                     	;# 
   277  0713                     	;# 
   278  0714                     	;# 
   279  0715                     	;# 
   280  0716                     	;# 
   281  0717                     	;# 
   282  0718                     	;# 
   283  0719                     	;# 
   284  071A                     	;# 
   285  071A                     	;# 
   286  071A                     	;# 
   287  071B                     	;# 
   288  071C                     	;# 
   289  071C                     	;# 
   290  071C                     	;# 
   291  071D                     	;# 
   292  0000                     	;# 
   293  0001                     	;# 
   294  0002                     	;# 
   295  0003                     	;# 
   296  0004                     	;# 
   297  0005                     	;# 
   298  0006                     	;# 
   299  0007                     	;# 
   300  0008                     	;# 
   301  0009                     	;# 
   302  000A                     	;# 
   303  000B                     	;# 
   304  000C                     	;# 
   305  000D                     	;# 
   306  000E                     	;# 
   307  0010                     	;# 
   308  0011                     	;# 
   309  0012                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  008C                     	;# 
   320  008D                     	;# 
   321  008E                     	;# 
   322  0090                     	;# 
   323  0091                     	;# 
   324  0092                     	;# 
   325  0095                     	;# 
   326  0096                     	;# 
   327  0097                     	;# 
   328  0099                     	;# 
   329  009A                     	;# 
   330  009B                     	;# 
   331  009B                     	;# 
   332  009B                     	;# 
   333  009B                     	;# 
   334  009C                     	;# 
   335  009C                     	;# 
   336  009D                     	;# 
   337  009E                     	;# 
   338  010C                     	;# 
   339  010D                     	;# 
   340  010E                     	;# 
   341  0116                     	;# 
   342  0117                     	;# 
   343  011D                     	;# 
   344  018C                     	;# 
   345  018D                     	;# 
   346  018E                     	;# 
   347  0191                     	;# 
   348  0191                     	;# 
   349  0192                     	;# 
   350  0193                     	;# 
   351  0193                     	;# 
   352  0194                     	;# 
   353  0195                     	;# 
   354  0196                     	;# 
   355  0197                     	;# 
   356  0199                     	;# 
   357  019A                     	;# 
   358  019B                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019B                     	;# 
   362  019C                     	;# 
   363  019C                     	;# 
   364  019D                     	;# 
   365  019E                     	;# 
   366  019F                     	;# 
   367  020D                     	;# 
   368  0210                     	;# 
   369  0211                     	;# 
   370  0211                     	;# 
   371  0212                     	;# 
   372  0212                     	;# 
   373  0213                     	;# 
   374  0213                     	;# 
   375  0214                     	;# 
   376  0214                     	;# 
   377  0215                     	;# 
   378  0215                     	;# 
   379  0215                     	;# 
   380  0216                     	;# 
   381  0216                     	;# 
   382  0217                     	;# 
   383  0217                     	;# 
   384  0291                     	;# 
   385  0291                     	;# 
   386  0292                     	;# 
   387  0293                     	;# 
   388  0298                     	;# 
   389  0298                     	;# 
   390  0299                     	;# 
   391  029A                     	;# 
   392  0394                     	;# 
   393  0395                     	;# 
   394  0396                     	;# 
   395  0FE4                     	;# 
   396  0FE5                     	;# 
   397  0FE6                     	;# 
   398  0FE7                     	;# 
   399  0FE8                     	;# 
   400  0FE9                     	;# 
   401  0FEA                     	;# 
   402  0FEB                     	;# 
   403  0FED                     	;# 
   404  0FEE                     	;# 
   405  0FEF                     	;# 
   406  0711                     	;# 
   407  0712                     	;# 
   408  0713                     	;# 
   409  0714                     	;# 
   410  0715                     	;# 
   411  0716                     	;# 
   412  0717                     	;# 
   413  0718                     	;# 
   414  0719                     	;# 
   415  071A                     	;# 
   416  071A                     	;# 
   417  071A                     	;# 
   418  071B                     	;# 
   419  071C                     	;# 
   420  071C                     	;# 
   421  071C                     	;# 
   422  071D                     	;# 
   423  0000                     	;# 
   424  0001                     	;# 
   425  0002                     	;# 
   426  0003                     	;# 
   427  0004                     	;# 
   428  0005                     	;# 
   429  0006                     	;# 
   430  0007                     	;# 
   431  0008                     	;# 
   432  0009                     	;# 
   433  000A                     	;# 
   434  000B                     	;# 
   435  000C                     	;# 
   436  000D                     	;# 
   437  000E                     	;# 
   438  0010                     	;# 
   439  0011                     	;# 
   440  0012                     	;# 
   441  0015                     	;# 
   442  0016                     	;# 
   443  0016                     	;# 
   444  0017                     	;# 
   445  0018                     	;# 
   446  0019                     	;# 
   447  001A                     	;# 
   448  001B                     	;# 
   449  001C                     	;# 
   450  008C                     	;# 
   451  008D                     	;# 
   452  008E                     	;# 
   453  0090                     	;# 
   454  0091                     	;# 
   455  0092                     	;# 
   456  0095                     	;# 
   457  0096                     	;# 
   458  0097                     	;# 
   459  0099                     	;# 
   460  009A                     	;# 
   461  009B                     	;# 
   462  009B                     	;# 
   463  009B                     	;# 
   464  009B                     	;# 
   465  009C                     	;# 
   466  009C                     	;# 
   467  009D                     	;# 
   468  009E                     	;# 
   469  010C                     	;# 
   470  010D                     	;# 
   471  010E                     	;# 
   472  0116                     	;# 
   473  0117                     	;# 
   474  011D                     	;# 
   475  018C                     	;# 
   476  018D                     	;# 
   477  018E                     	;# 
   478  0191                     	;# 
   479  0191                     	;# 
   480  0192                     	;# 
   481  0193                     	;# 
   482  0193                     	;# 
   483  0194                     	;# 
   484  0195                     	;# 
   485  0196                     	;# 
   486  0197                     	;# 
   487  0199                     	;# 
   488  019A                     	;# 
   489  019B                     	;# 
   490  019B                     	;# 
   491  019B                     	;# 
   492  019B                     	;# 
   493  019C                     	;# 
   494  019C                     	;# 
   495  019D                     	;# 
   496  019E                     	;# 
   497  019F                     	;# 
   498  020D                     	;# 
   499  0210                     	;# 
   500  0211                     	;# 
   501  0211                     	;# 
   502  0212                     	;# 
   503  0212                     	;# 
   504  0213                     	;# 
   505  0213                     	;# 
   506  0214                     	;# 
   507  0214                     	;# 
   508  0215                     	;# 
   509  0215                     	;# 
   510  0215                     	;# 
   511  0216                     	;# 
   512  0216                     	;# 
   513  0217                     	;# 
   514  0217                     	;# 
   515  0291                     	;# 
   516  0291                     	;# 
   517  0292                     	;# 
   518  0293                     	;# 
   519  0298                     	;# 
   520  0298                     	;# 
   521  0299                     	;# 
   522  029A                     	;# 
   523  0394                     	;# 
   524  0395                     	;# 
   525  0396                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE9                     	;# 
   532  0FEA                     	;# 
   533  0FEB                     	;# 
   534  0FED                     	;# 
   535  0FEE                     	;# 
   536  0FEF                     	;# 
   537  0711                     	;# 
   538  0712                     	;# 
   539  0713                     	;# 
   540  0714                     	;# 
   541  0715                     	;# 
   542  0716                     	;# 
   543  0717                     	;# 
   544  0718                     	;# 
   545  0719                     	;# 
   546  071A                     	;# 
   547  071A                     	;# 
   548  071A                     	;# 
   549  071B                     	;# 
   550  071C                     	;# 
   551  071C                     	;# 
   552  071C                     	;# 
   553  071D                     	;# 
   554  0000                     	;# 
   555  0001                     	;# 
   556  0002                     	;# 
   557  0003                     	;# 
   558  0004                     	;# 
   559  0005                     	;# 
   560  0006                     	;# 
   561  0007                     	;# 
   562  0008                     	;# 
   563  0009                     	;# 
   564  000A                     	;# 
   565  000B                     	;# 
   566  000C                     	;# 
   567  000D                     	;# 
   568  000E                     	;# 
   569  0010                     	;# 
   570  0011                     	;# 
   571  0012                     	;# 
   572  0015                     	;# 
   573  0016                     	;# 
   574  0016                     	;# 
   575  0017                     	;# 
   576  0018                     	;# 
   577  0019                     	;# 
   578  001A                     	;# 
   579  001B                     	;# 
   580  001C                     	;# 
   581  008C                     	;# 
   582  008D                     	;# 
   583  008E                     	;# 
   584  0090                     	;# 
   585  0091                     	;# 
   586  0092                     	;# 
   587  0095                     	;# 
   588  0096                     	;# 
   589  0097                     	;# 
   590  0099                     	;# 
   591  009A                     	;# 
   592  009B                     	;# 
   593  009B                     	;# 
   594  009B                     	;# 
   595  009B                     	;# 
   596  009C                     	;# 
   597  009C                     	;# 
   598  009D                     	;# 
   599  009E                     	;# 
   600  010C                     	;# 
   601  010D                     	;# 
   602  010E                     	;# 
   603  0116                     	;# 
   604  0117                     	;# 
   605  011D                     	;# 
   606  018C                     	;# 
   607  018D                     	;# 
   608  018E                     	;# 
   609  0191                     	;# 
   610  0191                     	;# 
   611  0192                     	;# 
   612  0193                     	;# 
   613  0193                     	;# 
   614  0194                     	;# 
   615  0195                     	;# 
   616  0196                     	;# 
   617  0197                     	;# 
   618  0199                     	;# 
   619  019A                     	;# 
   620  019B                     	;# 
   621  019B                     	;# 
   622  019B                     	;# 
   623  019B                     	;# 
   624  019C                     	;# 
   625  019C                     	;# 
   626  019D                     	;# 
   627  019E                     	;# 
   628  019F                     	;# 
   629  020D                     	;# 
   630  0210                     	;# 
   631  0211                     	;# 
   632  0211                     	;# 
   633  0212                     	;# 
   634  0212                     	;# 
   635  0213                     	;# 
   636  0213                     	;# 
   637  0214                     	;# 
   638  0214                     	;# 
   639  0215                     	;# 
   640  0215                     	;# 
   641  0215                     	;# 
   642  0216                     	;# 
   643  0216                     	;# 
   644  0217                     	;# 
   645  0217                     	;# 
   646  0291                     	;# 
   647  0291                     	;# 
   648  0292                     	;# 
   649  0293                     	;# 
   650  0298                     	;# 
   651  0298                     	;# 
   652  0299                     	;# 
   653  029A                     	;# 
   654  0394                     	;# 
   655  0395                     	;# 
   656  0396                     	;# 
   657  0FE4                     	;# 
   658  0FE5                     	;# 
   659  0FE6                     	;# 
   660  0FE7                     	;# 
   661  0FE8                     	;# 
   662  0FE9                     	;# 
   663  0FEA                     	;# 
   664  0FEB                     	;# 
   665  0FED                     	;# 
   666  0FEE                     	;# 
   667  0FEF                     	;# 
   668  0711                     	;# 
   669  0712                     	;# 
   670  0713                     	;# 
   671  0714                     	;# 
   672  0715                     	;# 
   673  0716                     	;# 
   674  0717                     	;# 
   675  0718                     	;# 
   676  0719                     	;# 
   677  071A                     	;# 
   678  071A                     	;# 
   679  071A                     	;# 
   680  071B                     	;# 
   681  071C                     	;# 
   682  071C                     	;# 
   683  071C                     	;# 
   684  071D                     	;# 
   685                           
   686                           	psect	idataBANK1
   687  04E1                     __pidataBANK1:	
   688                           
   689                           ;initializer for _Frame
   690  04E1  3454               	retlw	84
   691  04E2  3445               	retlw	69
   692  04E3  3453               	retlw	83
   693  04E4  3454               	retlw	84
   694  04E5  3459               	retlw	89
   695  04E6  3400               	retlw	0
   696  04E7  3400               	retlw	0
   697  04E8  3400               	retlw	0
   698  04E9  3400               	retlw	0
   699  04EA  3400               	retlw	0
   700  04EB  3400               	retlw	0
   701  04EC  3400               	retlw	0
   702  04ED  3400               	retlw	0
   703  04EE  3400               	retlw	0
   704  04EF  3400               	retlw	0
   705  04F0  3400               	retlw	0
   706  04F1  3400               	retlw	0
   707  04F2  3400               	retlw	0
   708  04F3  3400               	retlw	0
   709  04F4  3400               	retlw	0
   710                           
   711                           	psect	stringtext
   712  04D0                     __pstringtext:	
   713  04D0                     _dpowers:	
   714  04D0  3401               	retlw	1
   715  04D1  3400               	retlw	0
   716  04D2  340A               	retlw	10
   717  04D3  3400               	retlw	0
   718  04D4  3464               	retlw	100
   719  04D5  3400               	retlw	0
   720  04D6  34E8               	retlw	232
   721  04D7  3403               	retlw	3
   722  04D8  3410               	retlw	16
   723  04D9  3427               	retlw	39
   724  04DA                     __end_of_dpowers:	
   725  0011                     _PIR1bits	set	17
   726  0095                     _OPTION_REGbits	set	149
   727  0099                     _OSCCON	set	153
   728  008C                     _TRISA	set	140
   729  008D                     _TRISB	set	141
   730  008E                     _TRISC	set	142
   731  0097                     _WDTCON	set	151
   732  011D                     _APFCON	set	285
   733  010C                     _LATA	set	268
   734  010C                     _LATAbits	set	268
   735  010D                     _LATB	set	269
   736  010D                     _LATBbits	set	269
   737  010E                     _LATC	set	270
   738  018C                     _ANSELA	set	396
   739  018D                     _ANSELB	set	397
   740  018E                     _ANSELC	set	398
   741  019F                     _BAUDCON	set	415
   742  0199                     _RCREG	set	409
   743  019D                     _RCSTA	set	413
   744  019D                     _RCSTAbits	set	413
   745  019C                     _SPBRGH	set	412
   746  019B                     _SPBRGL	set	411
   747  019A                     _TXREG	set	410
   748  019E                     _TXSTA	set	414
   749  0212                     _SSP1ADD	set	530
   750  0215                     _SSP1CON1	set	533
   751  0215                     _SSP1CON1bits	set	533
   752  0214                     _SSP1STAT	set	532
   753  0214                     _SSP1STATbits	set	532
   754  0211                     _SSPBUF	set	529
   755  020D                     _WPUB	set	525
   756  0210                     _WPUE	set	528
   757  04DA                     STR_1:	
   758  04DA  3454               	retlw	84	;'T'
   759  04DB  3420               	retlw	32	;' '
   760  04DC  343D               	retlw	61	;'='
   761  04DD  3420               	retlw	32	;' '
   762  04DE  3425               	retlw	37	;'%'
   763  04DF  3464               	retlw	100	;'d'
   764  04E0  3400               	retlw	0
   765                           
   766                           ; #config settings
   767  0000                     
   768                           	psect	cinit
   769  07EE                     start_initialization:	
   770  07EE                     __initialization:	
   771                           
   772                           ; Initialize objects allocated to BANK1
   773  07EE  30E1               	movlw	low __pidataBANK1
   774  07EF  0084               	movwf	4
   775  07F0  3084               	movlw	(high __pidataBANK1)| (0+128)
   776  07F1  0085               	movwf	5
   777  07F2  30A0               	movlw	low __pdataBANK1
   778  07F3  0086               	movwf	6
   779  07F4  3000               	movlw	high __pdataBANK1
   780  07F5  0087               	movwf	7
   781  07F6  3014               	movlw	20
   782  07F7  24AE               	fcall	init_ram
   783                           
   784                           ; Clear objects allocated to BANK0
   785  07F8  3020               	movlw	low __pbssBANK0
   786  07F9  0084               	movwf	4
   787  07FA  3000               	movlw	high __pbssBANK0
   788  07FB  0085               	movwf	5
   789  07FC  3020               	movlw	32
   790  07FD  24A8               	fcall	clear_ram0
   791  07FE                     end_of_initialization:	
   792                           ;End of C runtime variable initialization code
   793                           
   794  07FE                     __end_of__initialization:	
   795  07FE  0020               	movlb	0
   796  07FF  2E93               	ljmp	_main	;jump to C main() function
   797                           
   798                           	psect	bssBANK0
   799  0020                     __pbssBANK0:	
   800  0020                     _CH1_RAW:	
   801  0020                     	ds	4
   802  0024                     _CH2_RAW:	
   803  0024                     	ds	4
   804  0028                     _CH3_RAW:	
   805  0028                     	ds	4
   806  002C                     _CH4_RAW:	
   807  002C                     	ds	4
   808  0030                     _CH5_RAW:	
   809  0030                     	ds	4
   810  0034                     _CH6_RAW:	
   811  0034                     	ds	4
   812  0038                     _CH7_RAW:	
   813  0038                     	ds	4
   814  003C                     _CH8_RAW:	
   815  003C                     	ds	4
   816                           
   817                           	psect	dataBANK1
   818  00A0                     __pdataBANK1:	
   819  00A0                     _Frame:	
   820  00A0                     	ds	20
   821                           
   822                           	psect	inittext
   823  04AE                     init_ram:	
   824  04AE  00FE               	movwf	126
   825  04AF                     initloop:	
   826  04AF  0012               	moviw fsr0++
   827  04B0  001E               	movwi fsr1++
   828  04B1  0BFE               	decfsz	126,f
   829  04B2  2CAF               	goto	initloop
   830  04B3  3400               	retlw	0
   831                           
   832                           	psect	clrtext
   833  04A8                     clear_ram0:	
   834                           ;	Called with FSR0 containing the base address, and
   835                           ;	WREG with the size to clear
   836                           
   837  04A8  0064               	clrwdt	;clear the watchdog before getting into this loop
   838  04A9                     clrloop0:	
   839  04A9  0180               	clrf	0	;clear RAM location pointed to by FSR
   840  04AA  3101               	addfsr 0,1
   841  04AB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   842  04AC  2CA9               	goto	clrloop0	;have we reached the end yet?
   843  04AD  3400               	retlw	0	;all done for this memory range, return
   844                           
   845                           	psect	cstackCOMMON
   846  0070                     __pcstackCOMMON:	
   847  0070                     ?_PIN_MANAGER_Initialize:	
   848  0070                     ??_PIN_MANAGER_Initialize:	
   849                           ; 1 bytes @ 0x0
   850                           
   851  0070                     ?_OSCILLATOR_Initialize:	
   852                           ; 1 bytes @ 0x0
   853                           
   854  0070                     ??_OSCILLATOR_Initialize:	
   855                           ; 1 bytes @ 0x0
   856                           
   857  0070                     ?_WDT_Initialize:	
   858                           ; 1 bytes @ 0x0
   859                           
   860  0070                     ??_WDT_Initialize:	
   861                           ; 1 bytes @ 0x0
   862                           
   863  0070                     ?_EUSART_Initialize:	
   864                           ; 1 bytes @ 0x0
   865                           
   866  0070                     ??_EUSART_Initialize:	
   867                           ; 1 bytes @ 0x0
   868                           
   869  0070                     ?_SPI_Initialize:	
   870                           ; 1 bytes @ 0x0
   871                           
   872  0070                     ??_SPI_Initialize:	
   873                           ; 1 bytes @ 0x0
   874                           
   875  0070                     ?_SPI_Exchange8bit:	
   876                           ; 1 bytes @ 0x0
   877                           
   878  0070                     ??_SPI_Exchange8bit:	
   879                           ; 1 bytes @ 0x0
   880                           
   881  0070                     ?_SYSTEM_Initialize:	
   882                           ; 1 bytes @ 0x0
   883                           
   884  0070                     ??_SYSTEM_Initialize:	
   885                           ; 1 bytes @ 0x0
   886                           
   887  0070                     ?_EUSART_Write:	
   888                           ; 1 bytes @ 0x0
   889                           
   890  0070                     ??_EUSART_Write:	
   891                           ; 1 bytes @ 0x0
   892                           
   893  0070                     ?_SetChannel:	
   894                           ; 1 bytes @ 0x0
   895                           
   896  0070                     ?_main:	
   897                           ; 1 bytes @ 0x0
   898                           
   899  0070                     ?_SendFrame:	
   900                           ; 1 bytes @ 0x0
   901                           
   902  0070                     ?___lwdiv:	
   903                           ; 2 bytes @ 0x0
   904                           
   905  0070                     SPI_Exchange8bit@data:	
   906                           ; 2 bytes @ 0x0
   907                           
   908  0070                     EUSART_Write@txData:	
   909                           ; 1 bytes @ 0x0
   910                           
   911  0070                     SetChannel@ChannelNumber:	
   912                           ; 1 bytes @ 0x0
   913                           
   914  0070                     ___lwdiv@divisor:	
   915                           ; 2 bytes @ 0x0
   916                           
   917                           
   918                           ; 2 bytes @ 0x0
   919  0070                     	ds	1
   920  0071                     ??_SendFrame:	
   921                           
   922                           ; 1 bytes @ 0x1
   923  0071                     	ds	1
   924  0072                     ??_SetChannel:	
   925  0072                     ?_GetData:	
   926                           ; 1 bytes @ 0x2
   927                           
   928  0072                     SendFrame@Data:	
   929                           ; 4 bytes @ 0x2
   930                           
   931  0072                     ___lwdiv@dividend:	
   932                           ; 1 bytes @ 0x2
   933                           
   934                           
   935                           ; 2 bytes @ 0x2
   936  0072                     	ds	1
   937  0073                     SendFrame@i:	
   938                           
   939                           ; 2 bytes @ 0x3
   940  0073                     	ds	1
   941  0074                     ??___lwdiv:	
   942                           
   943                           ; 1 bytes @ 0x4
   944  0074                     	ds	1
   945  0075                     ___lwdiv@quotient:	
   946                           
   947                           ; 2 bytes @ 0x5
   948  0075                     	ds	2
   949  0077                     ___lwdiv@counter:	
   950                           
   951                           ; 1 bytes @ 0x7
   952  0077                     	ds	1
   953  0078                     ?___lwmod:	
   954  0078                     ___lwmod@divisor:	
   955                           ; 2 bytes @ 0x8
   956                           
   957                           
   958                           ; 2 bytes @ 0x8
   959  0078                     	ds	2
   960  007A                     ___lwmod@dividend:	
   961                           
   962                           ; 2 bytes @ 0xA
   963  007A                     	ds	2
   964  007C                     ??___lwmod:	
   965                           
   966                           ; 1 bytes @ 0xC
   967  007C                     	ds	1
   968  007D                     ___lwmod@counter:	
   969                           
   970                           ; 1 bytes @ 0xD
   971  007D                     	ds	1
   972                           
   973                           	psect	cstackBANK0
   974  0040                     __pcstackBANK0:	
   975  0040                     ??_GetData:	
   976  0040                     ?_sprintf:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0040                     sprintf@f:	
   980                           ; 2 bytes @ 0x0
   981                           
   982                           
   983                           ; 2 bytes @ 0x0
   984  0040                     	ds	6
   985  0046                     ??_sprintf:	
   986                           
   987                           ; 1 bytes @ 0x6
   988  0046                     	ds	4
   989  004A                     sprintf@ap:	
   990                           
   991                           ; 1 bytes @ 0xA
   992  004A                     	ds	1
   993  004B                     sprintf@flag:	
   994                           
   995                           ; 1 bytes @ 0xB
   996  004B                     	ds	1
   997  004C                     sprintf@prec:	
   998                           
   999                           ; 1 bytes @ 0xC
  1000  004C                     	ds	1
  1001  004D                     sprintf@val:	
  1002                           
  1003                           ; 2 bytes @ 0xD
  1004  004D                     	ds	2
  1005  004F                     sprintf@sp:	
  1006                           
  1007                           ; 1 bytes @ 0xF
  1008  004F                     	ds	1
  1009  0050                     sprintf@c:	
  1010                           
  1011                           ; 1 bytes @ 0x10
  1012  0050                     	ds	3
  1013  0053                     GetData@ChannelNumber:	
  1014                           
  1015                           ; 1 bytes @ 0x13
  1016  0053                     	ds	1
  1017  0054                     GetData@MAX31855_Data:	
  1018                           
  1019                           ; 4 bytes @ 0x14
  1020  0054                     	ds	4
  1021  0058                     GetData@Data_A:	
  1022                           
  1023                           ; 1 bytes @ 0x18
  1024  0058                     	ds	1
  1025  0059                     GetData@Data_B:	
  1026                           
  1027                           ; 1 bytes @ 0x19
  1028  0059                     	ds	1
  1029  005A                     GetData@Data_C:	
  1030                           
  1031                           ; 1 bytes @ 0x1A
  1032  005A                     	ds	1
  1033  005B                     GetData@Data_D:	
  1034                           
  1035                           ; 1 bytes @ 0x1B
  1036  005B                     	ds	1
  1037  005C                     ??_main:	
  1038                           
  1039                           ; 1 bytes @ 0x1C
  1040  005C                     	ds	3
  1041                           
  1042                           	psect	maintext
  1043  0693                     __pmaintext:	
  1044 ;;
  1045 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1046 ;;
  1047 ;; *************** function _main *****************
  1048 ;; Defined at:
  1049 ;;		line 199 in file "main.c"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;		None
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;		None
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  1    wreg      void 
  1056 ;; Registers used:
  1057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1058 ;; Tracked objects:
  1059 ;;		On entry : B1F/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMMON   BANK0   BANK1
  1063 ;;      Params:         0       0       0
  1064 ;;      Locals:         0       0       0
  1065 ;;      Temps:          0       3       0
  1066 ;;      Totals:         0       3       0
  1067 ;;Total ram usage:        3 bytes
  1068 ;; Hardware stack levels required when called:    2
  1069 ;; This function calls:
  1070 ;;		_GetData
  1071 ;;		_SYSTEM_Initialize
  1072 ;;		_SendFrame
  1073 ;;		_SetChannel
  1074 ;;		_sprintf
  1075 ;; This function is called by:
  1076 ;;		Startup code after reset
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           
  1081                           ;psect for function _main
  1082  0693                     _main:	
  1083                           
  1084                           ;main.c: 202: SYSTEM_Initialize();
  1085                           
  1086                           ;incstack = 0
  1087                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1088  0693  24A2               	fcall	_SYSTEM_Initialize
  1089                           
  1090                           ;main.c: 203: SetChannel(0);
  1091  0694  3000               	movlw	0
  1092  0695  00F0               	movwf	SetChannel@ChannelNumber
  1093  0696  00F1               	movwf	SetChannel@ChannelNumber+1
  1094  0697  259A               	fcall	_SetChannel
  1095  0698                     l1323:	
  1096                           ;main.c: 220: while (1)
  1097                           
  1098                           
  1099                           ;main.c: 221: {
  1100                           ;main.c: 223: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1101  0698  3015               	movlw	21
  1102  0699  0020               	movlb	0	; select bank0
  1103  069A  00DE               	movwf	??_main+2
  1104  069B  304B               	movlw	75
  1105  069C  00DD               	movwf	??_main+1
  1106  069D  30D1               	movlw	209
  1107  069E  00DC               	movwf	??_main
  1108  069F                     u697:	
  1109  069F  0BDC               	decfsz	??_main,f
  1110  06A0  2E9F               	goto	u697
  1111  06A1  0BDD               	decfsz	??_main+1,f
  1112  06A2  2E9F               	goto	u697
  1113  06A3  0BDE               	decfsz	??_main+2,f
  1114  06A4  2E9F               	goto	u697
  1115  06A5  0000               	nop
  1116                           
  1117                           ;main.c: 224: do { LATBbits.LATB5 = 1; } while(0);
  1118  06A6  0022               	movlb	2	; select bank2
  1119  06A7  168D               	bsf	13,5	;volatile
  1120                           
  1121                           ;main.c: 225: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1122  06A8  3015               	movlw	21
  1123  06A9  0020               	movlb	0	; select bank0
  1124  06AA  00DE               	movwf	??_main+2
  1125  06AB  304B               	movlw	75
  1126  06AC  00DD               	movwf	??_main+1
  1127  06AD  30D1               	movlw	209
  1128  06AE  00DC               	movwf	??_main
  1129  06AF                     u707:	
  1130  06AF  0BDC               	decfsz	??_main,f
  1131  06B0  2EAF               	goto	u707
  1132  06B1  0BDD               	decfsz	??_main+1,f
  1133  06B2  2EAF               	goto	u707
  1134  06B3  0BDE               	decfsz	??_main+2,f
  1135  06B4  2EAF               	goto	u707
  1136  06B5  0000               	nop
  1137                           
  1138                           ;main.c: 226: do { LATBbits.LATB5 = 0; } while(0);
  1139  06B6  0022               	movlb	2	; select bank2
  1140  06B7  128D               	bcf	13,5	;volatile
  1141                           
  1142                           ;main.c: 228: do { LATBbits.LATB4 = 1; } while(0);
  1143  06B8  160D               	bsf	13,4	;volatile
  1144                           
  1145                           ;main.c: 229: CH1_RAW = GetData(1);
  1146  06B9  3001               	movlw	1
  1147  06BA  260F               	fcall	_GetData
  1148  06BB  0875               	movf	?_GetData+3,w
  1149  06BC  0020               	movlb	0	; select bank0
  1150  06BD  00A3               	movwf	_CH1_RAW+3
  1151  06BE  0874               	movf	?_GetData+2,w
  1152  06BF  00A2               	movwf	_CH1_RAW+2
  1153  06C0  0873               	movf	?_GetData+1,w
  1154  06C1  00A1               	movwf	_CH1_RAW+1
  1155  06C2  0872               	movf	?_GetData,w
  1156  06C3  00A0               	movwf	_CH1_RAW
  1157                           
  1158                           ;main.c: 230: CH2_RAW = GetData(2);
  1159  06C4  3002               	movlw	2
  1160  06C5  260F               	fcall	_GetData
  1161  06C6  0875               	movf	?_GetData+3,w
  1162  06C7  0020               	movlb	0	; select bank0
  1163  06C8  00A7               	movwf	_CH2_RAW+3
  1164  06C9  0874               	movf	?_GetData+2,w
  1165  06CA  00A6               	movwf	_CH2_RAW+2
  1166  06CB  0873               	movf	?_GetData+1,w
  1167  06CC  00A5               	movwf	_CH2_RAW+1
  1168  06CD  0872               	movf	?_GetData,w
  1169  06CE  00A4               	movwf	_CH2_RAW
  1170                           
  1171                           ;main.c: 231: CH3_RAW = GetData(3);
  1172  06CF  3003               	movlw	3
  1173  06D0  260F               	fcall	_GetData
  1174  06D1  0875               	movf	?_GetData+3,w
  1175  06D2  0020               	movlb	0	; select bank0
  1176  06D3  00AB               	movwf	_CH3_RAW+3
  1177  06D4  0874               	movf	?_GetData+2,w
  1178  06D5  00AA               	movwf	_CH3_RAW+2
  1179  06D6  0873               	movf	?_GetData+1,w
  1180  06D7  00A9               	movwf	_CH3_RAW+1
  1181  06D8  0872               	movf	?_GetData,w
  1182  06D9  00A8               	movwf	_CH3_RAW
  1183                           
  1184                           ;main.c: 232: CH4_RAW = GetData(4);
  1185  06DA  3004               	movlw	4
  1186  06DB  260F               	fcall	_GetData
  1187  06DC  0875               	movf	?_GetData+3,w
  1188  06DD  0020               	movlb	0	; select bank0
  1189  06DE  00AF               	movwf	_CH4_RAW+3
  1190  06DF  0874               	movf	?_GetData+2,w
  1191  06E0  00AE               	movwf	_CH4_RAW+2
  1192  06E1  0873               	movf	?_GetData+1,w
  1193  06E2  00AD               	movwf	_CH4_RAW+1
  1194  06E3  0872               	movf	?_GetData,w
  1195  06E4  00AC               	movwf	_CH4_RAW
  1196                           
  1197                           ;main.c: 233: CH5_RAW = GetData(5);
  1198  06E5  3005               	movlw	5
  1199  06E6  260F               	fcall	_GetData
  1200  06E7  0875               	movf	?_GetData+3,w
  1201  06E8  0020               	movlb	0	; select bank0
  1202  06E9  00B3               	movwf	_CH5_RAW+3
  1203  06EA  0874               	movf	?_GetData+2,w
  1204  06EB  00B2               	movwf	_CH5_RAW+2
  1205  06EC  0873               	movf	?_GetData+1,w
  1206  06ED  00B1               	movwf	_CH5_RAW+1
  1207  06EE  0872               	movf	?_GetData,w
  1208  06EF  00B0               	movwf	_CH5_RAW
  1209                           
  1210                           ;main.c: 234: CH6_RAW = GetData(6);
  1211  06F0  3006               	movlw	6
  1212  06F1  260F               	fcall	_GetData
  1213  06F2  0875               	movf	?_GetData+3,w
  1214  06F3  0020               	movlb	0	; select bank0
  1215  06F4  00B7               	movwf	_CH6_RAW+3
  1216  06F5  0874               	movf	?_GetData+2,w
  1217  06F6  00B6               	movwf	_CH6_RAW+2
  1218  06F7  0873               	movf	?_GetData+1,w
  1219  06F8  00B5               	movwf	_CH6_RAW+1
  1220  06F9  0872               	movf	?_GetData,w
  1221  06FA  00B4               	movwf	_CH6_RAW
  1222                           
  1223                           ;main.c: 235: CH7_RAW = GetData(7);
  1224  06FB  3007               	movlw	7
  1225  06FC  260F               	fcall	_GetData
  1226  06FD  0875               	movf	?_GetData+3,w
  1227  06FE  0020               	movlb	0	; select bank0
  1228  06FF  00BB               	movwf	_CH7_RAW+3
  1229  0700  0874               	movf	?_GetData+2,w
  1230  0701  00BA               	movwf	_CH7_RAW+2
  1231  0702  0873               	movf	?_GetData+1,w
  1232  0703  00B9               	movwf	_CH7_RAW+1
  1233  0704  0872               	movf	?_GetData,w
  1234  0705  00B8               	movwf	_CH7_RAW
  1235                           
  1236                           ;main.c: 236: CH8_RAW = GetData(8);
  1237  0706  3008               	movlw	8
  1238  0707  260F               	fcall	_GetData
  1239  0708  0875               	movf	?_GetData+3,w
  1240  0709  0020               	movlb	0	; select bank0
  1241  070A  00BF               	movwf	_CH8_RAW+3
  1242  070B  0874               	movf	?_GetData+2,w
  1243  070C  00BE               	movwf	_CH8_RAW+2
  1244  070D  0873               	movf	?_GetData+1,w
  1245  070E  00BD               	movwf	_CH8_RAW+1
  1246  070F  0872               	movf	?_GetData,w
  1247  0710  00BC               	movwf	_CH8_RAW
  1248                           
  1249                           ;main.c: 237: do { LATBbits.LATB4 = 0; } while(0);
  1250  0711  0022               	movlb	2	; select bank2
  1251  0712  120D               	bcf	13,4	;volatile
  1252                           
  1253                           ;main.c: 240: sprintf(Frame,"T = %d",CH1_RAW);
  1254  0713  30DA               	movlw	low (STR_1| (0+32768))
  1255  0714  0020               	movlb	0	; select bank0
  1256  0715  00C0               	movwf	sprintf@f
  1257  0716  3084               	movlw	high (STR_1| (0+32768))
  1258  0717  00C1               	movwf	sprintf@f+1
  1259  0718  0823               	movf	_CH1_RAW+3,w
  1260  0719  00C5               	movwf	?_sprintf+5
  1261  071A  0822               	movf	_CH1_RAW+2,w
  1262  071B  00C4               	movwf	?_sprintf+4
  1263  071C  0821               	movf	_CH1_RAW+1,w
  1264  071D  00C3               	movwf	?_sprintf+3
  1265  071E  0820               	movf	_CH1_RAW,w
  1266  071F  00C2               	movwf	?_sprintf+2
  1267  0720  30A0               	movlw	(low (_Frame| 0))& (0+255)
  1268  0721  2725               	fcall	_sprintf
  1269                           
  1270                           ;main.c: 241: SendFrame(Frame);
  1271  0722  30A0               	movlw	(low (_Frame| 0))& (0+255)
  1272  0723  2510               	fcall	_SendFrame
  1273  0724  2E98               	goto	l1323
  1274  0725                     __end_of_main:	
  1275                           
  1276                           	psect	text1
  1277  0725                     __ptext1:	
  1278 ;; *************** function _sprintf *****************
  1279 ;; Defined at:
  1280 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;  sp              1    wreg     PTR unsigned char 
  1283 ;;		 -> Frame(20), 
  1284 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1285 ;;		 -> STR_1(7), 
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  sp              1   15[BANK0 ] PTR unsigned char 
  1288 ;;		 -> Frame(20), 
  1289 ;;  tmpval          4    0        struct .
  1290 ;;  val             2   13[BANK0 ] unsigned int 
  1291 ;;  cp              2    0        PTR const unsigned char 
  1292 ;;  len             2    0        unsigned int 
  1293 ;;  c               1   16[BANK0 ] char 
  1294 ;;  prec            1   12[BANK0 ] char 
  1295 ;;  flag            1   11[BANK0 ] unsigned char 
  1296 ;;  ap              1   10[BANK0 ] PTR void [1]
  1297 ;;		 -> ?_sprintf(2), 
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  2    0[BANK0 ] int 
  1300 ;; Registers used:
  1301 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMMON   BANK0   BANK1
  1307 ;;      Params:         0       6       0
  1308 ;;      Locals:         0       7       0
  1309 ;;      Temps:          0       4       0
  1310 ;;      Totals:         0      17       0
  1311 ;;Total ram usage:       17 bytes
  1312 ;; Hardware stack levels used:    1
  1313 ;; Hardware stack levels required when called:    1
  1314 ;; This function calls:
  1315 ;;		___lwdiv
  1316 ;;		___lwmod
  1317 ;; This function is called by:
  1318 ;;		_main
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           
  1323                           ;psect for function _sprintf
  1324  0725                     _sprintf:	
  1325                           
  1326                           ;incstack = 0
  1327                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1328                           ;sprintf@sp stored from wreg
  1329  0725  0020               	movlb	0	; select bank0
  1330  0726  00CF               	movwf	sprintf@sp
  1331                           
  1332                           ;doprnt.c: 494: va_list ap;
  1333                           ;doprnt.c: 499: signed char c;
  1334                           ;doprnt.c: 506: signed char prec;
  1335                           ;doprnt.c: 508: unsigned char flag;
  1336                           ;doprnt.c: 523: union {
  1337                           ;doprnt.c: 524: unsigned long vd;
  1338                           ;doprnt.c: 525: double integ;
  1339                           ;doprnt.c: 526: } tmpval;
  1340                           ;doprnt.c: 528: unsigned int val;
  1341                           ;doprnt.c: 529: unsigned len;
  1342                           ;doprnt.c: 530: const char * cp;
  1343                           ;doprnt.c: 533: *ap = __va_start();
  1344  0727  3042               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1345  0728  00C6               	movwf	??_sprintf
  1346  0729  0846               	movf	??_sprintf,w
  1347  072A  00CA               	movwf	sprintf@ap
  1348  072B                     l1285:	
  1349                           ;doprnt.c: 536: while(c = *f++) {
  1350                           
  1351  072B  0841               	movf	sprintf@f+1,w
  1352  072C  00C7               	movwf	??_sprintf+1
  1353  072D  0840               	movf	sprintf@f,w
  1354  072E  00C6               	movwf	??_sprintf
  1355  072F  0AC0               	incf	sprintf@f,f
  1356  0730  1903               	skipnz
  1357  0731  0AC1               	incf	sprintf@f+1,f
  1358  0732  0846               	movf	??_sprintf,w
  1359  0733  0084               	movwf	4
  1360  0734  0847               	movf	??_sprintf+1,w
  1361  0735  0085               	movwf	5
  1362  0736  0800               	movf	0,w	;code access
  1363  0737  00C8               	movwf	??_sprintf+2
  1364  0738  0848               	movf	??_sprintf+2,w
  1365  0739  00D0               	movwf	sprintf@c
  1366  073A  0850               	movf	sprintf@c,w
  1367  073B  1903               	btfsc	3,2
  1368  073C  2FE9               	goto	l1287
  1369                           
  1370                           ;doprnt.c: 538: if(c != '%')
  1371  073D  3025               	movlw	37
  1372  073E  0650               	xorwf	sprintf@c,w
  1373  073F  1903               	btfsc	3,2
  1374  0740  2F4D               	goto	l1241
  1375                           
  1376                           ;doprnt.c: 540: {
  1377                           ;doprnt.c: 541: ((*sp++ = (c)));
  1378  0741  0850               	movf	sprintf@c,w
  1379  0742  00C6               	movwf	??_sprintf
  1380  0743  084F               	movf	sprintf@sp,w
  1381  0744  0086               	movwf	6
  1382  0745  0187               	clrf	7
  1383  0746  0846               	movf	??_sprintf,w
  1384  0747  0081               	movwf	1
  1385  0748  3001               	movlw	1
  1386  0749  00C6               	movwf	??_sprintf
  1387  074A  0846               	movf	??_sprintf,w
  1388  074B  07CF               	addwf	sprintf@sp,f
  1389                           
  1390                           ;doprnt.c: 542: continue;
  1391  074C  2F2B               	goto	l1285
  1392  074D                     l1241:	
  1393                           
  1394                           ;doprnt.c: 543: }
  1395                           ;doprnt.c: 548: flag = 0;
  1396  074D  01CB               	clrf	sprintf@flag
  1397                           
  1398                           ;doprnt.c: 822: }
  1399                           
  1400                           ;doprnt.c: 813: continue;
  1401                           
  1402                           ;doprnt.c: 802: default:
  1403                           
  1404                           ;doprnt.c: 698: case 'i':
  1405                           ;doprnt.c: 699: break;
  1406                           
  1407                           ;doprnt.c: 697: case 'd':
  1408                           
  1409                           ;doprnt.c: 638: goto alldone;
  1410                           
  1411                           ;doprnt.c: 637: case 0:
  1412                           
  1413                           ;doprnt.c: 635: switch(c = *f++) {
  1414  074E  0841               	movf	sprintf@f+1,w
  1415  074F  00C7               	movwf	??_sprintf+1
  1416  0750  0840               	movf	sprintf@f,w
  1417  0751  00C6               	movwf	??_sprintf
  1418  0752  0AC0               	incf	sprintf@f,f
  1419  0753  1903               	skipnz
  1420  0754  0AC1               	incf	sprintf@f+1,f
  1421  0755  0846               	movf	??_sprintf,w
  1422  0756  0084               	movwf	4
  1423  0757  0847               	movf	??_sprintf+1,w
  1424  0758  0085               	movwf	5
  1425  0759  0800               	movf	0,w	;code access
  1426  075A  00D0               	movwf	sprintf@c
  1427                           
  1428                           ; Switch size 1, requested type "space"
  1429                           ; Number of cases is 3, Range of values is 0 to 105
  1430                           ; switch strategies available:
  1431                           ; Name         Instructions Cycles
  1432                           ; simple_byte           10     6 (average)
  1433                           ; direct_byte          218     6 (fixed)
  1434                           ; jumptable            260     6 (fixed)
  1435                           ;	Chosen strategy is simple_byte
  1436  075B  3A00               	xorlw	0	; case 0
  1437  075C  1903               	skipnz
  1438  075D  2FE9               	goto	l1287
  1439  075E  3A64               	xorlw	100	; case 100
  1440  075F  1903               	skipnz
  1441  0760  2F65               	goto	l1247
  1442  0761  3A0D               	xorlw	13	; case 105
  1443  0762  1903               	skipnz
  1444  0763  2F65               	goto	l1247
  1445  0764  2F2B               	goto	l1285
  1446  0765                     l1247:	
  1447                           
  1448                           ;doprnt.c: 1253: {
  1449                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1450  0765  084A               	movf	sprintf@ap,w
  1451  0766  0086               	movwf	6
  1452  0767  0187               	clrf	7
  1453  0768  3F40               	moviw [0]fsr1
  1454  0769  00CD               	movwf	sprintf@val
  1455  076A  3F41               	moviw [1]fsr1
  1456  076B  00CE               	movwf	sprintf@val+1
  1457  076C  3002               	movlw	2
  1458  076D  00C6               	movwf	??_sprintf
  1459  076E  0846               	movf	??_sprintf,w
  1460  076F  07CA               	addwf	sprintf@ap,f
  1461                           
  1462                           ;doprnt.c: 1261: if((int)val < 0) {
  1463  0770  1FCE               	btfss	sprintf@val+1,7
  1464  0771  2F7B               	goto	l1257
  1465                           
  1466                           ;doprnt.c: 1262: flag |= 0x03;
  1467  0772  3003               	movlw	3
  1468  0773  00C6               	movwf	??_sprintf
  1469  0774  0846               	movf	??_sprintf,w
  1470  0775  04CB               	iorwf	sprintf@flag,f
  1471                           
  1472                           ;doprnt.c: 1263: val = -val;
  1473  0776  09CD               	comf	sprintf@val,f
  1474  0777  09CE               	comf	sprintf@val+1,f
  1475  0778  0ACD               	incf	sprintf@val,f
  1476  0779  1903               	skipnz
  1477  077A  0ACE               	incf	sprintf@val+1,f
  1478  077B                     l1257:	
  1479                           
  1480                           ;doprnt.c: 1264: }
  1481                           ;doprnt.c: 1266: }
  1482                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1483  077B  01D0               	clrf	sprintf@c
  1484  077C  0AD0               	incf	sprintf@c,f
  1485  077D  3005               	movlw	5
  1486  077E  0650               	xorwf	sprintf@c,w
  1487  077F  1903               	btfsc	3,2
  1488  0780  2FA0               	goto	l1269
  1489  0781                     l1263:	
  1490                           
  1491                           ;doprnt.c: 1306: if(val < dpowers[c])
  1492  0781  0850               	movf	sprintf@c,w
  1493  0782  00C6               	movwf	??_sprintf
  1494  0783  01C7               	clrf	??_sprintf+1
  1495  0784  35C6               	lslf	??_sprintf,f
  1496  0785  0DC7               	rlf	??_sprintf+1,f
  1497  0786  30D0               	movlw	low (_dpowers| (0+32768))
  1498  0787  0746               	addwf	??_sprintf,w
  1499  0788  0084               	movwf	4
  1500  0789  3084               	movlw	high (_dpowers| (0+32768))
  1501  078A  3D47               	addwfc	??_sprintf+1,w
  1502  078B  0085               	movwf	5
  1503  078C  3F00               	moviw [0]fsr0
  1504  078D  00C8               	movwf	??_sprintf+2
  1505  078E  3F01               	moviw [1]fsr0
  1506  078F  00C9               	movwf	??_sprintf+3
  1507  0790  0849               	movf	??_sprintf+3,w
  1508  0791  024E               	subwf	sprintf@val+1,w
  1509  0792  1D03               	skipz
  1510  0793  2F96               	goto	u585
  1511  0794  0848               	movf	??_sprintf+2,w
  1512  0795  024D               	subwf	sprintf@val,w
  1513  0796                     u585:	
  1514  0796  1C03               	btfss	3,0
  1515  0797  2FA0               	goto	l1269
  1516                           
  1517                           ;doprnt.c: 1307: break;
  1518  0798  3001               	movlw	1
  1519  0799  00C6               	movwf	??_sprintf
  1520  079A  0846               	movf	??_sprintf,w
  1521  079B  07D0               	addwf	sprintf@c,f
  1522  079C  3005               	movlw	5
  1523  079D  0650               	xorwf	sprintf@c,w
  1524  079E  1D03               	btfss	3,2
  1525  079F  2F81               	goto	l1263
  1526  07A0                     l1269:	
  1527                           
  1528                           ;doprnt.c: 1422: {
  1529                           ;doprnt.c: 1438: if(flag & 0x03)
  1530  07A0  084B               	movf	sprintf@flag,w
  1531  07A1  3903               	andlw	3
  1532  07A2  1903               	btfsc	3,2
  1533  07A3  2FAF               	goto	l1275
  1534                           
  1535                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1536  07A4  302D               	movlw	45
  1537  07A5  00C6               	movwf	??_sprintf
  1538  07A6  084F               	movf	sprintf@sp,w
  1539  07A7  0086               	movwf	6
  1540  07A8  0187               	clrf	7
  1541  07A9  0846               	movf	??_sprintf,w
  1542  07AA  0081               	movwf	1
  1543  07AB  3001               	movlw	1
  1544  07AC  00C6               	movwf	??_sprintf
  1545  07AD  0846               	movf	??_sprintf,w
  1546  07AE  07CF               	addwf	sprintf@sp,f
  1547  07AF                     l1275:	
  1548                           
  1549                           ;doprnt.c: 1469: }
  1550                           ;doprnt.c: 1472: prec = c;
  1551  07AF  0850               	movf	sprintf@c,w
  1552  07B0  00C6               	movwf	??_sprintf
  1553  07B1  0846               	movf	??_sprintf,w
  1554  07B2  00CC               	movwf	sprintf@prec
  1555  07B3                     l1283:	
  1556                           ;doprnt.c: 1474: while(prec--) {
  1557                           
  1558  07B3  30FF               	movlw	255
  1559  07B4  00C6               	movwf	??_sprintf
  1560  07B5  0846               	movf	??_sprintf,w
  1561  07B6  07CC               	addwf	sprintf@prec,f
  1562  07B7  0A4C               	incf	sprintf@prec,w
  1563  07B8  1903               	btfsc	3,2
  1564  07B9  2F2B               	goto	l1285
  1565                           
  1566                           ;doprnt.c: 1478: {
  1567                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1568  07BA  300A               	movlw	10
  1569  07BB  00F8               	movwf	___lwmod@divisor
  1570  07BC  3000               	movlw	0
  1571  07BD  00F9               	movwf	___lwmod@divisor+1
  1572  07BE  084C               	movf	sprintf@prec,w
  1573  07BF  00C6               	movwf	??_sprintf
  1574  07C0  01C7               	clrf	??_sprintf+1
  1575  07C1  35C6               	lslf	??_sprintf,f
  1576  07C2  0DC7               	rlf	??_sprintf+1,f
  1577  07C3  30D0               	movlw	low (_dpowers| (0+32768))
  1578  07C4  0746               	addwf	??_sprintf,w
  1579  07C5  0084               	movwf	4
  1580  07C6  3084               	movlw	high (_dpowers| (0+32768))
  1581  07C7  3D47               	addwfc	??_sprintf+1,w
  1582  07C8  0085               	movwf	5
  1583  07C9  3F00               	moviw [0]fsr0
  1584  07CA  00F0               	movwf	___lwdiv@divisor
  1585  07CB  3F01               	moviw [1]fsr0
  1586  07CC  00F1               	movwf	___lwdiv@divisor+1
  1587  07CD  084E               	movf	sprintf@val+1,w
  1588  07CE  00F3               	movwf	___lwdiv@dividend+1
  1589  07CF  084D               	movf	sprintf@val,w
  1590  07D0  00F2               	movwf	___lwdiv@dividend
  1591  07D1  2566               	fcall	___lwdiv
  1592  07D2  0871               	movf	?___lwdiv+1,w
  1593  07D3  00FB               	movwf	___lwmod@dividend+1
  1594  07D4  0870               	movf	?___lwdiv,w
  1595  07D5  00FA               	movwf	___lwmod@dividend
  1596  07D6  253A               	fcall	___lwmod
  1597  07D7  0878               	movf	?___lwmod,w
  1598  07D8  3E30               	addlw	48
  1599  07D9  0020               	movlb	0	; select bank0
  1600  07DA  00C8               	movwf	??_sprintf+2
  1601  07DB  0848               	movf	??_sprintf+2,w
  1602  07DC  00D0               	movwf	sprintf@c
  1603                           
  1604                           ;doprnt.c: 1523: }
  1605                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1606  07DD  0850               	movf	sprintf@c,w
  1607  07DE  00C6               	movwf	??_sprintf
  1608  07DF  084F               	movf	sprintf@sp,w
  1609  07E0  0086               	movwf	6
  1610  07E1  0187               	clrf	7
  1611  07E2  0846               	movf	??_sprintf,w
  1612  07E3  0081               	movwf	1
  1613  07E4  3001               	movlw	1
  1614  07E5  00C6               	movwf	??_sprintf
  1615  07E6  0846               	movf	??_sprintf,w
  1616  07E7  07CF               	addwf	sprintf@sp,f
  1617  07E8  2FB3               	goto	l1283
  1618  07E9                     l1287:	
  1619                           ;doprnt.c: 1525: }
  1620                           ;doprnt.c: 1533: }
  1621                           ;doprnt.c: 1535: alldone:
  1622                           
  1623                           
  1624                           ;doprnt.c: 1538: *sp = 0;
  1625  07E9  084F               	movf	sprintf@sp,w
  1626  07EA  0086               	movwf	6
  1627  07EB  0187               	clrf	7
  1628  07EC  0181               	clrf	1
  1629  07ED  0008               	return
  1630  07EE                     __end_of_sprintf:	
  1631                           ;doprnt.c: 1540: return 0;
  1632                           ;	Return value of _sprintf is never used
  1633                           
  1634                           
  1635                           	psect	text2
  1636  053A                     __ptext2:	
  1637 ;; *************** function ___lwmod *****************
  1638 ;; Defined at:
  1639 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;  divisor         2    8[COMMON] unsigned int 
  1642 ;;  dividend        2   10[COMMON] unsigned int 
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;  counter         1   13[COMMON] unsigned char 
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  2    8[COMMON] unsigned int 
  1647 ;; Registers used:
  1648 ;;		wreg, status,2, status,0
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMMON   BANK0   BANK1
  1654 ;;      Params:         4       0       0
  1655 ;;      Locals:         1       0       0
  1656 ;;      Temps:          1       0       0
  1657 ;;      Totals:         6       0       0
  1658 ;;Total ram usage:        6 bytes
  1659 ;; Hardware stack levels used:    1
  1660 ;; This function calls:
  1661 ;;		Nothing
  1662 ;; This function is called by:
  1663 ;;		_sprintf
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           
  1668                           ;psect for function ___lwmod
  1669  053A                     ___lwmod:	
  1670                           
  1671                           ;incstack = 0
  1672                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1673  053A  0878               	movf	___lwmod@divisor,w
  1674  053B  0479               	iorwf	___lwmod@divisor+1,w
  1675  053C  1903               	btfsc	3,2
  1676  053D  2D61               	goto	l1193
  1677  053E  01FD               	clrf	___lwmod@counter
  1678  053F  0AFD               	incf	___lwmod@counter,f
  1679  0540                     l1183:	
  1680  0540  1BF9               	btfsc	___lwmod@divisor+1,7
  1681  0541  2D4C               	goto	l1185
  1682  0542  3001               	movlw	1
  1683  0543                     u465:	
  1684  0543  35F8               	lslf	___lwmod@divisor,f
  1685  0544  0DF9               	rlf	___lwmod@divisor+1,f
  1686  0545  0B89               	decfsz	9,f
  1687  0546  2D43               	goto	u465
  1688  0547  3001               	movlw	1
  1689  0548  00FC               	movwf	??___lwmod
  1690  0549  087C               	movf	??___lwmod,w
  1691  054A  07FD               	addwf	___lwmod@counter,f
  1692  054B  2D40               	goto	l1183
  1693  054C                     l1185:	
  1694  054C  0879               	movf	___lwmod@divisor+1,w
  1695  054D  027B               	subwf	___lwmod@dividend+1,w
  1696  054E  1D03               	skipz
  1697  054F  2D52               	goto	u485
  1698  0550  0878               	movf	___lwmod@divisor,w
  1699  0551  027A               	subwf	___lwmod@dividend,w
  1700  0552                     u485:	
  1701  0552  1C03               	skipc
  1702  0553  2D58               	goto	l1189
  1703  0554  0878               	movf	___lwmod@divisor,w
  1704  0555  02FA               	subwf	___lwmod@dividend,f
  1705  0556  0879               	movf	___lwmod@divisor+1,w
  1706  0557  3BFB               	subwfb	___lwmod@dividend+1,f
  1707  0558                     l1189:	
  1708  0558  3001               	movlw	1
  1709  0559                     u495:	
  1710  0559  36F9               	lsrf	___lwmod@divisor+1,f
  1711  055A  0CF8               	rrf	___lwmod@divisor,f
  1712  055B  0B89               	decfsz	9,f
  1713  055C  2D59               	goto	u495
  1714  055D  3001               	movlw	1
  1715  055E  02FD               	subwf	___lwmod@counter,f
  1716  055F  1D03               	btfss	3,2
  1717  0560  2D4C               	goto	l1185
  1718  0561                     l1193:	
  1719  0561  087B               	movf	___lwmod@dividend+1,w
  1720  0562  00F9               	movwf	?___lwmod+1
  1721  0563  087A               	movf	___lwmod@dividend,w
  1722  0564  00F8               	movwf	?___lwmod
  1723  0565  0008               	return
  1724  0566                     __end_of___lwmod:	
  1725                           
  1726                           	psect	text3
  1727  0566                     __ptext3:	
  1728 ;; *************** function ___lwdiv *****************
  1729 ;; Defined at:
  1730 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;  divisor         2    0[COMMON] unsigned int 
  1733 ;;  dividend        2    2[COMMON] unsigned int 
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;  quotient        2    5[COMMON] unsigned int 
  1736 ;;  counter         1    7[COMMON] unsigned char 
  1737 ;; Return value:  Size  Location     Type
  1738 ;;                  2    0[COMMON] unsigned int 
  1739 ;; Registers used:
  1740 ;;		wreg, status,2, status,0
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMMON   BANK0   BANK1
  1746 ;;      Params:         4       0       0
  1747 ;;      Locals:         3       0       0
  1748 ;;      Temps:          1       0       0
  1749 ;;      Totals:         8       0       0
  1750 ;;Total ram usage:        8 bytes
  1751 ;; Hardware stack levels used:    1
  1752 ;; This function calls:
  1753 ;;		Nothing
  1754 ;; This function is called by:
  1755 ;;		_sprintf
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           
  1760                           ;psect for function ___lwdiv
  1761  0566                     ___lwdiv:	
  1762                           
  1763                           ;incstack = 0
  1764                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1765  0566  01F5               	clrf	___lwdiv@quotient
  1766  0567  01F6               	clrf	___lwdiv@quotient+1
  1767  0568  0870               	movf	___lwdiv@divisor,w
  1768  0569  0471               	iorwf	___lwdiv@divisor+1,w
  1769  056A  1903               	btfsc	3,2
  1770  056B  2D95               	goto	l1171
  1771  056C  01F7               	clrf	___lwdiv@counter
  1772  056D  0AF7               	incf	___lwdiv@counter,f
  1773  056E                     l1159:	
  1774  056E  1BF1               	btfsc	___lwdiv@divisor+1,7
  1775  056F  2D7A               	goto	l1161
  1776  0570  3001               	movlw	1
  1777  0571                     u395:	
  1778  0571  35F0               	lslf	___lwdiv@divisor,f
  1779  0572  0DF1               	rlf	___lwdiv@divisor+1,f
  1780  0573  0B89               	decfsz	9,f
  1781  0574  2D71               	goto	u395
  1782  0575  3001               	movlw	1
  1783  0576  00F4               	movwf	??___lwdiv
  1784  0577  0874               	movf	??___lwdiv,w
  1785  0578  07F7               	addwf	___lwdiv@counter,f
  1786  0579  2D6E               	goto	l1159
  1787  057A                     l1161:	
  1788  057A  3001               	movlw	1
  1789  057B                     u415:	
  1790  057B  35F5               	lslf	___lwdiv@quotient,f
  1791  057C  0DF6               	rlf	___lwdiv@quotient+1,f
  1792  057D  0B89               	decfsz	9,f
  1793  057E  2D7B               	goto	u415
  1794  057F  0871               	movf	___lwdiv@divisor+1,w
  1795  0580  0273               	subwf	___lwdiv@dividend+1,w
  1796  0581  1D03               	skipz
  1797  0582  2D85               	goto	u425
  1798  0583  0870               	movf	___lwdiv@divisor,w
  1799  0584  0272               	subwf	___lwdiv@dividend,w
  1800  0585                     u425:	
  1801  0585  1C03               	skipc
  1802  0586  2D8C               	goto	l1167
  1803  0587  0870               	movf	___lwdiv@divisor,w
  1804  0588  02F2               	subwf	___lwdiv@dividend,f
  1805  0589  0871               	movf	___lwdiv@divisor+1,w
  1806  058A  3BF3               	subwfb	___lwdiv@dividend+1,f
  1807  058B  1475               	bsf	___lwdiv@quotient,0
  1808  058C                     l1167:	
  1809  058C  3001               	movlw	1
  1810  058D                     u435:	
  1811  058D  36F1               	lsrf	___lwdiv@divisor+1,f
  1812  058E  0CF0               	rrf	___lwdiv@divisor,f
  1813  058F  0B89               	decfsz	9,f
  1814  0590  2D8D               	goto	u435
  1815  0591  3001               	movlw	1
  1816  0592  02F7               	subwf	___lwdiv@counter,f
  1817  0593  1D03               	btfss	3,2
  1818  0594  2D7A               	goto	l1161
  1819  0595                     l1171:	
  1820  0595  0876               	movf	___lwdiv@quotient+1,w
  1821  0596  00F1               	movwf	?___lwdiv+1
  1822  0597  0875               	movf	___lwdiv@quotient,w
  1823  0598  00F0               	movwf	?___lwdiv
  1824  0599  0008               	return
  1825  059A                     __end_of___lwdiv:	
  1826                           
  1827                           	psect	text4
  1828  0510                     __ptext4:	
  1829 ;; *************** function _SendFrame *****************
  1830 ;; Defined at:
  1831 ;;		line 56 in file "main.c"
  1832 ;; Parameters:    Size  Location     Type
  1833 ;;  Data            1    wreg     PTR unsigned char 
  1834 ;;		 -> Frame(20), 
  1835 ;; Auto vars:     Size  Location     Type
  1836 ;;  Data            1    2[COMMON] PTR unsigned char 
  1837 ;;		 -> Frame(20), 
  1838 ;;  i               2    3[COMMON] int 
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  2  168[None  ] int 
  1841 ;; Registers used:
  1842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMMON   BANK0   BANK1
  1848 ;;      Params:         0       0       0
  1849 ;;      Locals:         3       0       0
  1850 ;;      Temps:          1       0       0
  1851 ;;      Totals:         4       0       0
  1852 ;;Total ram usage:        4 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; Hardware stack levels required when called:    1
  1855 ;; This function calls:
  1856 ;;		_EUSART_Write
  1857 ;; This function is called by:
  1858 ;;		_main
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           
  1863                           ;psect for function _SendFrame
  1864  0510                     _SendFrame:	
  1865                           
  1866                           ;incstack = 0
  1867                           ; Regs used in _SendFrame: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1868                           ;SendFrame@Data stored from wreg
  1869  0510  00F2               	movwf	SendFrame@Data
  1870                           
  1871                           ;main.c: 57: for(int i=0; i<20; i++)
  1872  0511  01F3               	clrf	SendFrame@i
  1873  0512  01F4               	clrf	SendFrame@i+1
  1874  0513  0874               	movf	SendFrame@i+1,w
  1875  0514  3A80               	xorlw	128
  1876  0515  00F1               	movwf	??_SendFrame
  1877  0516  3080               	movlw	128
  1878  0517  0271               	subwf	??_SendFrame,w
  1879  0518  1D03               	skipz
  1880  0519  2D1C               	goto	u515
  1881  051A  3014               	movlw	20
  1882  051B  0273               	subwf	SendFrame@i,w
  1883  051C                     u515:	
  1884  051C  1803               	btfsc	3,0
  1885  051D  2D35               	goto	l1211
  1886  051E                     l1205:	
  1887                           
  1888                           ;main.c: 58: {
  1889                           ;main.c: 59: EUSART_Write(Data[i]);
  1890  051E  0873               	movf	SendFrame@i,w
  1891  051F  0772               	addwf	SendFrame@Data,w
  1892  0520  00F1               	movwf	??_SendFrame
  1893  0521  0871               	movf	??_SendFrame,w
  1894  0522  0086               	movwf	6
  1895  0523  0187               	clrf	7
  1896  0524  0801               	movf	1,w
  1897  0525  24B4               	fcall	_EUSART_Write
  1898  0526  3001               	movlw	1
  1899  0527  07F3               	addwf	SendFrame@i,f
  1900  0528  3000               	movlw	0
  1901  0529  3DF4               	addwfc	SendFrame@i+1,f
  1902  052A  0874               	movf	SendFrame@i+1,w
  1903  052B  3A80               	xorlw	128
  1904  052C  00F1               	movwf	??_SendFrame
  1905  052D  3080               	movlw	128
  1906  052E  0271               	subwf	??_SendFrame,w
  1907  052F  1D03               	skipz
  1908  0530  2D33               	goto	u525
  1909  0531  3014               	movlw	20
  1910  0532  0273               	subwf	SendFrame@i,w
  1911  0533                     u525:	
  1912  0533  1C03               	skipc
  1913  0534  2D1E               	goto	l1205
  1914  0535                     l1211:	
  1915                           
  1916                           ;main.c: 60: }
  1917                           ;main.c: 61: EUSART_Write(0x0D);
  1918  0535  300D               	movlw	13
  1919  0536  24B4               	fcall	_EUSART_Write
  1920                           
  1921                           ;main.c: 62: EUSART_Write(0x0A);
  1922  0537  300A               	movlw	10
  1923  0538  24B4               	fcall	_EUSART_Write
  1924  0539  0008               	return
  1925  053A                     __end_of_SendFrame:	
  1926                           
  1927                           	psect	text5
  1928  04B4                     __ptext5:	
  1929 ;; *************** function _EUSART_Write *****************
  1930 ;; Defined at:
  1931 ;;		line 96 in file "mcc_generated_files/eusart.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;  txData          1    wreg     unsigned char 
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  txData          1    0[COMMON] unsigned char 
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  1    wreg      void 
  1938 ;; Registers used:
  1939 ;;		wreg
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMMON   BANK0   BANK1
  1945 ;;      Params:         0       0       0
  1946 ;;      Locals:         1       0       0
  1947 ;;      Temps:          0       0       0
  1948 ;;      Totals:         1       0       0
  1949 ;;Total ram usage:        1 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; This function calls:
  1952 ;;		Nothing
  1953 ;; This function is called by:
  1954 ;;		_SendFrame
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           
  1959                           ;psect for function _EUSART_Write
  1960  04B4                     _EUSART_Write:	
  1961                           
  1962                           ;incstack = 0
  1963                           ; Regs used in _EUSART_Write: [wreg]
  1964                           ;EUSART_Write@txData stored from wreg
  1965  04B4  00F0               	movwf	EUSART_Write@txData
  1966  04B5                     l99:	
  1967                           ;eusart.c: 99: {
  1968                           
  1969                           ;eusart.c: 98: while(0 == PIR1bits.TXIF)
  1970                           
  1971  04B5  0020               	movlb	0	; select bank0
  1972  04B6  1E11               	btfss	17,4	;volatile
  1973  04B7  2CB5               	goto	l99
  1974                           
  1975                           ;eusart.c: 100: }
  1976                           ;eusart.c: 102: TXREG = txData;
  1977  04B8  0870               	movf	EUSART_Write@txData,w
  1978  04B9  0023               	movlb	3	; select bank3
  1979  04BA  009A               	movwf	26	;volatile
  1980  04BB  0008               	return
  1981  04BC                     __end_of_EUSART_Write:	
  1982                           
  1983                           	psect	text6
  1984  04A2                     __ptext6:	
  1985 ;; *************** function _SYSTEM_Initialize *****************
  1986 ;; Defined at:
  1987 ;;		line 69 in file "mcc_generated_files/mcc.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;		None
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, status,2, status,0, pclath, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMMON   BANK0   BANK1
  2001 ;;      Params:         0       0       0
  2002 ;;      Locals:         0       0       0
  2003 ;;      Temps:          0       0       0
  2004 ;;      Totals:         0       0       0
  2005 ;;Total ram usage:        0 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    1
  2008 ;; This function calls:
  2009 ;;		_EUSART_Initialize
  2010 ;;		_OSCILLATOR_Initialize
  2011 ;;		_PIN_MANAGER_Initialize
  2012 ;;		_SPI_Initialize
  2013 ;;		_WDT_Initialize
  2014 ;; This function is called by:
  2015 ;;		_main
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           
  2020                           ;psect for function _SYSTEM_Initialize
  2021  04A2                     _SYSTEM_Initialize:	
  2022                           
  2023                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  2024                           
  2025                           ;incstack = 0
  2026                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2027  04A2  24F5               	fcall	_PIN_MANAGER_Initialize
  2028                           
  2029                           ;mcc.c: 73: OSCILLATOR_Initialize();
  2030  04A3  2494               	fcall	_OSCILLATOR_Initialize
  2031                           
  2032                           ;mcc.c: 74: WDT_Initialize();
  2033  04A4  2498               	fcall	_WDT_Initialize
  2034                           
  2035                           ;mcc.c: 75: SPI_Initialize();
  2036  04A5  249C               	fcall	_SPI_Initialize
  2037                           
  2038                           ;mcc.c: 76: EUSART_Initialize();
  2039  04A6  24C5               	fcall	_EUSART_Initialize
  2040  04A7  0008               	return
  2041  04A8                     __end_of_SYSTEM_Initialize:	
  2042                           
  2043                           	psect	text7
  2044  0498                     __ptext7:	
  2045 ;; *************** function _WDT_Initialize *****************
  2046 ;; Defined at:
  2047 ;;		line 87 in file "mcc_generated_files/mcc.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;		None
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;		None
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  1    wreg      void 
  2054 ;; Registers used:
  2055 ;;		wreg
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMMON   BANK0   BANK1
  2061 ;;      Params:         0       0       0
  2062 ;;      Locals:         0       0       0
  2063 ;;      Temps:          0       0       0
  2064 ;;      Totals:         0       0       0
  2065 ;;Total ram usage:        0 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; This function calls:
  2068 ;;		Nothing
  2069 ;; This function is called by:
  2070 ;;		_SYSTEM_Initialize
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           
  2075                           ;psect for function _WDT_Initialize
  2076  0498                     _WDT_Initialize:	
  2077                           
  2078                           ;mcc.c: 90: WDTCON = 0x16;
  2079                           
  2080                           ;incstack = 0
  2081                           ; Regs used in _WDT_Initialize: [wreg]
  2082  0498  3016               	movlw	22
  2083  0499  0021               	movlb	1	; select bank1
  2084  049A  0097               	movwf	23	;volatile
  2085  049B  0008               	return
  2086  049C                     __end_of_WDT_Initialize:	
  2087                           
  2088                           	psect	text8
  2089  049C                     __ptext8:	
  2090 ;; *************** function _SPI_Initialize *****************
  2091 ;; Defined at:
  2092 ;;		line 63 in file "mcc_generated_files/spi.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;		None
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;		None
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  1    wreg      void 
  2099 ;; Registers used:
  2100 ;;		wreg, status,2
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMMON   BANK0   BANK1
  2106 ;;      Params:         0       0       0
  2107 ;;      Locals:         0       0       0
  2108 ;;      Temps:          0       0       0
  2109 ;;      Totals:         0       0       0
  2110 ;;Total ram usage:        0 bytes
  2111 ;; Hardware stack levels used:    1
  2112 ;; This function calls:
  2113 ;;		Nothing
  2114 ;; This function is called by:
  2115 ;;		_SYSTEM_Initialize
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           
  2120                           ;psect for function _SPI_Initialize
  2121  049C                     _SPI_Initialize:	
  2122                           
  2123                           ;spi.c: 68: SSP1STAT = 0x00;
  2124                           
  2125                           ;incstack = 0
  2126                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  2127  049C  0024               	movlb	4	; select bank4
  2128  049D  0194               	clrf	20	;volatile
  2129                           
  2130                           ;spi.c: 71: SSP1CON1 = 0x21;
  2131  049E  3021               	movlw	33
  2132  049F  0095               	movwf	21	;volatile
  2133                           
  2134                           ;spi.c: 74: SSP1ADD = 0x00;
  2135  04A0  0192               	clrf	18	;volatile
  2136  04A1  0008               	return
  2137  04A2                     __end_of_SPI_Initialize:	
  2138                           
  2139                           	psect	text9
  2140  04F5                     __ptext9:	
  2141 ;; *************** function _PIN_MANAGER_Initialize *****************
  2142 ;; Defined at:
  2143 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  2144 ;; Parameters:    Size  Location     Type
  2145 ;;		None
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;		None
  2148 ;; Return value:  Size  Location     Type
  2149 ;;                  1    wreg      void 
  2150 ;; Registers used:
  2151 ;;		wreg, status,2
  2152 ;; Tracked objects:
  2153 ;;		On entry : 0/0
  2154 ;;		On exit  : 0/0
  2155 ;;		Unchanged: 0/0
  2156 ;; Data sizes:     COMMON   BANK0   BANK1
  2157 ;;      Params:         0       0       0
  2158 ;;      Locals:         0       0       0
  2159 ;;      Temps:          0       0       0
  2160 ;;      Totals:         0       0       0
  2161 ;;Total ram usage:        0 bytes
  2162 ;; Hardware stack levels used:    1
  2163 ;; This function calls:
  2164 ;;		Nothing
  2165 ;; This function is called by:
  2166 ;;		_SYSTEM_Initialize
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           
  2171                           ;psect for function _PIN_MANAGER_Initialize
  2172  04F5                     _PIN_MANAGER_Initialize:	
  2173                           
  2174                           ;pin_manager.c: 56: LATA = 0xFF;
  2175                           
  2176                           ;incstack = 0
  2177                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2178  04F5  30FF               	movlw	255
  2179  04F6  0022               	movlb	2	; select bank2
  2180  04F7  008C               	movwf	12	;volatile
  2181                           
  2182                           ;pin_manager.c: 57: LATB = 0x00;
  2183  04F8  018D               	clrf	13	;volatile
  2184                           
  2185                           ;pin_manager.c: 58: LATC = 0x00;
  2186  04F9  018E               	clrf	14	;volatile
  2187                           
  2188                           ;pin_manager.c: 63: TRISA = 0x00;
  2189  04FA  0021               	movlb	1	; select bank1
  2190  04FB  018C               	clrf	12	;volatile
  2191                           
  2192                           ;pin_manager.c: 64: TRISB = 0xC7;
  2193  04FC  30C7               	movlw	199
  2194  04FD  008D               	movwf	13	;volatile
  2195                           
  2196                           ;pin_manager.c: 65: TRISC = 0x97;
  2197  04FE  3097               	movlw	151
  2198  04FF  008E               	movwf	14	;volatile
  2199                           
  2200                           ;pin_manager.c: 70: ANSELC = 0x00;
  2201  0500  0023               	movlb	3	; select bank3
  2202  0501  018E               	clrf	14	;volatile
  2203                           
  2204                           ;pin_manager.c: 71: ANSELB = 0x3F;
  2205  0502  303F               	movlw	63
  2206  0503  008D               	movwf	13	;volatile
  2207                           
  2208                           ;pin_manager.c: 72: ANSELA = 0x2F;
  2209  0504  302F               	movlw	47
  2210  0505  008C               	movwf	12	;volatile
  2211                           
  2212                           ;pin_manager.c: 77: WPUE = 0x08;
  2213  0506  3008               	movlw	8
  2214  0507  0024               	movlb	4	; select bank4
  2215  0508  0090               	movwf	16	;volatile
  2216                           
  2217                           ;pin_manager.c: 78: WPUB = 0xFF;
  2218  0509  30FF               	movlw	255
  2219  050A  008D               	movwf	13	;volatile
  2220                           
  2221                           ;pin_manager.c: 79: OPTION_REGbits.nWPUEN = 0;
  2222  050B  0021               	movlb	1	; select bank1
  2223  050C  1395               	bcf	21,7	;volatile
  2224                           
  2225                           ;pin_manager.c: 85: APFCON = 0x00;
  2226  050D  0022               	movlb	2	; select bank2
  2227  050E  019D               	clrf	29	;volatile
  2228  050F  0008               	return
  2229  0510                     __end_of_PIN_MANAGER_Initialize:	
  2230                           
  2231                           	psect	text10
  2232  0494                     __ptext10:	
  2233 ;; *************** function _OSCILLATOR_Initialize *****************
  2234 ;; Defined at:
  2235 ;;		line 79 in file "mcc_generated_files/mcc.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;		None
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;		None
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		wreg
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMMON   BANK0   BANK1
  2249 ;;      Params:         0       0       0
  2250 ;;      Locals:         0       0       0
  2251 ;;      Temps:          0       0       0
  2252 ;;      Totals:         0       0       0
  2253 ;;Total ram usage:        0 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; This function calls:
  2256 ;;		Nothing
  2257 ;; This function is called by:
  2258 ;;		_SYSTEM_Initialize
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           
  2263                           ;psect for function _OSCILLATOR_Initialize
  2264  0494                     _OSCILLATOR_Initialize:	
  2265                           
  2266                           ;mcc.c: 82: OSCCON = 0x78;
  2267                           
  2268                           ;incstack = 0
  2269                           ; Regs used in _OSCILLATOR_Initialize: [wreg]
  2270  0494  3078               	movlw	120
  2271  0495  0021               	movlb	1	; select bank1
  2272  0496  0099               	movwf	25	;volatile
  2273  0497  0008               	return
  2274  0498                     __end_of_OSCILLATOR_Initialize:	
  2275                           
  2276                           	psect	text11
  2277  04C5                     __ptext11:	
  2278 ;; *************** function _EUSART_Initialize *****************
  2279 ;; Defined at:
  2280 ;;		line 55 in file "mcc_generated_files/eusart.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;		None
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;		None
  2285 ;; Return value:  Size  Location     Type
  2286 ;;                  1    wreg      void 
  2287 ;; Registers used:
  2288 ;;		wreg, status,2
  2289 ;; Tracked objects:
  2290 ;;		On entry : 0/0
  2291 ;;		On exit  : 0/0
  2292 ;;		Unchanged: 0/0
  2293 ;; Data sizes:     COMMON   BANK0   BANK1
  2294 ;;      Params:         0       0       0
  2295 ;;      Locals:         0       0       0
  2296 ;;      Temps:          0       0       0
  2297 ;;      Totals:         0       0       0
  2298 ;;Total ram usage:        0 bytes
  2299 ;; Hardware stack levels used:    1
  2300 ;; This function calls:
  2301 ;;		Nothing
  2302 ;; This function is called by:
  2303 ;;		_SYSTEM_Initialize
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           
  2308                           ;psect for function _EUSART_Initialize
  2309  04C5                     _EUSART_Initialize:	
  2310                           
  2311                           ;eusart.c: 60: BAUDCON = 0x08;
  2312                           
  2313                           ;incstack = 0
  2314                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  2315  04C5  3008               	movlw	8
  2316  04C6  0023               	movlb	3	; select bank3
  2317  04C7  009F               	movwf	31	;volatile
  2318                           
  2319                           ;eusart.c: 63: RCSTA = 0x90;
  2320  04C8  3090               	movlw	144
  2321  04C9  009D               	movwf	29	;volatile
  2322                           
  2323                           ;eusart.c: 66: TXSTA = 0x24;
  2324  04CA  3024               	movlw	36
  2325  04CB  009E               	movwf	30	;volatile
  2326                           
  2327                           ;eusart.c: 69: SPBRGL = 0xCF;
  2328  04CC  30CF               	movlw	207
  2329  04CD  009B               	movwf	27	;volatile
  2330                           
  2331                           ;eusart.c: 72: SPBRGH = 0x00;
  2332  04CE  019C               	clrf	28	;volatile
  2333  04CF  0008               	return
  2334  04D0                     __end_of_EUSART_Initialize:	
  2335                           
  2336                           	psect	text12
  2337  060F                     __ptext12:	
  2338 ;; *************** function _GetData *****************
  2339 ;; Defined at:
  2340 ;;		line 173 in file "main.c"
  2341 ;; Parameters:    Size  Location     Type
  2342 ;;  ChannelNumbe    1    wreg     unsigned char 
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;  ChannelNumbe    1   19[BANK0 ] unsigned char 
  2345 ;;  MAX31855_Dat    4   20[BANK0 ] unsigned long 
  2346 ;;  Data_D          1   27[BANK0 ] unsigned char 
  2347 ;;  Data_C          1   26[BANK0 ] unsigned char 
  2348 ;;  Data_B          1   25[BANK0 ] unsigned char 
  2349 ;;  Data_A          1   24[BANK0 ] unsigned char 
  2350 ;; Return value:  Size  Location     Type
  2351 ;;                  4    2[COMMON] unsigned long 
  2352 ;; Registers used:
  2353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2354 ;; Tracked objects:
  2355 ;;		On entry : 0/0
  2356 ;;		On exit  : 0/0
  2357 ;;		Unchanged: 0/0
  2358 ;; Data sizes:     COMMON   BANK0   BANK1
  2359 ;;      Params:         4       0       0
  2360 ;;      Locals:         0       9       0
  2361 ;;      Temps:          0      19       0
  2362 ;;      Totals:         4      28       0
  2363 ;;Total ram usage:       32 bytes
  2364 ;; Hardware stack levels used:    1
  2365 ;; Hardware stack levels required when called:    1
  2366 ;; This function calls:
  2367 ;;		_SPI_Exchange8bit
  2368 ;;		_SetChannel
  2369 ;; This function is called by:
  2370 ;;		_main
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           
  2375                           ;psect for function _GetData
  2376  060F                     _GetData:	
  2377                           
  2378                           ;incstack = 0
  2379                           ; Regs used in _GetData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2380                           ;GetData@ChannelNumber stored from wreg
  2381  060F  0020               	movlb	0	; select bank0
  2382  0610  00D3               	movwf	GetData@ChannelNumber
  2383                           
  2384                           ;main.c: 175: uint8_t Data_A;
  2385                           ;main.c: 176: uint8_t Data_B;
  2386                           ;main.c: 177: uint8_t Data_C;
  2387                           ;main.c: 178: uint8_t Data_D;
  2388                           ;main.c: 180: uint32_t MAX31855_Data = 0;
  2389  0611  3000               	movlw	0
  2390  0612  00D7               	movwf	GetData@MAX31855_Data+3
  2391  0613  3000               	movlw	0
  2392  0614  00D6               	movwf	GetData@MAX31855_Data+2
  2393  0615  3000               	movlw	0
  2394  0616  00D5               	movwf	GetData@MAX31855_Data+1
  2395  0617  3000               	movlw	0
  2396  0618  00D4               	movwf	GetData@MAX31855_Data
  2397                           
  2398                           ;main.c: 182: SetChannel(ChannelNumber);
  2399  0619  0853               	movf	GetData@ChannelNumber,w
  2400  061A  00C0               	movwf	??_GetData
  2401  061B  01C1               	clrf	??_GetData+1
  2402  061C  0840               	movf	??_GetData,w
  2403  061D  00F0               	movwf	SetChannel@ChannelNumber
  2404  061E  0841               	movf	??_GetData+1,w
  2405  061F  00F1               	movwf	SetChannel@ChannelNumber+1
  2406  0620  259A               	fcall	_SetChannel
  2407                           
  2408                           ;main.c: 183: Data_A = SPI_Exchange8bit(0);
  2409  0621  3000               	movlw	0
  2410  0622  24BC               	fcall	_SPI_Exchange8bit
  2411  0623  0020               	movlb	0	; select bank0
  2412  0624  00C0               	movwf	??_GetData
  2413  0625  0840               	movf	??_GetData,w
  2414  0626  00D8               	movwf	GetData@Data_A
  2415                           
  2416                           ;main.c: 184: Data_B = SPI_Exchange8bit(0);
  2417  0627  3000               	movlw	0
  2418  0628  24BC               	fcall	_SPI_Exchange8bit
  2419  0629  0020               	movlb	0	; select bank0
  2420  062A  00C0               	movwf	??_GetData
  2421  062B  0840               	movf	??_GetData,w
  2422  062C  00D9               	movwf	GetData@Data_B
  2423                           
  2424                           ;main.c: 185: Data_C = SPI_Exchange8bit(0);
  2425  062D  3000               	movlw	0
  2426  062E  24BC               	fcall	_SPI_Exchange8bit
  2427  062F  0020               	movlb	0	; select bank0
  2428  0630  00C0               	movwf	??_GetData
  2429  0631  0840               	movf	??_GetData,w
  2430  0632  00DA               	movwf	GetData@Data_C
  2431                           
  2432                           ;main.c: 186: Data_D = SPI_Exchange8bit(0);
  2433  0633  3000               	movlw	0
  2434  0634  24BC               	fcall	_SPI_Exchange8bit
  2435  0635  0020               	movlb	0	; select bank0
  2436  0636  00C0               	movwf	??_GetData
  2437  0637  0840               	movf	??_GetData,w
  2438  0638  00DB               	movwf	GetData@Data_D
  2439                           
  2440                           ;main.c: 187: SetChannel(0);
  2441  0639  3000               	movlw	0
  2442  063A  00F0               	movwf	SetChannel@ChannelNumber
  2443  063B  00F1               	movwf	SetChannel@ChannelNumber+1
  2444  063C  259A               	fcall	_SetChannel
  2445                           
  2446                           ;main.c: 189: MAX31855_Data = (Data_A *16777216) + (Data_B *65536) + (Data_C * 256) + Da
      +                          ta_D;
  2447  063D  0020               	movlb	0	; select bank0
  2448  063E  085B               	movf	GetData@Data_D,w
  2449  063F  00C0               	movwf	??_GetData
  2450  0640  01C1               	clrf	??_GetData+1
  2451  0641  01C2               	clrf	??_GetData+2
  2452  0642  01C3               	clrf	??_GetData+3
  2453  0643  085A               	movf	GetData@Data_C,w
  2454  0644  00C4               	movwf	??_GetData+4
  2455  0645  01C5               	clrf	??_GetData+5
  2456  0646  0844               	movf	??_GetData+4,w
  2457  0647  00C5               	movwf	??_GetData+5
  2458  0648  01C4               	clrf	??_GetData+4
  2459  0649  0844               	movf	??_GetData+4,w
  2460  064A  00C7               	movwf	??_GetData+7
  2461  064B  0845               	movf	??_GetData+5,w
  2462  064C  00C8               	movwf	??_GetData+8
  2463  064D  3000               	movlw	0
  2464  064E  1BC8               	btfsc	??_GetData+8,7
  2465  064F  30FF               	movlw	255
  2466  0650  00C9               	movwf	??_GetData+9
  2467  0651  00CA               	movwf	??_GetData+10
  2468  0652  0859               	movf	GetData@Data_B,w
  2469  0653  00CB               	movwf	??_GetData+11
  2470  0654  01CC               	clrf	??_GetData+12
  2471  0655  01CD               	clrf	??_GetData+13
  2472  0656  01CE               	clrf	??_GetData+14
  2473  0657  3010               	movlw	16
  2474  0658                     u535:	
  2475  0658  35CB               	lslf	??_GetData+11,f
  2476  0659  0DCC               	rlf	??_GetData+12,f
  2477  065A  0DCD               	rlf	??_GetData+13,f
  2478  065B  0DCE               	rlf	??_GetData+14,f
  2479  065C  0B89               	decfsz	9,f
  2480  065D  2E58               	goto	u535
  2481  065E  0858               	movf	GetData@Data_A,w
  2482  065F  00CF               	movwf	??_GetData+15
  2483  0660  01D0               	clrf	??_GetData+16
  2484  0661  01D1               	clrf	??_GetData+17
  2485  0662  01D2               	clrf	??_GetData+18
  2486  0663  3018               	movlw	24
  2487  0664                     u545:	
  2488  0664  35CF               	lslf	??_GetData+15,f
  2489  0665  0DD0               	rlf	??_GetData+16,f
  2490  0666  0DD1               	rlf	??_GetData+17,f
  2491  0667  0DD2               	rlf	??_GetData+18,f
  2492  0668  0B89               	decfsz	9,f
  2493  0669  2E64               	goto	u545
  2494  066A  084F               	movf	??_GetData+15,w
  2495  066B  07CB               	addwf	??_GetData+11,f
  2496  066C  0850               	movf	??_GetData+16,w
  2497  066D  3DCC               	addwfc	??_GetData+12,f
  2498  066E  0851               	movf	??_GetData+17,w
  2499  066F  3DCD               	addwfc	??_GetData+13,f
  2500  0670  0852               	movf	??_GetData+18,w
  2501  0671  3DCE               	addwfc	??_GetData+14,f
  2502  0672  084B               	movf	??_GetData+11,w
  2503  0673  07C7               	addwf	??_GetData+7,f
  2504  0674  084C               	movf	??_GetData+12,w
  2505  0675  3DC8               	addwfc	??_GetData+8,f
  2506  0676  084D               	movf	??_GetData+13,w
  2507  0677  3DC9               	addwfc	??_GetData+9,f
  2508  0678  084E               	movf	??_GetData+14,w
  2509  0679  3DCA               	addwfc	??_GetData+10,f
  2510  067A  0847               	movf	??_GetData+7,w
  2511  067B  07C0               	addwf	??_GetData,f
  2512  067C  0848               	movf	??_GetData+8,w
  2513  067D  3DC1               	addwfc	??_GetData+1,f
  2514  067E  0849               	movf	??_GetData+9,w
  2515  067F  3DC2               	addwfc	??_GetData+2,f
  2516  0680  084A               	movf	??_GetData+10,w
  2517  0681  3DC3               	addwfc	??_GetData+3,f
  2518  0682  0843               	movf	??_GetData+3,w
  2519  0683  00D7               	movwf	GetData@MAX31855_Data+3
  2520  0684  0842               	movf	??_GetData+2,w
  2521  0685  00D6               	movwf	GetData@MAX31855_Data+2
  2522  0686  0841               	movf	??_GetData+1,w
  2523  0687  00D5               	movwf	GetData@MAX31855_Data+1
  2524  0688  0840               	movf	??_GetData,w
  2525  0689  00D4               	movwf	GetData@MAX31855_Data
  2526                           
  2527                           ;main.c: 191: return MAX31855_Data;
  2528  068A  0857               	movf	GetData@MAX31855_Data+3,w
  2529  068B  00F5               	movwf	?_GetData+3
  2530  068C  0856               	movf	GetData@MAX31855_Data+2,w
  2531  068D  00F4               	movwf	?_GetData+2
  2532  068E  0855               	movf	GetData@MAX31855_Data+1,w
  2533  068F  00F3               	movwf	?_GetData+1
  2534  0690  0854               	movf	GetData@MAX31855_Data,w
  2535  0691  00F2               	movwf	?_GetData
  2536  0692  0008               	return
  2537  0693                     __end_of_GetData:	
  2538                           
  2539                           	psect	text13
  2540  059A                     __ptext13:	
  2541 ;; *************** function _SetChannel *****************
  2542 ;; Defined at:
  2543 ;;		line 65 in file "main.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;  ChannelNumbe    2    0[COMMON] int 
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;		None
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  1    wreg      void 
  2550 ;; Registers used:
  2551 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMMON   BANK0   BANK1
  2557 ;;      Params:         2       0       0
  2558 ;;      Locals:         0       0       0
  2559 ;;      Temps:          0       0       0
  2560 ;;      Totals:         2       0       0
  2561 ;;Total ram usage:        2 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; This function calls:
  2564 ;;		Nothing
  2565 ;; This function is called by:
  2566 ;;		_GetData
  2567 ;;		_main
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           
  2572                           ;psect for function _SetChannel
  2573  059A                     _SetChannel:	
  2574                           
  2575                           ;main.c: 66: switch (ChannelNumber){
  2576                           
  2577                           ;incstack = 0
  2578                           ; Regs used in _SetChannel: [wreg-fsr0h+status,2+status,0]
  2579  059A  2DFF               	goto	l1139
  2580  059B                     l176:	
  2581                           ;main.c: 68: do { LATAbits.LATA0 = 1; } while(0);
  2582                           
  2583                           ;main.c: 67: case 0:
  2584                           
  2585  059B  0022               	movlb	2	; select bank2
  2586  059C  140C               	bsf	12,0	;volatile
  2587                           
  2588                           ;main.c: 69: do { LATAbits.LATA1 = 1; } while(0);
  2589  059D  148C               	bsf	12,1	;volatile
  2590                           
  2591                           ;main.c: 70: do { LATAbits.LATA2 = 1; } while(0);
  2592  059E  150C               	bsf	12,2	;volatile
  2593                           
  2594                           ;main.c: 71: do { LATAbits.LATA3 = 1; } while(0);
  2595  059F  158C               	bsf	12,3	;volatile
  2596                           
  2597                           ;main.c: 72: do { LATAbits.LATA4 = 1; } while(0);
  2598  05A0  160C               	bsf	12,4	;volatile
  2599                           
  2600                           ;main.c: 73: do { LATAbits.LATA5 = 1; } while(0);
  2601  05A1  168C               	bsf	12,5	;volatile
  2602                           
  2603                           ;main.c: 74: do { LATAbits.LATA7 = 1; } while(0);
  2604  05A2  178C               	bsf	12,7	;volatile
  2605                           
  2606                           ;main.c: 75: do { LATAbits.LATA6 = 1; } while(0);
  2607  05A3  170C               	bsf	12,6	;volatile
  2608                           
  2609                           ;main.c: 76: break;
  2610  05A4  0008               	return
  2611  05A5                     l194:	
  2612                           ;main.c: 78: do { LATAbits.LATA0 = 0; } while(0);
  2613                           
  2614                           ;main.c: 77: case 1:
  2615                           
  2616  05A5  0022               	movlb	2	; select bank2
  2617  05A6  100C               	bcf	12,0	;volatile
  2618                           
  2619                           ;main.c: 79: do { LATAbits.LATA1 = 1; } while(0);
  2620  05A7  148C               	bsf	12,1	;volatile
  2621                           
  2622                           ;main.c: 80: do { LATAbits.LATA2 = 1; } while(0);
  2623  05A8  150C               	bsf	12,2	;volatile
  2624                           
  2625                           ;main.c: 81: do { LATAbits.LATA3 = 1; } while(0);
  2626  05A9  158C               	bsf	12,3	;volatile
  2627                           
  2628                           ;main.c: 82: do { LATAbits.LATA4 = 1; } while(0);
  2629  05AA  160C               	bsf	12,4	;volatile
  2630                           
  2631                           ;main.c: 83: do { LATAbits.LATA5 = 1; } while(0);
  2632  05AB  168C               	bsf	12,5	;volatile
  2633                           
  2634                           ;main.c: 84: do { LATAbits.LATA7 = 1; } while(0);
  2635  05AC  178C               	bsf	12,7	;volatile
  2636                           
  2637                           ;main.c: 85: do { LATAbits.LATA6 = 1; } while(0);
  2638  05AD  170C               	bsf	12,6	;volatile
  2639                           
  2640                           ;main.c: 86: break;
  2641  05AE  0008               	return
  2642  05AF                     l211:	
  2643                           ;main.c: 88: do { LATAbits.LATA0 = 1; } while(0);
  2644                           
  2645                           ;main.c: 87: case 2:
  2646                           
  2647  05AF  0022               	movlb	2	; select bank2
  2648  05B0  140C               	bsf	12,0	;volatile
  2649                           
  2650                           ;main.c: 89: do { LATAbits.LATA1 = 0; } while(0);
  2651  05B1  108C               	bcf	12,1	;volatile
  2652                           
  2653                           ;main.c: 90: do { LATAbits.LATA2 = 1; } while(0);
  2654  05B2  150C               	bsf	12,2	;volatile
  2655                           
  2656                           ;main.c: 91: do { LATAbits.LATA3 = 1; } while(0);
  2657  05B3  158C               	bsf	12,3	;volatile
  2658                           
  2659                           ;main.c: 92: do { LATAbits.LATA4 = 1; } while(0);
  2660  05B4  160C               	bsf	12,4	;volatile
  2661                           
  2662                           ;main.c: 93: do { LATAbits.LATA5 = 1; } while(0);
  2663  05B5  168C               	bsf	12,5	;volatile
  2664                           
  2665                           ;main.c: 94: do { LATAbits.LATA7 = 1; } while(0);
  2666  05B6  178C               	bsf	12,7	;volatile
  2667                           
  2668                           ;main.c: 95: do { LATAbits.LATA6 = 1; } while(0);
  2669  05B7  170C               	bsf	12,6	;volatile
  2670                           
  2671                           ;main.c: 96: break;
  2672  05B8  0008               	return
  2673  05B9                     l228:	
  2674                           ;main.c: 98: do { LATAbits.LATA0 = 1; } while(0);
  2675                           
  2676                           ;main.c: 97: case 3:
  2677                           
  2678  05B9  0022               	movlb	2	; select bank2
  2679  05BA  140C               	bsf	12,0	;volatile
  2680                           
  2681                           ;main.c: 99: do { LATAbits.LATA1 = 1; } while(0);
  2682  05BB  148C               	bsf	12,1	;volatile
  2683                           
  2684                           ;main.c: 100: do { LATAbits.LATA2 = 0; } while(0);
  2685  05BC  110C               	bcf	12,2	;volatile
  2686                           
  2687                           ;main.c: 101: do { LATAbits.LATA3 = 1; } while(0);
  2688  05BD  158C               	bsf	12,3	;volatile
  2689                           
  2690                           ;main.c: 102: do { LATAbits.LATA4 = 1; } while(0);
  2691  05BE  160C               	bsf	12,4	;volatile
  2692                           
  2693                           ;main.c: 103: do { LATAbits.LATA5 = 1; } while(0);
  2694  05BF  168C               	bsf	12,5	;volatile
  2695                           
  2696                           ;main.c: 104: do { LATAbits.LATA7 = 1; } while(0);
  2697  05C0  178C               	bsf	12,7	;volatile
  2698                           
  2699                           ;main.c: 105: do { LATAbits.LATA6 = 1; } while(0);
  2700  05C1  170C               	bsf	12,6	;volatile
  2701                           
  2702                           ;main.c: 106: break;
  2703  05C2  0008               	return
  2704  05C3                     l245:	
  2705                           ;main.c: 108: do { LATAbits.LATA0 = 1; } while(0);
  2706                           
  2707                           ;main.c: 107: case 4:
  2708                           
  2709  05C3  0022               	movlb	2	; select bank2
  2710  05C4  140C               	bsf	12,0	;volatile
  2711                           
  2712                           ;main.c: 109: do { LATAbits.LATA1 = 1; } while(0);
  2713  05C5  148C               	bsf	12,1	;volatile
  2714                           
  2715                           ;main.c: 110: do { LATAbits.LATA2 = 1; } while(0);
  2716  05C6  150C               	bsf	12,2	;volatile
  2717                           
  2718                           ;main.c: 111: do { LATAbits.LATA3 = 0; } while(0);
  2719  05C7  118C               	bcf	12,3	;volatile
  2720                           
  2721                           ;main.c: 112: do { LATAbits.LATA4 = 1; } while(0);
  2722  05C8  160C               	bsf	12,4	;volatile
  2723                           
  2724                           ;main.c: 113: do { LATAbits.LATA5 = 1; } while(0);
  2725  05C9  168C               	bsf	12,5	;volatile
  2726                           
  2727                           ;main.c: 114: do { LATAbits.LATA7 = 1; } while(0);
  2728  05CA  178C               	bsf	12,7	;volatile
  2729                           
  2730                           ;main.c: 115: do { LATAbits.LATA6 = 1; } while(0);
  2731  05CB  170C               	bsf	12,6	;volatile
  2732                           
  2733                           ;main.c: 116: break;
  2734  05CC  0008               	return
  2735  05CD                     l262:	
  2736                           ;main.c: 118: do { LATAbits.LATA0 = 1; } while(0);
  2737                           
  2738                           ;main.c: 117: case 5:
  2739                           
  2740  05CD  0022               	movlb	2	; select bank2
  2741  05CE  140C               	bsf	12,0	;volatile
  2742                           
  2743                           ;main.c: 119: do { LATAbits.LATA1 = 1; } while(0);
  2744  05CF  148C               	bsf	12,1	;volatile
  2745                           
  2746                           ;main.c: 120: do { LATAbits.LATA2 = 1; } while(0);
  2747  05D0  150C               	bsf	12,2	;volatile
  2748                           
  2749                           ;main.c: 121: do { LATAbits.LATA3 = 1; } while(0);
  2750  05D1  158C               	bsf	12,3	;volatile
  2751                           
  2752                           ;main.c: 122: do { LATAbits.LATA4 = 0; } while(0);
  2753  05D2  120C               	bcf	12,4	;volatile
  2754                           
  2755                           ;main.c: 123: do { LATAbits.LATA5 = 1; } while(0);
  2756  05D3  168C               	bsf	12,5	;volatile
  2757                           
  2758                           ;main.c: 124: do { LATAbits.LATA7 = 1; } while(0);
  2759  05D4  178C               	bsf	12,7	;volatile
  2760                           
  2761                           ;main.c: 125: do { LATAbits.LATA6 = 1; } while(0);
  2762  05D5  170C               	bsf	12,6	;volatile
  2763                           
  2764                           ;main.c: 126: break;
  2765  05D6  0008               	return
  2766  05D7                     l279:	
  2767                           ;main.c: 128: do { LATAbits.LATA0 = 1; } while(0);
  2768                           
  2769                           ;main.c: 127: case 6:
  2770                           
  2771  05D7  0022               	movlb	2	; select bank2
  2772  05D8  140C               	bsf	12,0	;volatile
  2773                           
  2774                           ;main.c: 129: do { LATAbits.LATA1 = 1; } while(0);
  2775  05D9  148C               	bsf	12,1	;volatile
  2776                           
  2777                           ;main.c: 130: do { LATAbits.LATA2 = 1; } while(0);
  2778  05DA  150C               	bsf	12,2	;volatile
  2779                           
  2780                           ;main.c: 131: do { LATAbits.LATA3 = 1; } while(0);
  2781  05DB  158C               	bsf	12,3	;volatile
  2782                           
  2783                           ;main.c: 132: do { LATAbits.LATA4 = 1; } while(0);
  2784  05DC  160C               	bsf	12,4	;volatile
  2785                           
  2786                           ;main.c: 133: do { LATAbits.LATA5 = 0; } while(0);
  2787  05DD  128C               	bcf	12,5	;volatile
  2788                           
  2789                           ;main.c: 134: do { LATAbits.LATA7 = 1; } while(0);
  2790  05DE  178C               	bsf	12,7	;volatile
  2791                           
  2792                           ;main.c: 135: do { LATAbits.LATA6 = 1; } while(0);
  2793  05DF  170C               	bsf	12,6	;volatile
  2794                           
  2795                           ;main.c: 136: break;
  2796  05E0  0008               	return
  2797  05E1                     l296:	
  2798                           ;main.c: 138: do { LATAbits.LATA0 = 1; } while(0);
  2799                           
  2800                           ;main.c: 137: case 7:
  2801                           
  2802  05E1  0022               	movlb	2	; select bank2
  2803  05E2  140C               	bsf	12,0	;volatile
  2804                           
  2805                           ;main.c: 139: do { LATAbits.LATA1 = 1; } while(0);
  2806  05E3  148C               	bsf	12,1	;volatile
  2807                           
  2808                           ;main.c: 140: do { LATAbits.LATA2 = 1; } while(0);
  2809  05E4  150C               	bsf	12,2	;volatile
  2810                           
  2811                           ;main.c: 141: do { LATAbits.LATA3 = 1; } while(0);
  2812  05E5  158C               	bsf	12,3	;volatile
  2813                           
  2814                           ;main.c: 142: do { LATAbits.LATA4 = 1; } while(0);
  2815  05E6  160C               	bsf	12,4	;volatile
  2816                           
  2817                           ;main.c: 143: do { LATAbits.LATA5 = 1; } while(0);
  2818  05E7  168C               	bsf	12,5	;volatile
  2819                           
  2820                           ;main.c: 144: do { LATAbits.LATA7 = 0; } while(0);
  2821  05E8  138C               	bcf	12,7	;volatile
  2822                           
  2823                           ;main.c: 145: do { LATAbits.LATA6 = 1; } while(0);
  2824  05E9  170C               	bsf	12,6	;volatile
  2825                           
  2826                           ;main.c: 146: break;
  2827  05EA  0008               	return
  2828  05EB                     l313:	
  2829                           ;main.c: 148: do { LATAbits.LATA0 = 1; } while(0);
  2830                           
  2831                           ;main.c: 147: case 8:
  2832                           
  2833  05EB  0022               	movlb	2	; select bank2
  2834  05EC  140C               	bsf	12,0	;volatile
  2835                           
  2836                           ;main.c: 149: do { LATAbits.LATA1 = 1; } while(0);
  2837  05ED  148C               	bsf	12,1	;volatile
  2838                           
  2839                           ;main.c: 150: do { LATAbits.LATA2 = 1; } while(0);
  2840  05EE  150C               	bsf	12,2	;volatile
  2841                           
  2842                           ;main.c: 151: do { LATAbits.LATA3 = 1; } while(0);
  2843  05EF  158C               	bsf	12,3	;volatile
  2844                           
  2845                           ;main.c: 152: do { LATAbits.LATA4 = 1; } while(0);
  2846  05F0  160C               	bsf	12,4	;volatile
  2847                           
  2848                           ;main.c: 153: do { LATAbits.LATA5 = 1; } while(0);
  2849  05F1  168C               	bsf	12,5	;volatile
  2850                           
  2851                           ;main.c: 154: do { LATAbits.LATA7 = 1; } while(0);
  2852  05F2  178C               	bsf	12,7	;volatile
  2853                           
  2854                           ;main.c: 155: do { LATAbits.LATA6 = 0; } while(0);
  2855  05F3  130C               	bcf	12,6	;volatile
  2856                           
  2857                           ;main.c: 156: break;
  2858  05F4  0008               	return
  2859  05F5                     l330:	
  2860                           ;main.c: 159: do { LATAbits.LATA0 = 1; } while(0);
  2861                           
  2862                           ;main.c: 158: default:
  2863                           
  2864  05F5  0022               	movlb	2	; select bank2
  2865  05F6  140C               	bsf	12,0	;volatile
  2866                           
  2867                           ;main.c: 160: do { LATAbits.LATA1 = 1; } while(0);
  2868  05F7  148C               	bsf	12,1	;volatile
  2869                           
  2870                           ;main.c: 161: do { LATAbits.LATA2 = 1; } while(0);
  2871  05F8  150C               	bsf	12,2	;volatile
  2872                           
  2873                           ;main.c: 162: do { LATAbits.LATA3 = 1; } while(0);
  2874  05F9  158C               	bsf	12,3	;volatile
  2875                           
  2876                           ;main.c: 163: do { LATAbits.LATA4 = 1; } while(0);
  2877  05FA  160C               	bsf	12,4	;volatile
  2878                           
  2879                           ;main.c: 164: do { LATAbits.LATA5 = 1; } while(0);
  2880  05FB  168C               	bsf	12,5	;volatile
  2881                           
  2882                           ;main.c: 165: do { LATAbits.LATA7 = 1; } while(0);
  2883  05FC  178C               	bsf	12,7	;volatile
  2884                           
  2885                           ;main.c: 166: do { LATAbits.LATA6 = 1; } while(0);
  2886  05FD  170C               	bsf	12,6	;volatile
  2887                           
  2888                           ;main.c: 168: }
  2889                           
  2890                           ;main.c: 167: break;
  2891  05FE  0008               	return
  2892  05FF                     l1139:	
  2893                           
  2894                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2895                           ; Switch size 1, requested type "space"
  2896                           ; Number of cases is 1, Range of values is 0 to 0
  2897                           ; switch strategies available:
  2898                           ; Name         Instructions Cycles
  2899                           ; simple_byte            4     3 (average)
  2900                           ; direct_byte            8     6 (fixed)
  2901                           ; jumptable            260     6 (fixed)
  2902                           ;	Chosen strategy is simple_byte
  2903  05FF  0871               	movf	SetChannel@ChannelNumber+1,w
  2904  0600  3A00               	xorlw	0	; case 0
  2905  0601  1903               	skipnz
  2906  0602  2E04               	goto	l1393
  2907  0603  2DF5               	goto	l330
  2908  0604                     l1393:	
  2909                           
  2910                           ; Switch size 1, requested type "space"
  2911                           ; Number of cases is 9, Range of values is 0 to 8
  2912                           ; switch strategies available:
  2913                           ; Name         Instructions Cycles
  2914                           ; direct_byte           24     6 (fixed)
  2915                           ; simple_byte           28    15 (average)
  2916                           ; jumptable            260     6 (fixed)
  2917                           ;	Chosen strategy is direct_byte
  2918  0604  0870               	movf	SetChannel@ChannelNumber,w
  2919  0605  0084               	movwf	4
  2920  0606  3009               	movlw	9
  2921  0607  0204               	subwf	4,w
  2922  0608  1803               	skipnc
  2923  0609  2DF5               	goto	l330
  2924  060A  3180               	movlp	high S1395
  2925  060B  3002               	movlw	low S1395
  2926  060C  0704               	addwf	4,w
  2927  060D  0082               	movwf	2
  2928  060E  0008               	return
  2929  060F                     __end_of_SetChannel:	
  2930                           
  2931                           	psect	swtext1
  2932  0002                     __pswtext1:	
  2933  0002                     S1395:	
  2934  0002  2D9B               	ljmp	l176
  2935  0003  2DA5               	ljmp	l194
  2936  0004  2DAF               	ljmp	l211
  2937  0005  2DB9               	ljmp	l228
  2938  0006  2DC3               	ljmp	l245
  2939  0007  2DCD               	ljmp	l262
  2940  0008  2DD7               	ljmp	l279
  2941  0009  2DE1               	ljmp	l296
  2942  000A  2DEB               	ljmp	l313
  2943                           
  2944                           	psect	text14
  2945  04BC                     __ptext14:	
  2946 ;; *************** function _SPI_Exchange8bit *****************
  2947 ;; Defined at:
  2948 ;;		line 77 in file "mcc_generated_files/spi.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;  data            1    wreg     unsigned char 
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;  data            1    0[COMMON] unsigned char 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      unsigned char 
  2955 ;; Registers used:
  2956 ;;		wreg
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMMON   BANK0   BANK1
  2962 ;;      Params:         0       0       0
  2963 ;;      Locals:         1       0       0
  2964 ;;      Temps:          0       0       0
  2965 ;;      Totals:         1       0       0
  2966 ;;Total ram usage:        1 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		_GetData
  2972 ;;		_SPI_Exchange8bitBuffer
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           
  2977                           ;psect for function _SPI_Exchange8bit
  2978  04BC                     _SPI_Exchange8bit:	
  2979                           
  2980                           ;incstack = 0
  2981                           ; Regs used in _SPI_Exchange8bit: [wreg]
  2982                           ;SPI_Exchange8bit@data stored from wreg
  2983  04BC  00F0               	movwf	SPI_Exchange8bit@data
  2984                           
  2985                           ;spi.c: 80: SSP1CON1bits.WCOL = 0;
  2986  04BD  0024               	movlb	4	; select bank4
  2987  04BE  1395               	bcf	21,7	;volatile
  2988                           
  2989                           ;spi.c: 82: SSPBUF = data;
  2990  04BF  0870               	movf	SPI_Exchange8bit@data,w
  2991  04C0  0091               	movwf	17	;volatile
  2992  04C1                     l18:	
  2993                           ;spi.c: 85: {
  2994                           
  2995                           ;spi.c: 84: while(SSP1STATbits.BF == 0x0)
  2996                           
  2997  04C1  1C14               	btfss	20,0	;volatile
  2998  04C2  2CC1               	goto	l18
  2999                           
  3000                           ;spi.c: 86: }
  3001                           ;spi.c: 88: return (SSPBUF);
  3002  04C3  0811               	movf	17,w	;volatile
  3003  04C4  0008               	return
  3004  04C5                     __end_of_SPI_Exchange8bit:	
  3005  007E                     btemp	set	126	;btemp
  3006  007E                     wtemp	set	126
  3007  007E                     wtemp0	set	126
  3008  0080                     wtemp1	set	128
  3009  0082                     wtemp2	set	130
  3010  0084                     wtemp3	set	132
  3011  0086                     wtemp4	set	134
  3012  0088                     wtemp5	set	136
  3013  007F                     wtemp6	set	127
  3014  007E                     ttemp	set	126
  3015  007E                     ttemp0	set	126
  3016  0081                     ttemp1	set	129
  3017  0084                     ttemp2	set	132
  3018  0087                     ttemp3	set	135
  3019  007F                     ttemp4	set	127
  3020  007E                     ltemp	set	126
  3021  007E                     ltemp0	set	126
  3022  0082                     ltemp1	set	130
  3023  0086                     ltemp2	set	134
  3024  0080                     ltemp3	set	128


Data Sizes:
    Strings     7
    Constant    10
    Data        20
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     31      63
    BANK1            32      0      20

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_1(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> Frame(BANK1[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    SendFrame@Data	PTR unsigned char  size(1) Largest target is 20
		 -> Frame(BANK1[20]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SendFrame->_EUSART_Write
    _GetData->_SetChannel

Critical Paths under _main in BANK0

    _main->_GetData

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1751
                                             28 BANK0      3     3      0
                            _GetData
                  _SYSTEM_Initialize
                          _SendFrame
                         _SetChannel
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    19      6    1090
                                              0 BANK0     17    11      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _SendFrame                                            4     4      0     139
                                              1 COMMON     4     4      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetData                                             32    28      4     341
                                              2 COMMON     4     0      4
                                              0 BANK0     28    28      0
                   _SPI_Exchange8bit
                         _SetChannel
 ---------------------------------------------------------------------------------
 (1) _SetChannel                                           2     0      2     181
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _SPI_Exchange8bit                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetData
     _SPI_Exchange8bit
     _SetChannel
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _WDT_Initialize
   _SendFrame
     _EUSART_Write
   _SetChannel
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      61       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1F      3F       6       78.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0      14       8       62.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      61       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Nov 27 14:15:57 2016

                 _SPI_Initialize 049C                                pc 0002                      __CFG_CP$OFF 0000  
                             l18 04C1                               l99 04B5                      __CFG_LVP$ON 0000  
                            l211 05AF                              l313 05EB                              l330 05F5  
                            l228 05B9                              l245 05C3                              l262 05CD  
                            l176 059B                              l194 05A5                              l279 05D7  
                            l296 05E1                              u415 057B                              u425 0585  
                            u515 051C                              u435 058D                              u525 0533  
                            u535 0658                              u545 0664                              u465 0543  
                            u395 0571                              u707 06AF                              u485 0552  
                            u495 0559                              u585 0796                              u697 069F  
                   __CFG_BORV$LO 0000                              wreg 0009                     __CFG_IESO$ON 0000  
                           S1395 0002                             l1211 0535                             l1205 051E  
                           l1161 057A                             l1241 074D                             l1139 05FF  
                           l1171 0595                             l1323 0698                             l1167 058C  
                           l1159 056E                             l1183 0540                             l1263 0781  
                           l1247 0765                             l1185 054C                             l1193 0561  
                           l1257 077B                             l1283 07B3                             l1275 07AF  
                           l1189 0558                             l1269 07A0                             l1285 072B  
                           l1287 07E9                             l1393 0604                             STR_1 04DA  
                           _LATA 010C                             _LATB 010D                             _LATC 010E  
                           _WPUB 020D                             _WPUE 0210                     __CFG_WRT$OFF 0000  
                  __CFG_FCMEN$ON 0000                             _main 0693                             fsr0h 0005  
                           fsr1h 0007                             fsr0l 0004                             indf0 0000  
                           indf1 0001                             fsr1l 0006                             btemp 007E  
                  __CFG_BOREN$ON 0000                             ltemp 007E                             start 0001  
                           ttemp 007E                             wtemp 007E           __end_of_SPI_Initialize 04A2  
                __end_of_GetData 0693                    __CFG_MCLRE$ON 0000                    ?_EUSART_Write 0070  
 __size_of_OSCILLATOR_Initialize 0004    __end_of_OSCILLATOR_Initialize 0498                            ?_main 0070  
                  __CFG_WDTE$OFF 0000                  __end_of___lwdiv 059A                  __end_of___lwmod 0566  
                          _RCREG 0199                            _RCSTA 019D                            _TRISA 008C  
                          _TRISB 008D                            _TRISC 008E                            _TXREG 019A  
                          _TXSTA 019E                            _Frame 00A0                  __end_of_dpowers 04DA  
                 _WDT_Initialize 0498                            ltemp0 007E                            ltemp1 0082  
                          ltemp2 0086                            ltemp3 0080                            ttemp0 007E  
                          ttemp1 0081                            ttemp2 0084                            ttemp3 0087  
                          ttemp4 007F                            status 0003                            wtemp0 007E  
                          wtemp1 0080                            wtemp2 0082                            wtemp3 0084  
                          wtemp4 0086                            wtemp5 0088                            wtemp6 007F  
                __end_of_sprintf 07EE                       SendFrame@i 0073                  ?_SPI_Initialize 0070  
                __initialization 07EE                     __end_of_main 0725                   ??_EUSART_Write 0070  
                 __CFG_LPBOR$OFF 0000                           ??_main 005C                       _SetChannel 059A  
         __end_of_WDT_Initialize 049C         __end_of_SPI_Exchange8bit 04C5                           _APFCON 011D  
                         _ANSELA 018C                           _ANSELB 018D                           _ANSELC 018E  
                      ??_GetData 0040                           _OSCCON 0099                           _SPBRGH 019C  
                         _SPBRGL 019B                           _WDTCON 0097                           _SSPBUF 0211  
                 __CFG_PWRTE$OFF 0000               __size_of_SendFrame 002A                    GetData@Data_A 0058  
                  GetData@Data_B 0059                    GetData@Data_C 005A                    GetData@Data_D 005B  
                 __CFG_STVREN$ON 0000                        ??___lwdiv 0074                        ??___lwmod 007C  
                ?_WDT_Initialize 0070                        ??_sprintf 0046                _SYSTEM_Initialize 04A2  
        __end_of__initialization 07FE               ?_SYSTEM_Initialize 0070                   __pcstackCOMMON 0070  
                   __pidataBANK1 04E1              ??_SYSTEM_Initialize 0070                   _OPTION_REGbits 0095  
                    ?_SetChannel 0070                __end_of_SendFrame 053A        __end_of_SYSTEM_Initialize 04A8  
                     __pbssBANK0 0020             __end_of_EUSART_Write 04BC                  __CFG_VCAPEN$OFF 0000  
                     __pmaintext 0693                          _CH1_RAW 0020                          _CH2_RAW 0024  
                        _BAUDCON 019F                          _CH3_RAW 0028                          _CH4_RAW 002C  
                        _CH5_RAW 0030                          _CH6_RAW 0034                          _CH7_RAW 0038  
                        _CH8_RAW 003C                          _SSP1ADD 0212                 ??_SPI_Initialize 0070  
                        _GetData 060F              __size_of_SetChannel 0075                          ___lwdiv 0566  
                        ___lwmod 053A                          __ptext1 0725                          __ptext2 053A  
                        __ptext3 0566                          __ptext4 0510                          __ptext5 04B4  
                        __ptext6 04A2                          __ptext7 0498                          __ptext8 049C  
                        __ptext9 04F5                          _dpowers 04D0            _OSCILLATOR_Initialize 0494  
       ??_PIN_MANAGER_Initialize 0070                ?_SPI_Exchange8bit 0070       __size_of_SYSTEM_Initialize 0006  
                        _sprintf 0725                          clrloop0 04A9             end_of_initialization 07FE  
             ??_SPI_Exchange8bit 0070             SPI_Exchange8bit@data 0070                          init_ram 04AE  
                        initloop 04AF                _EUSART_Initialize 04C5             GetData@ChannelNumber 0053  
             ?_EUSART_Initialize 0070                        _RCSTAbits 019D                     __pstringtext 04D0  
            ??_EUSART_Initialize 0070                 ??_WDT_Initialize 0070                 __CFG_FOSC$INTOSC 0000  
          __size_of_EUSART_Write 0008        __end_of_EUSART_Initialize 04D0                     _EUSART_Write 04B4  
         ?_OSCILLATOR_Initialize 0070                     ??_SetChannel 0072              start_initialization 07EE  
__size_of_PIN_MANAGER_Initialize 001B                        _SendFrame 0510               __end_of_SetChannel 060F  
                    __pdataBANK1 00A0                        ___latbits 0000                    __pcstackBANK0 0040  
                       ?_GetData 0072       __size_of_EUSART_Initialize 000B                       ?_SendFrame 0070  
                    sprintf@flag 004B                      sprintf@prec 004C                 ___lwdiv@dividend 0072  
         _PIN_MANAGER_Initialize 04F5                         ?___lwdiv 0070                         ?___lwmod 0078  
                      __pswtext1 0002                 ___lwdiv@quotient 0075                         ?_sprintf 0040  
                       _LATAbits 010C                         _LATBbits 010D                        clear_ram0 04A8  
        SetChannel@ChannelNumber 0070                         _PIR1bits 0011             GetData@MAX31855_Data 0054  
      __size_of_SPI_Exchange8bit 0009                         _SSP1CON1 0215                         _SSP1STAT 0214  
                    ??_SendFrame 0071                 __size_of_GetData 0084          __size_of_SPI_Initialize 0006  
        ??_OSCILLATOR_Initialize 0070                 __size_of___lwdiv 0034                 __size_of___lwmod 002C  
                     sprintf@val 004D                  ___lwdiv@divisor 0070                  ___lwdiv@counter 0077  
                       __ptext10 0494                         __ptext11 04C5                         __ptext12 060F  
                       __ptext13 059A                         __ptext14 04BC                     _SSP1CON1bits 0215  
               __size_of_sprintf 00C9                    __size_of_main 0092                     _SSP1STATbits 0214  
        __size_of_WDT_Initialize 0004                        sprintf@ap 004A                        sprintf@sp 004F  
               ___lwmod@dividend 007A          ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000  
               _SPI_Exchange8bit 04BC                         sprintf@c 0050                         sprintf@f 0040  
                ___lwmod@divisor 0078                  ___lwmod@counter 007D               EUSART_Write@txData 0070  
 __end_of_PIN_MANAGER_Initialize 0510                    SendFrame@Data 0072  
